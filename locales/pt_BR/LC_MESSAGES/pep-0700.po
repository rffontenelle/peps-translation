# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0700.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0700.rst:3
msgid "Paul Moore <p.f.moore@gmail.com>"
msgstr ""

#: ../../peps/pep-0700.rst
msgid "PEP-Delegate"
msgstr ""

#: ../../peps/pep-0700.rst:4
msgid "Donald Stufft <donald@stufft.io>"
msgstr ""

#: ../../peps/pep-0700.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/pep-0700.rst:5
msgid ""
"https://discuss.python.org/t/pep-700-additional-fields-for-the-simple-"
"api-for-package-indexes/20177"
msgstr ""

#: ../../peps/pep-0700.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0700.rst:6
#, fuzzy
msgid "Accepted"
msgstr "Criada em"

#: ../../peps/pep-0700.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0700.rst:7
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0700.rst
msgid "Topic"
msgstr ""

#: ../../peps/pep-0700.rst:8
msgid "Packaging"
msgstr ""

#: ../../peps/pep-0700.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0700.rst:10
msgid "21-Oct-2022"
msgstr ""

#: ../../peps/pep-0700.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0700.rst:11
msgid ""
"`21-Oct-2022 <https://discuss.python.org/t/pep-700-additional-fields-for-"
"the-simple-api-for-package-indexes/20177>`__"
msgstr ""

#: ../../peps/pep-0700.rst
msgid "Resolution"
msgstr ""

#: ../../peps/pep-0700.rst:12
msgid ""
"https://discuss.python.org/t/pep-700-additional-fields-for-the-simple-"
"api-for-package-indexes/20177/42"
msgstr ""

#: ../../peps/pep-0700.rst:16
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0700.rst:18
msgid ""
":pep:`691` defined a JSON form for the \"Simple Repository API\". This "
"allowed clients to more easily query the data that was previously only "
"available in HTML, as defined in :pep:`503`."
msgstr ""

#: ../../peps/pep-0700.rst:22
msgid ""
"This proposal adds three fields to the JSON form, which allow it to be "
"used in place of PyPI's `JSON API <https://warehouse.pypa.io/api-"
"reference/json.html>`__ in a number of situations."
msgstr ""

#: ../../peps/pep-0700.rst:26
msgid ""
"A field to allow retrieval of a list of all the published versions of a "
"project."
msgstr ""

#: ../../peps/pep-0700.rst:27
msgid "Fields containing the size and upload time for a project file."
msgstr ""

#: ../../peps/pep-0700.rst:29
msgid ""
"The new fields are all part of the data returned from the \"project "
"details\" URL."
msgstr ""

#: ../../peps/pep-0700.rst:33
msgid "Rationale"
msgstr ""

#: ../../peps/pep-0700.rst:35
msgid ""
"With the introduction of the JSON form of the simple API in :pep:`691`, "
"the simple API offers functionality that is almost as complete as the "
"PyPI JSON API. This PEP adds a number of fields which were previously "
"only available through the JSON API, in order to allow more clients which"
" were previously Warehouse specific to support arbitrary standards-"
"compliant indexes."
msgstr ""

#: ../../peps/pep-0700.rst:43
msgid "Specification"
msgstr ""

#: ../../peps/pep-0700.rst:45
msgid ""
"This specification defines version 1.1 of the simple repository API. For "
"the HTML version of the API, there is no change from version 1.0. For the"
" JSON version of the API, the following changes are made:"
msgstr ""

#: ../../peps/pep-0700.rst:49
msgid "The ``api-version`` must specify version 1.1 or later."
msgstr ""

#: ../../peps/pep-0700.rst:50
msgid "A new ``versions`` key is added at the top level."
msgstr ""

#: ../../peps/pep-0700.rst:51
msgid ""
"Two new \"file information\" keys, ``size`` and ``upload-time``, are "
"added to the ``files`` data."
msgstr ""

#: ../../peps/pep-0700.rst:53
msgid ""
"Keys (at any level) with a leading underscore are reserved as private for"
" index server use. No future standard will assign a meaning to any such "
"key."
msgstr ""

#: ../../peps/pep-0700.rst:56
msgid ""
"The ``versions`` and ``size`` keys are mandatory. The ``upload-time`` key"
" is optional."
msgstr ""

#: ../../peps/pep-0700.rst:60
msgid "Versions"
msgstr ""

#: ../../peps/pep-0700.rst:62
msgid ""
"An additional key, ``versions`` MUST be present at the top level, in "
"addition to the keys ``name``, ``files`` and ``meta`` defined in "
":pep:`691`. This key MUST contain a list of version strings specifying "
"all of the project versions uploaded for this project. The value is "
"logically a set, and as such may not contain duplicates, and the order of"
" the values is not significant."
msgstr ""

#: ../../peps/pep-0700.rst:68
msgid ""
"All of the files listed in the ``files`` key MUST be associated with one "
"of the versions in the ``versions`` key. The ``versions`` key MAY contain"
" versions with no associated files (to represent versions with no files "
"uploaded, if the server has such a concept)."
msgstr ""

#: ../../peps/pep-0700.rst:73
msgid ""
"Note that because servers may hold \"legacy\" data from before the "
"adoption of :pep:`440`, version strings currently cannot be required to "
"be valid :pep:`440` versions, and therefore cannot be assumed to be "
"orderable using the :pep:`440` rules. However, servers SHOULD use "
"normalised :pep:`440` versions where possible."
msgstr ""

#: ../../peps/pep-0700.rst:81
msgid "Additional file information"
msgstr ""

#: ../../peps/pep-0700.rst:83
msgid "Two new keys are added to the ``files`` key."
msgstr ""

#: ../../peps/pep-0700.rst:85
msgid ""
"``size``: This field is mandatory. It MUST contain an integer which is "
"the file size in bytes."
msgstr ""

#: ../../peps/pep-0700.rst:87
msgid ""
"``upload-time``: This field is optional. If present, it MUST contain a "
"valid ISO 8601 date/time string, in the format ``yyyy-mm-"
"ddThh:mm:ss.ffffffZ``, which represents the time the file was uploaded to"
" the index. As indicated by the ``Z`` suffix, the upload time MUST use "
"the UTC timezone. The fractional seconds part of the timestamp (the "
"``.ffffff`` part) is optional, and if present may contain up to 6 digits "
"of precision. If a server does not record upload time information for a "
"file, it MAY omit the ``upload-time`` key."
msgstr ""

#: ../../peps/pep-0700.rst:97
msgid "FAQ"
msgstr ""

#: ../../peps/pep-0700.rst:100
msgid "Why not add this data to the HTML API as well?"
msgstr ""

#: ../../peps/pep-0700.rst:102
msgid ""
"It would be possible to add the data to the HTML API, but the vast "
"majority of consumers for this data are likely to be currently getting it"
" from the PyPI JSON API, and so will already be expecting to parse JSON. "
"Traditional consumers of the HTML API have never needed this data "
"previously."
msgstr ""

#: ../../peps/pep-0700.rst:108
msgid "Does this imply that the HTML API is obsolete?"
msgstr ""

#: ../../peps/pep-0700.rst:110
msgid ""
"No. The FAQ of :pep:`691` was clear that the HTML API is not being "
"deprecated, and this PEP does not change that position. However, clients "
"wishing to access the new data introduced by this PEP will need to use "
"the JSON API to get it. And indexes wanting to provide it will need to "
"serve the JSON format."
msgstr ""

#: ../../peps/pep-0700.rst:116
msgid "Is the simple API replacing the Warehouse JSON and XML-RPC APIs?"
msgstr ""

#: ../../peps/pep-0700.rst:118
msgid ""
"Where possible, clients should prefer the simple API over the JSON or "
"XML-RPC APIs, as the former is standardised and can be assumed to be "
"available from any index, whereas the latter are exclusive to the "
"Warehouse project."
msgstr ""

#: ../../peps/pep-0700.rst:122
msgid ""
"However, while this PEP brings the simple API closer to being able to "
"replace the JSON API, there is no formal policy that the simple API will "
"replicate all of the functionality covered by the existing Warehouse "
"APIs. Proposed additions to the simple API will still be considered on "
"their individual merits, and the requirement that the API should be "
"simple and fast for the primary use case of locating files for a project "
"will remain the overriding consideration."
msgstr ""

#: ../../peps/pep-0700.rst:130
msgid "Why not allow other date formats?"
msgstr ""

#: ../../peps/pep-0700.rst:132
msgid ""
"The ISO 8601 standard is complex, and there seems little value in "
"requiring clients to deal with that. The standard library ``datetime`` "
"module provides methods to parse ISO 8601 strings, but it is possible "
"that users may want to access index data *without* using Python (for "
"example, piping the output of ``curl`` into ``jq``). Having a single, "
"well-defined format makes this easier, and doesn't have any significant "
"disadvantages."
msgstr ""

#: ../../peps/pep-0700.rst:140
msgid "What if file sizes are too big for a JSON number?"
msgstr ""

#: ../../peps/pep-0700.rst:142
msgid ""
"The JSON standard does not specify how numbers are to be interpreted. "
"Python can read and write arbitrary-length integers in a JSON file, so "
"this should not be an issue for code written in Python. Non-Python "
"implementations may need to take care to handle large integers correctly,"
" but this is not expected to be a significant problem."
msgstr ""

#: ../../peps/pep-0700.rst:149
msgid "Why not require PEP 440 versions?"
msgstr ""

#: ../../peps/pep-0700.rst:151
msgid ""
"At the time this PEP was written, PyPI still contains (and serves) "
"projects and files with \"legacy\" versions. Requiring :pep:`440` "
"versions would make it impossible for PyPI to follow this specification "
"while still serving the existing content."
msgstr ""

#: ../../peps/pep-0700.rst:156
msgid ""
"Ideally, at some future time, the simple index API will be updated to "
"require :pep:`440` versions, at which time this specification should be "
"updated to reflect that. However, that change will need to be co-"
"ordinated with existing index providers including PyPI, to desupport and "
"remove non-conforming projects and/or files."
msgstr ""

#: ../../peps/pep-0700.rst:163
msgid "Why not provide a \"latest version\" value?"
msgstr ""

#: ../../peps/pep-0700.rst:165
msgid ""
"For :pep:`440` versions, this is easy enough for the client to do (using "
"the ``packaging`` library, ``latest = max(Version(s) for s in "
"proj[\"versions\"])``). For non-standard versions, there is no well-"
"defined ordering, and clients will need to decide on what rule is "
"appropriate for their needs. Requiring the server to supply a latest "
"version value takes the choice away from the client."
msgstr ""

#: ../../peps/pep-0700.rst:171
msgid ""
"Servers with an explicit concept of which version is the \"latest\", "
"which cannot be calculated from data available to the client, can provide"
" a non-standard, underscore-prefixed key to convey that information to "
"the client if they wish."
msgstr ""

#: ../../peps/pep-0700.rst:177
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0700.rst:179
msgid ""
"This document is placed in the public domain or under the "
"CC0-1.0-Universal license, whichever is more permissive."
msgstr ""

#~ msgid "Draft"
#~ msgstr ""

