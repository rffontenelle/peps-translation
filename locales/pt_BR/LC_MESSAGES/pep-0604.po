# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-14 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../peps/peps/pep-0604.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/peps/pep-0604.rst:3
msgid "Philippe PRADOS <python@prados.fr>, Maggie Moss <maggiebmoss@gmail.com>"
msgstr ""

#: ../../peps/peps/pep-0604.rst
msgid "Sponsor"
msgstr ""

#: ../../peps/peps/pep-0604.rst:4
msgid "Chris Angelico <rosuav@gmail.com>"
msgstr ""

#: ../../peps/peps/pep-0604.rst
msgid "BDFL-Delegate"
msgstr ""

#: ../../peps/peps/pep-0604.rst:5
msgid "Guido van Rossum <guido@python.org>"
msgstr ""

#: ../../peps/peps/pep-0604.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/peps/pep-0604.rst:6
msgid "typing-sig@python.org"
msgstr ""

#: ../../peps/peps/pep-0604.rst
msgid "Status"
msgstr "Status"

#: ../../peps/peps/pep-0604.rst:7
msgid "Final"
msgstr ""

#: ../../peps/peps/pep-0604.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/peps/pep-0604.rst:8
msgid "Standards Track"
msgstr ""

#: ../../peps/peps/pep-0604.rst
msgid "Topic"
msgstr ""

#: ../../peps/peps/pep-0604.rst:9
msgid "Typing"
msgstr ""

#: ../../peps/peps/pep-0604.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/peps/pep-0604.rst:10
msgid "28-Aug-2019"
msgstr ""

#: ../../peps/peps/pep-0604.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/peps/pep-0604.rst:11
msgid "3.10"
msgstr ""

#: ../../peps/peps/pep-0604.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/peps/pep-0604.rst:12
msgid "28-Aug-2019, 05-Aug-2020"
msgstr ""

#: ../../peps/peps/pep-0604.rst:17
msgid "Abstract"
msgstr ""

#: ../../peps/peps/pep-0604.rst:19
msgid ""
"This PEP proposes overloading the ``|`` operator on types to allow writing "
"``Union[X, Y]`` as ``X | Y``, and allows it to appear in ``isinstance`` and "
"``issubclass`` calls."
msgstr ""

#: ../../peps/peps/pep-0604.rst:25
msgid "Motivation"
msgstr ""

#: ../../peps/peps/pep-0604.rst:27
msgid ""
":pep:`484` and :pep:`526` propose a generic syntax to add typing to "
"variables, parameters and function returns. :pep:`585` proposes to :pep:"
"`expose parameters to generics at runtime <585#parameters-to-generics-are-"
"available-at-runtime>`. Mypy [1]_ accepts a syntax which looks like::"
msgstr ""

#: ../../peps/peps/pep-0604.rst:38
msgid ""
"To describe a disjunction (union type), the user must use ``Union[X, Y]``."
msgstr ""

#: ../../peps/peps/pep-0604.rst:40
msgid "The verbosity of this syntax does not help with type adoption."
msgstr ""

#: ../../peps/peps/pep-0604.rst:44
msgid "Proposal"
msgstr ""

#: ../../peps/peps/pep-0604.rst:46
msgid ""
"Inspired by Scala [2]_ and Pike [3]_, this proposal adds operator ``type."
"__or__()``.  With this new operator, it is possible to write ``int | str`` "
"instead of ``Union[int, str]``. In addition to annotations, the result of "
"this expression would then be valid in ``isinstance()`` and "
"``issubclass()``::"
msgstr ""

#: ../../peps/peps/pep-0604.rst:55
msgid ""
"We will also be able to write ``t | None`` or ``None | t`` instead of "
"``Optional[t]``::"
msgstr ""

#: ../../peps/peps/pep-0604.rst:62
msgid "Specification"
msgstr ""

#: ../../peps/peps/pep-0604.rst:64
msgid ""
"The new union syntax should be accepted for function, variable and parameter "
"annotations."
msgstr ""

#: ../../peps/peps/pep-0604.rst:67
msgid "Simplified Syntax"
msgstr ""

#: ../../peps/peps/pep-0604.rst:85
msgid "The existing ``typing.Union`` and ``|`` syntax should be equivalent."
msgstr ""

#: ../../peps/peps/pep-0604.rst:94
msgid "The order of the items in the Union should not matter for equality."
msgstr ""

#: ../../peps/peps/pep-0604.rst:102
msgid "Optional values should be equivalent to the new union syntax"
msgstr ""

#: ../../peps/peps/pep-0604.rst:108
msgid "A new Union.__repr__() method should be implemented."
msgstr ""

#: ../../peps/peps/pep-0604.rst:119
msgid "isinstance and issubclass"
msgstr ""

#: ../../peps/peps/pep-0604.rst:121
msgid ""
"The new syntax should be accepted for calls to ``isinstance`` and "
"``issubclass`` as long as the Union items are valid arguments to "
"``isinstance`` and ``issubclass`` themselves."
msgstr ""

#: ../../peps/peps/pep-0604.rst:141
msgid "Incompatible changes"
msgstr ""

#: ../../peps/peps/pep-0604.rst:143
msgid "In some situations, some exceptions will not be raised as expected."
msgstr ""

#: ../../peps/peps/pep-0604.rst:145
msgid ""
"If a metaclass implements the ``__or__`` operator, it will override this::"
msgstr ""

#: ../../peps/peps/pep-0604.rst:161
msgid "Objections and responses"
msgstr ""

#: ../../peps/peps/pep-0604.rst:163
msgid "For more details about discussions, see links below:"
msgstr ""

#: ../../peps/peps/pep-0604.rst:165
msgid ""
"`Discussion in python-ideas <https://mail.python.org/archives/list/python-"
"ideas@python.org/thread/FCTXGDT2NNKRJQ6CDEPWUXHVG2AAQZZY/>`_"
msgstr ""

#: ../../peps/peps/pep-0604.rst:166
msgid ""
"`Discussion in typing-sig <https://mail.python.org/archives/list/typing-"
"sig@python.org/thread/D5HCB4NT4S3WSK33WI26WZSFEXCEMNHN/>`_"
msgstr ""

#: ../../peps/peps/pep-0604.rst:169
msgid "1. Add a new operator for ``Union[type1, type2]``?"
msgstr ""

#: ../../peps/peps/pep-0604.rst:171 ../../peps/peps/pep-0604.rst:210
msgid "PROS:"
msgstr ""

#: ../../peps/peps/pep-0604.rst:173
msgid ""
"This syntax can be more readable, and is similar to other languages "
"(Scala, ...)"
msgstr ""

#: ../../peps/peps/pep-0604.rst:174
msgid ""
"At runtime, ``int|str`` might return a simple object in 3.10, rather than "
"everything that you'd need to grab from importing ``typing``"
msgstr ""

#: ../../peps/peps/pep-0604.rst:178 ../../peps/peps/pep-0604.rst:214
msgid "CONS:"
msgstr ""

#: ../../peps/peps/pep-0604.rst:180
msgid ""
"Adding this operator introduces a dependency between ``typing`` and "
"``builtins``"
msgstr ""

#: ../../peps/peps/pep-0604.rst:181
msgid ""
"Breaks the backport (in that ``typing`` can easily be backported but core "
"``types`` can't)"
msgstr ""

#: ../../peps/peps/pep-0604.rst:182
msgid ""
"If Python itself doesn't have to be changed, we'd still need to implement it "
"in mypy, Pyre, PyCharm, Pytype, and who knows what else (it's a minor change "
"see \"Reference Implementation\")"
msgstr ""

#: ../../peps/peps/pep-0604.rst:187
msgid ""
"2. Change only PEP 484 (Type hints) to accept the syntax ``type1 | type2`` ?"
msgstr ""

#: ../../peps/peps/pep-0604.rst:189
msgid ""
":pep:`563` (Postponed Evaluation of Annotations) is enough to accept this "
"proposition, if we accept to not be compatible with the dynamic evaluation "
"of annotations (``eval()``)."
msgstr ""

#: ../../peps/peps/pep-0604.rst:204
msgid "3. Extend ``isinstance()`` and ``issubclass()`` to accept ``Union`` ?"
msgstr ""

#: ../../peps/peps/pep-0604.rst:212
msgid ""
"If they were permitted, then instance checking could use an extremely clean-"
"looking notation"
msgstr ""

#: ../../peps/peps/pep-0604.rst:216
msgid "Must migrate all of the ``typing`` module in ``builtin``"
msgstr ""

#: ../../peps/peps/pep-0604.rst:220
msgid "Reference Implementation"
msgstr ""

#: ../../peps/peps/pep-0604.rst:222
msgid ""
"A new built-in ``Union`` type must be implemented to hold the return value "
"of ``t1 | t2``, and it must be supported by ``isinstance()`` and "
"``issubclass()``. This type can be placed in the ``types`` module. "
"Interoperability between ``types.Union`` and ``typing.Union`` must be "
"provided."
msgstr ""

#: ../../peps/peps/pep-0604.rst:228
msgid ""
"Once the Python language is extended, mypy [1]_ and other type checkers will "
"need to be updated to accept this new syntax."
msgstr ""

#: ../../peps/peps/pep-0604.rst:232
msgid ""
"A proposed implementation for `cpython is here <https://github.com/python/"
"cpython/pull/21515>`_."
msgstr ""

#: ../../peps/peps/pep-0604.rst:234
msgid ""
"A proposed implementation for `mypy is here <https://github.com/pprados/mypy/"
"tree/PEP604>`_."
msgstr ""

#: ../../peps/peps/pep-0604.rst:239
msgid "References"
msgstr "Referências"

#: ../../peps/peps/pep-0604.rst:241
msgid "mypy http://mypy-lang.org/"
msgstr ""

#: ../../peps/peps/pep-0604.rst:243
msgid ""
"Scala Union Types https://dotty.epfl.ch/docs/reference/new-types/union-types."
"html"
msgstr ""

#: ../../peps/peps/pep-0604.rst:245
msgid "Pike http://pike.lysator.liu.se/docs/man/chapter_3.html#3.5"
msgstr ""

#: ../../peps/peps/pep-0604.rst:250
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/peps/pep-0604.rst:252
msgid ""
"This document is placed in the public domain or under the CC0-1.0-Universal "
"license, whichever is more permissive."
msgstr ""
