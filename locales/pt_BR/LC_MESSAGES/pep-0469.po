# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0469.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0469.rst:5
msgid "Alyssa Coghlan <ncoghlan@gmail.com>"
msgstr ""

#: ../../peps/pep-0469.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0469.rst:6
msgid "Withdrawn"
msgstr ""

#: ../../peps/pep-0469.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0469.rst:7
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0469.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0469.rst:9
msgid "18-Apr-2014"
msgstr ""

#: ../../peps/pep-0469.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-0469.rst:10
msgid "3.5"
msgstr ""

#: ../../peps/pep-0469.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0469.rst:11
msgid "18-Apr-2014, 21-Apr-2014"
msgstr ""

#: ../../peps/pep-0469.rst:15
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0469.rst:17
msgid ""
"For Python 3, :pep:`3106` changed the design of the ``dict`` builtin and "
"the mapping API in general to replace the separate list based and "
"iterator based APIs in Python 2 with a merged, memory efficient set and "
"multiset view based API. This new style of dict iteration was also added "
"to the Python 2.7 ``dict`` type as a new set of iteration methods."
msgstr ""

#: ../../peps/pep-0469.rst:23
msgid ""
"This means that there are now 3 different kinds of dict iteration that "
"may need to be migrated to Python 3 when an application makes the "
"transition:"
msgstr ""

#: ../../peps/pep-0469.rst:26
msgid "Lists as mutable snapshots: ``d.items()`` -> ``list(d.items())``"
msgstr ""

#: ../../peps/pep-0469.rst:27
msgid "Iterator objects: ``d.iteritems()`` -> ``iter(d.items())``"
msgstr ""

#: ../../peps/pep-0469.rst:28
msgid "Set based dynamic views: ``d.viewitems()`` -> ``d.items()``"
msgstr ""

#: ../../peps/pep-0469.rst:30
msgid ""
"There is currently no widely agreed best practice on how to reliably "
"convert all Python 2 dict iteration code to the common subset of Python 2"
" and 3, especially when test coverage of the ported code is limited. This"
" PEP reviews the various ways the Python 2 iteration APIs may be "
"accessed, and looks at the available options for migrating that code to "
"Python 3 by way of the common subset of Python 2.6+ and Python 3.0+."
msgstr ""

#: ../../peps/pep-0469.rst:37
msgid ""
"The PEP also considers the question of whether or not there are any "
"additions that may be worth making to Python 3.5 that may ease the "
"transition process for application code that doesn't need to worry about "
"supporting earlier versions when eventually making the leap to Python 3."
msgstr ""

#: ../../peps/pep-0469.rst:44
msgid "PEP Withdrawal"
msgstr ""

#: ../../peps/pep-0469.rst:46
msgid ""
"In writing the second draft of this PEP, I came to the conclusion that "
"the readability of hybrid Python 2/3 mapping code can actually be best "
"enhanced by better helper functions rather than by making changes to "
"Python 3.5+. The main value I now see in this PEP is as a clear record of"
" the recommended approaches to migrating mapping iteration code from "
"Python 2 to Python 3, as well as suggesting ways to keep things readable "
"and maintainable when writing hybrid code that supports both versions."
msgstr ""

#: ../../peps/pep-0469.rst:54
msgid ""
"Notably, I recommend that hybrid code avoid calling mapping iteration "
"methods directly, and instead rely on builtin functions where possible, "
"and some additional helper functions for cases that would be a simple "
"combination of a builtin and a mapping method in pure Python 3 code, but "
"need to be handled slightly differently to get the exact same semantics "
"in Python 2."
msgstr ""

#: ../../peps/pep-0469.rst:61
msgid ""
"Static code checkers like pylint could potentially be extended with an "
"optional warning regarding direct use of the mapping iteration methods in"
" a hybrid code base."
msgstr ""

#: ../../peps/pep-0469.rst:67
msgid "Mapping iteration models"
msgstr ""

#: ../../peps/pep-0469.rst:69
msgid ""
"Python 2.7 provides three different sets of methods to extract the keys, "
"values and items from a ``dict`` instance, accounting for 9 out of the 18"
" public methods of the ``dict`` type."
msgstr ""

#: ../../peps/pep-0469.rst:73
msgid ""
"In Python 3, this has been rationalised to just 3 out of 11 public "
"methods (as the ``has_key`` method has also been removed)."
msgstr ""

#: ../../peps/pep-0469.rst:78
msgid "Lists as mutable snapshots"
msgstr ""

#: ../../peps/pep-0469.rst:80
msgid ""
"This is the oldest of the three styles of dict iteration, and hence the "
"one implemented by the ``d.keys()``, ``d.values()`` and ``d.items()`` "
"methods in Python 2."
msgstr ""

#: ../../peps/pep-0469.rst:84
msgid ""
"These methods all return lists that are snapshots of the state of the "
"mapping at the time the method was called. This has a few consequences:"
msgstr ""

#: ../../peps/pep-0469.rst:87
msgid ""
"the original object can be mutated freely without affecting iteration "
"over the snapshot"
msgstr ""

#: ../../peps/pep-0469.rst:89
msgid "the snapshot can be modified independently of the original object"
msgstr ""

#: ../../peps/pep-0469.rst:90
msgid ""
"the snapshot consumes memory proportional to the size of the original "
"mapping"
msgstr ""

#: ../../peps/pep-0469.rst:93
msgid ""
"The semantic equivalent of these operations in Python 3 are "
"``list(d.keys())``, ``list(d.values())`` and ``list(d.iteritems())``."
msgstr ""

#: ../../peps/pep-0469.rst:98
msgid "Iterator objects"
msgstr ""

#: ../../peps/pep-0469.rst:100
msgid ""
"In Python 2.2, ``dict`` objects gained support for the then-new iterator "
"protocol, allowing direct iteration over the keys stored in the "
"dictionary, thus avoiding the need to build a list just to iterate over "
"the dictionary contents one entry at a time. ``iter(d)`` provides direct "
"access to the iterator object for the keys."
msgstr ""

#: ../../peps/pep-0469.rst:106
msgid ""
"Python 2 also provides a ``d.iterkeys()`` method that is essentially "
"synonymous with ``iter(d)``, along with ``d.itervalues()`` and "
"``d.iteritems()`` methods."
msgstr ""

#: ../../peps/pep-0469.rst:110
msgid ""
"These iterators provide live views of the underlying object, and hence "
"may fail if the set of keys in the underlying object is changed during "
"iteration::"
msgstr ""

#: ../../peps/pep-0469.rst:122
msgid ""
"As iterators, iteration over these objects is also a one-time operation: "
"once the iterator is exhausted, you have to go back to the original "
"mapping in order to iterate again."
msgstr ""

#: ../../peps/pep-0469.rst:126
msgid ""
"In Python 3, direct iteration over mappings works the same way as it does"
" in Python 2. There are no method based equivalents - the semantic "
"equivalents of ``d.itervalues()`` and ``d.iteritems()`` in Python 3 are "
"``iter(d.values())`` and ``iter(d.items())``."
msgstr ""

#: ../../peps/pep-0469.rst:131
msgid ""
"The ``six`` and ``future.utils`` compatibility modules also both provide "
"``iterkeys()``, ``itervalues()`` and ``iteritems()`` helper functions "
"that provide efficient iterator semantics in both Python 2 and 3."
msgstr ""

#: ../../peps/pep-0469.rst:137
msgid "Set based dynamic views"
msgstr ""

#: ../../peps/pep-0469.rst:139
msgid ""
"The model that is provided in Python 3 as a method based API is that of "
"set based dynamic views (technically multisets in the case of the "
"``values()`` view)."
msgstr ""

#: ../../peps/pep-0469.rst:143
msgid ""
"In Python 3, the objects returned by ``d.keys()``, ``d.values()`` and "
"``d. items()`` provide a live view of the current state of the underlying"
" object, rather than taking a full snapshot of the current state as they "
"did in Python 2. This change is safe in many circumstances, but does mean"
" that, as with the direct iteration API, it is necessary to avoid adding "
"or removing keys during iteration, in order to avoid encountering the "
"following error::"
msgstr ""

#: ../../peps/pep-0469.rst:159
msgid ""
"Unlike the iteration API, these objects are iterables, rather than "
"iterators: you can iterate over them multiple times, and each time they "
"will iterate over the entire underlying mapping."
msgstr ""

#: ../../peps/pep-0469.rst:163
msgid ""
"These semantics are also available in Python 2.7 as the ``d.viewkeys()``,"
" ``d.viewvalues()`` and ``d.viewitems()`` methods."
msgstr ""

#: ../../peps/pep-0469.rst:166
msgid ""
"The ``future.utils`` compatibility module also provides ``viewkeys()``, "
"``viewvalues()`` and ``viewitems()`` helper functions when running on "
"Python 2.7 or Python 3.x."
msgstr ""

#: ../../peps/pep-0469.rst:172
msgid "Migrating directly to Python 3"
msgstr ""

#: ../../peps/pep-0469.rst:174
msgid ""
"The ``2to3`` migration tool handles direct migrations to Python 3 in "
"accordance with the semantic equivalents described above:"
msgstr ""

#: ../../peps/pep-0469.rst:177
msgid "``d.keys()`` -> ``list(d.keys())``"
msgstr ""

#: ../../peps/pep-0469.rst:178 ../../peps/pep-0469.rst:282
msgid "``d.values()`` -> ``list(d.values())``"
msgstr ""

#: ../../peps/pep-0469.rst:179 ../../peps/pep-0469.rst:283
msgid "``d.items()`` -> ``list(d.items())``"
msgstr ""

#: ../../peps/pep-0469.rst:180
msgid "``d.iterkeys()`` -> ``iter(d.keys())``"
msgstr ""

#: ../../peps/pep-0469.rst:181 ../../peps/pep-0469.rst:285
msgid "``d.itervalues()`` -> ``iter(d.values())``"
msgstr ""

#: ../../peps/pep-0469.rst:182 ../../peps/pep-0469.rst:286
msgid "``d.iteritems()`` -> ``iter(d.items())``"
msgstr ""

#: ../../peps/pep-0469.rst:183
msgid "``d.viewkeys()`` -> ``d.keys()``"
msgstr ""

#: ../../peps/pep-0469.rst:184
msgid "``d.viewvalues()`` -> ``d.values()``"
msgstr ""

#: ../../peps/pep-0469.rst:185
msgid "``d.viewitems()`` -> ``d.items()``"
msgstr ""

#: ../../peps/pep-0469.rst:187
msgid ""
"Rather than 9 distinct mapping methods for iteration, there are now only "
"the 3 view methods, which combine in straightforward ways with the two "
"relevant builtin functions to cover all of the behaviours that are "
"available as ``dict`` methods in Python 2.7."
msgstr ""

#: ../../peps/pep-0469.rst:192
msgid ""
"Note that in many cases ``d.keys()`` can be replaced by just ``d``, but "
"the ``2to3`` migration tool doesn't attempt that replacement."
msgstr ""

#: ../../peps/pep-0469.rst:195
msgid ""
"The ``2to3`` migration tool also *does not* provide any automatic "
"assistance for migrating references to these objects as bound or unbound "
"methods - it only automates conversions where the API is called "
"immediately."
msgstr ""

#: ../../peps/pep-0469.rst:201
msgid "Migrating to the common subset of Python 2 and 3"
msgstr ""

#: ../../peps/pep-0469.rst:203
msgid ""
"When migrating to the common subset of Python 2 and 3, the above "
"transformations are not generally appropriate, as they all either result "
"in the creation of a redundant list in Python 2, have unexpectedly "
"different semantics in at least some cases, or both."
msgstr ""

#: ../../peps/pep-0469.rst:208
msgid ""
"Since most code running in the common subset of Python 2 and 3 supports "
"at least as far back as Python 2.6, the currently recommended approach to"
" conversion of mapping iteration operation depends on two helper "
"functions for efficient iteration over mapping values and mapping item "
"tuples:"
msgstr ""

#: ../../peps/pep-0469.rst:213 ../../peps/pep-0469.rst:271
#: ../../peps/pep-0469.rst:281 ../../peps/pep-0469.rst:337
msgid "``d.keys()`` -> ``list(d)``"
msgstr ""

#: ../../peps/pep-0469.rst:214
msgid "``d.values()`` -> ``list(itervalues(d))``"
msgstr ""

#: ../../peps/pep-0469.rst:215
msgid "``d.items()`` -> ``list(iteritems(d))``"
msgstr ""

#: ../../peps/pep-0469.rst:216 ../../peps/pep-0469.rst:274
#: ../../peps/pep-0469.rst:284
msgid "``d.iterkeys()`` -> ``iter(d)``"
msgstr ""

#: ../../peps/pep-0469.rst:217 ../../peps/pep-0469.rst:275
msgid "``d.itervalues()`` -> ``itervalues(d)``"
msgstr ""

#: ../../peps/pep-0469.rst:218 ../../peps/pep-0469.rst:276
msgid "``d.iteritems()`` -> ``iteritems(d)``"
msgstr ""

#: ../../peps/pep-0469.rst:220
msgid ""
"Both ``six`` and ``future.utils`` provide appropriate definitions of "
"``itervalues()`` and ``iteritems()`` (along with essentially redundant "
"definitions of ``iterkeys()``). Creating your own definitions of these "
"functions in a custom compatibility module is also relatively "
"straightforward::"
msgstr ""

#: ../../peps/pep-0469.rst:241
msgid ""
"The greatest loss of readability currently arises when converting code "
"that actually *needs* the list based snapshots that were the default in "
"Python 2. This readability loss could likely be mitigated by also "
"providing ``listvalues`` and ``listitems`` helper functions, allowing the"
" affected conversions to be simplified to:"
msgstr ""

#: ../../peps/pep-0469.rst:247 ../../peps/pep-0469.rst:272
msgid "``d.values()`` -> ``listvalues(d)``"
msgstr ""

#: ../../peps/pep-0469.rst:248 ../../peps/pep-0469.rst:273
msgid "``d.items()`` -> ``listitems(d)``"
msgstr ""

#: ../../peps/pep-0469.rst:250
msgid ""
"The corresponding compatibility function definitions are as "
"straightforward as their iterator counterparts::"
msgstr ""

#: ../../peps/pep-0469.rst:268
msgid ""
"With that expanded set of compatibility functions, Python 2 code would "
"then be converted to \"idiomatic\" hybrid 2/3 code as:"
msgstr ""

#: ../../peps/pep-0469.rst:278
msgid ""
"This compares well for readability with the idiomatic pure Python 3 code "
"that uses the mapping methods and builtins directly:"
msgstr ""

#: ../../peps/pep-0469.rst:288
msgid ""
"It's also notable that when using this approach, hybrid code would "
"*never* invoke the mapping methods directly: it would always invoke "
"either a builtin or helper function instead, in order to ensure the exact"
" same semantics on both Python 2 and 3."
msgstr ""

#: ../../peps/pep-0469.rst:295
msgid "Migrating from Python 3 to the common subset with Python 2.7"
msgstr ""

#: ../../peps/pep-0469.rst:297
msgid ""
"While the majority of migrations are currently from Python 2 either "
"directly to Python 3 or to the common subset of Python 2 and Python 3, "
"there are also some migrations of newer projects that start in Python 3 "
"and then later add Python 2 support, either due to user demand, or to "
"gain access to Python 2 libraries that are not yet available in Python 3 "
"(and porting them to Python 3 or creating a Python 3 compatible "
"replacement is not a trivial exercise)."
msgstr ""

#: ../../peps/pep-0469.rst:305
msgid ""
"In these cases, Python 2.7 compatibility is often sufficient, and the "
"2.7+ only view based helper functions provided by ``future.utils`` allow "
"the bare accesses to the Python 3 mapping view methods to be replaced "
"with code that is compatible with both Python 2.7 and Python 3 (note, "
"this is the only migration chart in the PEP that has Python 3 code on the"
" left of the conversion):"
msgstr ""

#: ../../peps/pep-0469.rst:312
msgid "``d.keys()`` -> ``viewkeys(d)``"
msgstr ""

#: ../../peps/pep-0469.rst:313
msgid "``d.values()`` -> ``viewvalues(d)``"
msgstr ""

#: ../../peps/pep-0469.rst:314
msgid "``d.items()`` -> ``viewitems(d)``"
msgstr ""

#: ../../peps/pep-0469.rst:315
msgid "``list(d.keys())`` -> ``list(d)``"
msgstr ""

#: ../../peps/pep-0469.rst:316
msgid "``list(d.values())`` -> ``listvalues(d)``"
msgstr ""

#: ../../peps/pep-0469.rst:317
msgid "``list(d.items())`` -> ``listitems(d)``"
msgstr ""

#: ../../peps/pep-0469.rst:318
msgid "``iter(d.keys())`` -> ``iter(d)``"
msgstr ""

#: ../../peps/pep-0469.rst:319
msgid "``iter(d.values())`` -> ``itervalues(d)``"
msgstr ""

#: ../../peps/pep-0469.rst:320
msgid "``iter(d.items())`` -> ``iteritems(d)``"
msgstr ""

#: ../../peps/pep-0469.rst:322
msgid ""
"As with migrations from Python 2 to the common subset, note that the "
"hybrid code ends up never invoking the mapping methods directly - it only"
" calls builtins and helper methods, with the latter addressing the "
"semantic differences between Python 2 and Python 3."
msgstr ""

#: ../../peps/pep-0469.rst:329
msgid "Possible changes to Python 3.5+"
msgstr ""

#: ../../peps/pep-0469.rst:331
msgid ""
"The main proposal put forward to potentially aid migration of existing "
"Python 2 code to Python 3 is the restoration of some or all of the "
"alternate iteration APIs to the Python 3 mapping API. In particular, the "
"initial draft of this PEP proposed making the following conversions "
"possible when migrating to the common subset of Python 2 and Python 3.5+:"
msgstr ""

#: ../../peps/pep-0469.rst:338
msgid "``d.values()`` -> ``list(d.itervalues())``"
msgstr ""

#: ../../peps/pep-0469.rst:339
msgid "``d.items()`` -> ``list(d.iteritems())``"
msgstr ""

#: ../../peps/pep-0469.rst:340
msgid "``d.iterkeys()`` -> ``d.iterkeys()``"
msgstr ""

#: ../../peps/pep-0469.rst:341
msgid "``d.itervalues()`` -> ``d.itervalues()``"
msgstr ""

#: ../../peps/pep-0469.rst:342
msgid "``d.iteritems()`` -> ``d.iteritems()``"
msgstr ""

#: ../../peps/pep-0469.rst:344
msgid ""
"Possible mitigations of the additional language complexity in Python 3 "
"created by restoring these methods included immediately deprecating them,"
" as well as potentially hiding them from the ``dir()`` function (or "
"perhaps even defining a way to make ``pydoc`` aware of function "
"deprecations)."
msgstr ""

#: ../../peps/pep-0469.rst:349
msgid ""
"However, in the case where the list output is actually desired, the end "
"result of that proposal is actually less readable than an appropriately "
"defined helper function, and the function and method forms of the "
"iterator versions are pretty much equivalent from a readability "
"perspective."
msgstr ""

#: ../../peps/pep-0469.rst:354
msgid ""
"So unless I've missed something critical, readily available "
"``listvalues()`` and ``listitems()`` helper functions look like they will"
" improve the readability of hybrid code more than anything we could add "
"back to the Python 3.5+ mapping API, and won't have any long-term impact "
"on the complexity of Python 3 itself."
msgstr ""

#: ../../peps/pep-0469.rst:362
msgid "Discussion"
msgstr ""

#: ../../peps/pep-0469.rst:364
msgid ""
"The fact that 5 years in to the Python 3 migration we still have users "
"considering the dict API changes a significant barrier to migration "
"suggests that there are problems with previously recommended approaches. "
"This PEP attempts to explore those issues and tries to isolate those "
"cases where previous advice (such as it was) could prove problematic."
msgstr ""

#: ../../peps/pep-0469.rst:370
msgid ""
"My assessment (largely based on feedback from Twisted devs) is that "
"problems are most likely to arise when attempting to use ``d.keys()``, "
"``d.values()``, and ``d.items()`` in hybrid code. While superficially it "
"seems as though there should be cases where it is safe to ignore the "
"semantic differences, in practice, the change from \"mutable snapshot\" "
"to \"dynamic view\" is significant enough that it is likely better to "
"just force the use of either list or iterator semantics for hybrid code, "
"and leave the use of the view semantics to pure Python 3 code."
msgstr ""

#: ../../peps/pep-0469.rst:379
msgid ""
"This approach also creates rules that are simple enough and safe enough "
"that it should be possible to automate them in code modernisation scripts"
" that target the common subset of Python 2 and Python 3, just as ``2to3``"
" converts them automatically when targeting pure Python 3 code."
msgstr ""

#: ../../peps/pep-0469.rst:386
msgid "Acknowledgements"
msgstr ""

#: ../../peps/pep-0469.rst:388
msgid ""
"Thanks to the folks at the Twisted sprint table at PyCon for a very "
"vigorous discussion of this idea (and several other topics), and "
"especially to Hynek Schlawack for acting as a moderator when things got a"
" little too heated :)"
msgstr ""

#: ../../peps/pep-0469.rst:393
msgid ""
"Thanks also to JP Calderone and Itamar Turner-Trauring for their email "
"feedback, as well to the participants in the `python-dev review "
"<https://mail.python.org/pipermail/python-dev/2014-April/134168.html>`__ "
"of the initial version of the PEP."
msgstr ""

#: ../../peps/pep-0469.rst:400
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0469.rst:402
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid "Nick Coghlan <ncoghlan@gmail.com>"
#~ msgstr ""

