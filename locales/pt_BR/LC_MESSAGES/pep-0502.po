# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0502.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0502.rst:3
msgid "Mike G. Miller"
msgstr ""

#: ../../peps/pep-0502.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0502.rst:4
msgid "Rejected"
msgstr ""

#: ../../peps/pep-0502.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0502.rst:5
msgid "Informational"
msgstr ""

#: ../../peps/pep-0502.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0502.rst:7
msgid "10-Aug-2015"
msgstr ""

#: ../../peps/pep-0502.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-0502.rst:8
msgid "3.6"
msgstr ""

#: ../../peps/pep-0502.rst:12
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0502.rst:14
msgid ""
":pep:`498`: *Literal String Interpolation*, which proposed \"formatted "
"strings\" was accepted September 9th, 2015. Additional background and "
"rationale given during its design phase is detailed below."
msgstr ""

#: ../../peps/pep-0502.rst:19
msgid ""
"To recap that PEP, a string prefix was introduced that marks the string "
"as a template to be rendered. These formatted strings may contain one or "
"more expressions built on `the existing syntax`_ of ``str.format()``. "
"[10]_ [11]_ The formatted string expands at compile-time into a "
"conventional string format operation, with the given expressions from its"
" text extracted and passed instead as positional arguments."
msgstr ""

#: ../../peps/pep-0502.rst:29
msgid ""
"At runtime, the resulting expressions are evaluated to render a string to"
" given specifications::"
msgstr ""

#: ../../peps/pep-0502.rst:37
msgid ""
"Format-strings may be thought of as merely syntactic sugar to simplify "
"traditional calls to ``str.format()``."
msgstr ""

#: ../../peps/pep-0502.rst:44
msgid "PEP Status"
msgstr ""

#: ../../peps/pep-0502.rst:46
msgid ""
"This PEP was rejected based on its using an opinion-based tone rather "
"than a factual one. This PEP was also deemed not critical as :pep:`498` "
"was already written and should be the place to house design decision "
"details."
msgstr ""

#: ../../peps/pep-0502.rst:52
msgid "Motivation"
msgstr ""

#: ../../peps/pep-0502.rst:54
msgid ""
"Though string formatting and manipulation features are plentiful in "
"Python, one area where it falls short is the lack of a convenient string "
"interpolation syntax. In comparison to other dynamic scripting languages "
"with similar use cases, the amount of code necessary to build similar "
"strings is substantially higher, while at times offering lower "
"readability due to verbosity, dense syntax, or identifier duplication."
msgstr ""

#: ../../peps/pep-0502.rst:63
msgid ""
"These difficulties are described at moderate length in the original `post"
" to python-ideas`_ that started the snowball (that became :pep:`498`) "
"rolling. [1]_"
msgstr ""

#: ../../peps/pep-0502.rst:67
msgid ""
"Furthermore, replacement of the print statement with the more consistent "
"print function of Python 3 (:pep:`3105`) has added one additional minor "
"burden, an additional set of parentheses to type and read. Combined with "
"the verbosity of current string formatting solutions, this puts an "
"otherwise simple language at an unfortunate disadvantage to its peers::"
msgstr ""

#: ../../peps/pep-0502.rst:87
msgid ""
"In Python, the formatting and printing of a string with multiple "
"variables in a single line of code of standard width is noticeably harder"
" and more verbose, with indentation exacerbating the issue."
msgstr ""

#: ../../peps/pep-0502.rst:91
msgid ""
"For use cases such as smaller projects, systems programming, shell script"
" replacements, and even one-liners, where message formatting complexity "
"has yet to be encapsulated, this verbosity has likely lead a significant "
"number of developers and administrators to choose other languages over "
"the years."
msgstr ""

#: ../../peps/pep-0502.rst:101
msgid "Rationale"
msgstr ""

#: ../../peps/pep-0502.rst:105
msgid "Goals"
msgstr ""

#: ../../peps/pep-0502.rst:107
msgid "The design goals of format strings are as follows:"
msgstr ""

#: ../../peps/pep-0502.rst:109
msgid "Eliminate need to pass variables manually."
msgstr ""

#: ../../peps/pep-0502.rst:110
msgid "Eliminate repetition of identifiers and redundant parentheses."
msgstr ""

#: ../../peps/pep-0502.rst:111
msgid "Reduce awkward syntax, punctuation characters, and visual noise."
msgstr ""

#: ../../peps/pep-0502.rst:112
msgid ""
"Improve readability and eliminate mismatch errors, by preferring named "
"parameters to positional arguments."
msgstr ""

#: ../../peps/pep-0502.rst:114
msgid ""
"Avoid need for ``locals()`` and ``globals()`` usage, instead parsing the "
"given string for named parameters, then passing them automatically. [2]_ "
"[3]_"
msgstr ""

#: ../../peps/pep-0502.rst:120
msgid "Limitations"
msgstr ""

#: ../../peps/pep-0502.rst:122
msgid ""
"In contrast to other languages that take design cues from Unix and its "
"shells, and in common with Javascript, Python specified both single "
"(``'``) and double (``\"``) ASCII quote characters to enclose strings. It"
" is not reasonable to choose one of them now to enable interpolation, "
"while leaving the other for uninterpolated strings. Other characters, "
"such as the \"Backtick\" (or grave accent `````) are also `constrained by"
" history`_ as a shortcut for ``repr()``."
msgstr ""

#: ../../peps/pep-0502.rst:134
msgid "This leaves a few remaining options for the design of such a feature:"
msgstr ""

#: ../../peps/pep-0502.rst:136
msgid "An operator, as in printf-style string formatting via ``%``."
msgstr ""

#: ../../peps/pep-0502.rst:137
msgid "A class, such as ``string.Template()``."
msgstr ""

#: ../../peps/pep-0502.rst:138
msgid "A method or function, such as ``str.format()``."
msgstr ""

#: ../../peps/pep-0502.rst:139
msgid "New syntax, or"
msgstr ""

#: ../../peps/pep-0502.rst:140
msgid "A new string prefix marker, such as the well-known ``r''`` or ``u''``."
msgstr ""

#: ../../peps/pep-0502.rst:142
msgid ""
"The first three options above are mature. Each has specific use cases and"
" drawbacks, yet also suffer from the verbosity and visual noise mentioned"
" previously. All options are discussed in the next sections."
msgstr ""

#: ../../peps/pep-0502.rst:151
msgid "Background"
msgstr ""

#: ../../peps/pep-0502.rst:153
msgid ""
"Formatted strings build on several existing techniques and proposals and "
"what we've collectively learned from them. In keeping with the design "
"goals of readability and error-prevention, the following examples "
"therefore use named, not positional arguments."
msgstr ""

#: ../../peps/pep-0502.rst:159
msgid ""
"Let's assume we have the following dictionary, and would like to print "
"out its items as an informative string for end users::"
msgstr ""

#: ../../peps/pep-0502.rst:166
msgid "Printf-style formatting, via operator"
msgstr ""

#: ../../peps/pep-0502.rst:168
msgid ""
"This `venerable technique`_ continues to have its uses, such as with "
"byte-based protocols, simplicity in simple cases, and familiarity to many"
" programmers::"
msgstr ""

#: ../../peps/pep-0502.rst:176
msgid ""
"In this form, considering the prerequisite dictionary creation, the "
"technique is verbose, a tad noisy, yet relatively readable. Additional "
"issues are that an operator can only take one argument besides the "
"original string, meaning multiple parameters must be passed in a tuple or"
" dictionary. Also, it is relatively easy to make an error in the number "
"of arguments passed, the expected type, have a missing key, or forget the"
" trailing type, e.g. (``s`` or ``d``)."
msgstr ""

#: ../../peps/pep-0502.rst:191
msgid "string.Template Class"
msgstr ""

#: ../../peps/pep-0502.rst:193
msgid ""
"The ``string.Template`` `class from`_ :pep:`292` (Simpler String "
"Substitutions) is a purposely simplified design, using familiar shell "
"interpolation syntax, with `safe-substitution feature`_, that finds its "
"main use cases in shell and internationalization tools::"
msgstr ""

#: ../../peps/pep-0502.rst:202
msgid ""
"While also verbose, the string itself is readable. Though functionality "
"is limited, it meets its requirements well. It isn't powerful enough for "
"many cases, and that helps keep inexperienced users out of trouble, as "
"well as avoiding issues with moderately-trusted input (i18n) from third-"
"parties. It unfortunately takes enough code to discourage its use for ad-"
"hoc string interpolation, unless encapsulated in a `convenience library`_"
" such as ``flufl.i18n``."
msgstr ""

#: ../../peps/pep-0502.rst:219
msgid "PEP 215 - String Interpolation"
msgstr ""

#: ../../peps/pep-0502.rst:221
msgid ""
":pep:`215` was a former proposal of which this one shares a lot in "
"common. Apparently, the world was not ready for it at the time, but "
"considering recent support in a number of other languages, its day may "
"have come."
msgstr ""

#: ../../peps/pep-0502.rst:226
msgid ""
"The large number of dollar sign (``$``) characters it included may have "
"led it to resemble Python's arch-nemesis Perl, and likely contributed to "
"the PEP's lack of acceptance. It was superseded by the following "
"proposal."
msgstr ""

#: ../../peps/pep-0502.rst:233
msgid "str.format() Method"
msgstr ""

#: ../../peps/pep-0502.rst:235
msgid ""
"The ``str.format()`` `syntax of`_ :pep:`3101` is the most recent and "
"modern of the existing options. It is also more powerful and usually "
"easier to read than the others. It avoids many of the drawbacks and "
"limits of the previous techniques."
msgstr ""

#: ../../peps/pep-0502.rst:240
msgid ""
"However, due to its necessary function call and parameter passing, it "
"runs from verbose to very verbose in various situations with string "
"literals::"
msgstr ""

#: ../../peps/pep-0502.rst:253
msgid "The verbosity of the method-based approach is illustrated here."
msgstr ""

#: ../../peps/pep-0502.rst:259
msgid "PEP 498 -- Literal String Formatting"
msgstr ""

#: ../../peps/pep-0502.rst:261
msgid ""
":pep:`498` defines and discusses format strings, as also described in the"
" `Abstract`_ above."
msgstr ""

#: ../../peps/pep-0502.rst:264
msgid ""
"It also, somewhat controversially to those first exposed, introduces the "
"idea that format-strings shall be augmented with support for arbitrary "
"expressions. This is discussed further in the Restricting Syntax section "
"under `Rejected Ideas`_."
msgstr ""

#: ../../peps/pep-0502.rst:272
msgid "PEP 501 -- Translation ready string interpolation"
msgstr ""

#: ../../peps/pep-0502.rst:274
msgid ""
"The complimentary :pep:`501` brings internationalization into the "
"discussion as a first-class concern, with its proposal of the i-prefix, "
"``string.Template`` syntax integration compatible with ES6 (Javascript), "
"deferred rendering, and an object return value."
msgstr ""

#: ../../peps/pep-0502.rst:282
msgid "Implementations in Other Languages"
msgstr ""

#: ../../peps/pep-0502.rst:284
msgid ""
"String interpolation is now well supported by various programming "
"languages used in multiple industries, and is converging into a standard "
"of sorts. It is centered around ``str.format()`` style syntax in minor "
"variations, with the addition of arbitrary expressions to expand utility."
msgstr ""

#: ../../peps/pep-0502.rst:290
msgid ""
"In the `Motivation`_ section it was shown how convenient interpolation "
"syntax existed in Bash, Perl, and Ruby. Let's take a look at their "
"expression support."
msgstr ""

#: ../../peps/pep-0502.rst:296
msgid "Bash"
msgstr ""

#: ../../peps/pep-0502.rst:298
msgid ""
"Bash supports a number of arbitrary, even recursive constructs inside "
"strings::"
msgstr ""

#: ../../peps/pep-0502.rst:303 ../../peps/pep-0502.rst:320
#: ../../peps/pep-0502.rst:331
msgid "Explicit interpolation within double quotes."
msgstr ""

#: ../../peps/pep-0502.rst:304
msgid "Direct environment variable access supported."
msgstr ""

#: ../../peps/pep-0502.rst:305
msgid "Arbitrary expressions are supported. [4]_"
msgstr ""

#: ../../peps/pep-0502.rst:306
msgid "External process execution and output capture supported. [5]_"
msgstr ""

#: ../../peps/pep-0502.rst:307
msgid "Recursive expressions are supported."
msgstr ""

#: ../../peps/pep-0502.rst:311
msgid "Perl"
msgstr ""

#: ../../peps/pep-0502.rst:314
msgid "Perl also has arbitrary expression constructs, perhaps not as well known::"
msgstr ""

#: ../../peps/pep-0502.rst:321
msgid "Arbitrary expressions are supported. [6]_ [7]_"
msgstr ""

#: ../../peps/pep-0502.rst:325
msgid "Ruby"
msgstr ""

#: ../../peps/pep-0502.rst:327
msgid "Ruby allows arbitrary expressions in its interpolated strings::"
msgstr ""

#: ../../peps/pep-0502.rst:332
msgid "Arbitrary expressions are supported. [8]_ [9]_"
msgstr ""

#: ../../peps/pep-0502.rst:333
msgid "Possible to change delimiter chars with ``%``."
msgstr ""

#: ../../peps/pep-0502.rst:334
msgid ""
"See the Reference Implementation(s) section for an implementation in "
"Python."
msgstr ""

#: ../../peps/pep-0502.rst:338
msgid "Others"
msgstr ""

#: ../../peps/pep-0502.rst:340
msgid ""
"Let's look at some less-similar modern languages recently implementing "
"string interpolation."
msgstr ""

#: ../../peps/pep-0502.rst:345
msgid "Scala"
msgstr ""

#: ../../peps/pep-0502.rst:347
msgid ""
"`Scala interpolation`_ is directed through string prefixes. Each prefix "
"has a different result::"
msgstr ""

#: ../../peps/pep-0502.rst:354
msgid ""
"These prefixes may also be implemented by the user, by extending Scala's "
"``StringContext`` class."
msgstr ""

#: ../../peps/pep-0502.rst:357
msgid "Explicit interpolation within double quotes with literal prefix."
msgstr ""

#: ../../peps/pep-0502.rst:358 ../../peps/pep-0502.rst:385
msgid "User implemented prefixes supported."
msgstr ""

#: ../../peps/pep-0502.rst:359 ../../peps/pep-0502.rst:386
#: ../../peps/pep-0502.rst:403 ../../peps/pep-0502.rst:418
msgid "Arbitrary expressions are supported."
msgstr ""

#: ../../peps/pep-0502.rst:365
msgid "ES6 (Javascript)"
msgstr ""

#: ../../peps/pep-0502.rst:367
msgid ""
"Designers of `Template strings`_ faced the same issue as Python where "
"single and double quotes were taken. Unlike Python however, \"backticks\""
" were not. Despite `their issues`_, they were chosen as part of the "
"ECMAScript 2015 (ES6) standard::"
msgstr ""

#: ../../peps/pep-0502.rst:375
msgid ""
"Custom prefixes are also supported by implementing a function the same "
"name as the tag::"
msgstr ""

#: ../../peps/pep-0502.rst:384
msgid "Explicit interpolation within backticks."
msgstr ""

#: ../../peps/pep-0502.rst:393
msgid "C#, Version 6"
msgstr ""

#: ../../peps/pep-0502.rst:395
msgid ""
"C# has a useful new `interpolation feature`_ as well, with some ability "
"to `customize interpolation`_ via the ``IFormattable`` interface::"
msgstr ""

#: ../../peps/pep-0502.rst:401
msgid "Explicit interpolation with double quotes and ``$`` prefix."
msgstr ""

#: ../../peps/pep-0502.rst:402
msgid "Custom interpolations are available."
msgstr ""

#: ../../peps/pep-0502.rst:409
msgid "Apple's Swift"
msgstr ""

#: ../../peps/pep-0502.rst:411
msgid "Arbitrary `interpolation under Swift`_ is available on all strings::"
msgstr ""

#: ../../peps/pep-0502.rst:417
msgid "Implicit interpolation with double quotes."
msgstr ""

#: ../../peps/pep-0502.rst:419
msgid "Cannot contain CR/LF."
msgstr ""

#: ../../peps/pep-0502.rst:425
msgid "Additional examples"
msgstr ""

#: ../../peps/pep-0502.rst:427
msgid ""
"A number of additional examples of string interpolation may be `found at "
"Wikipedia`_."
msgstr ""

#: ../../peps/pep-0502.rst:430
msgid ""
"Now that background and history have been covered, let's continue on for "
"a solution."
msgstr ""

#: ../../peps/pep-0502.rst:437
msgid "New Syntax"
msgstr ""

#: ../../peps/pep-0502.rst:439
msgid ""
"This should be an option of last resort, as every new syntax feature has "
"a cost in terms of real-estate in a brain it inhabits. There is however "
"one alternative left on our list of possibilities, which follows."
msgstr ""

#: ../../peps/pep-0502.rst:447
msgid "New String Prefix"
msgstr ""

#: ../../peps/pep-0502.rst:449
msgid ""
"Given the history of string formatting in Python and backwards-"
"compatibility, implementations in other languages, avoidance of new "
"syntax unless necessary, an acceptable design is reached through "
"elimination rather than unique insight. Therefore, marking interpolated "
"string literals with a string prefix is chosen."
msgstr ""

#: ../../peps/pep-0502.rst:456
msgid ""
"We also choose an expression syntax that reuses and builds on the "
"strongest of the existing choices, ``str.format()`` to avoid further "
"duplication of functionality::"
msgstr ""

#: ../../peps/pep-0502.rst:464
msgid ""
":pep:`498` -- Literal String Formatting, delves into the mechanics and "
"implementation of this design."
msgstr ""

#: ../../peps/pep-0502.rst:469
msgid "Additional Topics"
msgstr ""

#: ../../peps/pep-0502.rst:473
msgid "Safety"
msgstr ""

#: ../../peps/pep-0502.rst:475
msgid ""
"In this section we will describe the safety situation and precautions "
"taken in support of format-strings."
msgstr ""

#: ../../peps/pep-0502.rst:478
msgid ""
"Only string literals have been considered for format-strings, not "
"variables to be taken as input or passed around, making external attacks "
"difficult to accomplish."
msgstr ""

#: ../../peps/pep-0502.rst:482
msgid "``str.format()`` and alternatives `already handle`_ this use-case."
msgstr ""

#: ../../peps/pep-0502.rst:484
msgid ""
"Neither ``locals()`` nor ``globals()`` are necessary nor used during the "
"transformation, avoiding leakage of information."
msgstr ""

#: ../../peps/pep-0502.rst:488
msgid ""
"To eliminate complexity as well as ``RuntimeError`` (s) due to recursion "
"depth, recursive interpolation is not supported."
msgstr ""

#: ../../peps/pep-0502.rst:491
msgid ""
"However, mistakes or malicious code could be missed inside string "
"literals. Though that can be said of code in general, that these "
"expressions are inside strings means they are a bit more likely to be "
"obscured."
msgstr ""

#: ../../peps/pep-0502.rst:501
msgid "Mitigation via Tools"
msgstr ""

#: ../../peps/pep-0502.rst:503
msgid ""
"The idea is that tools or linters such as pyflakes, pylint, or Pycharm, "
"may check inside strings with expressions and mark them up appropriately."
" As this is a common task with programming languages today, multi-"
"language tools won't have to implement this feature solely for Python, "
"significantly shortening time to implementation."
msgstr ""

#: ../../peps/pep-0502.rst:509
msgid ""
"Farther in the future, strings might also be checked for constructs that "
"exceed the safety policy of a project."
msgstr ""

#: ../../peps/pep-0502.rst:515
msgid "Style Guide/Precautions"
msgstr ""

#: ../../peps/pep-0502.rst:517
msgid ""
"As arbitrary expressions may accomplish anything a Python expression is "
"able to, it is highly recommended to avoid constructs inside format-"
"strings that could cause side effects."
msgstr ""

#: ../../peps/pep-0502.rst:522
msgid ""
"Further guidelines may be written once usage patterns and true problems "
"are known."
msgstr ""

#: ../../peps/pep-0502.rst:527
msgid "Reference Implementation(s)"
msgstr ""

#: ../../peps/pep-0502.rst:529
msgid ""
"The `say module on PyPI`_ implements string interpolation as described "
"here with the small burden of a callable interface::"
msgstr ""

#: ../../peps/pep-0502.rst:538
msgid ""
"A Python implementation of Ruby interpolation `is also available`_. It "
"uses the codecs module to do its work::"
msgstr ""

#: ../../peps/pep-0502.rst:552
msgid "Backwards Compatibility"
msgstr ""

#: ../../peps/pep-0502.rst:554
msgid ""
"By using existing syntax and avoiding current or historical features, "
"format strings were designed so as to not interfere with existing code "
"and are not expected to cause any issues."
msgstr ""

#: ../../peps/pep-0502.rst:560
msgid "Postponed Ideas"
msgstr ""

#: ../../peps/pep-0502.rst:563
msgid "Internationalization"
msgstr ""

#: ../../peps/pep-0502.rst:565
msgid ""
"Though it was highly desired to integrate internationalization support, "
"(see :pep:`501`), the finer details diverge at almost every point, making"
" a common solution unlikely: [15]_"
msgstr ""

#: ../../peps/pep-0502.rst:570
msgid "Use-cases differ"
msgstr ""

#: ../../peps/pep-0502.rst:571
msgid "Compile vs. run-time tasks"
msgstr ""

#: ../../peps/pep-0502.rst:572
msgid "Interpolation syntax needs"
msgstr ""

#: ../../peps/pep-0502.rst:573
msgid "Intended audience"
msgstr ""

#: ../../peps/pep-0502.rst:574
msgid "Security policy"
msgstr ""

#: ../../peps/pep-0502.rst:578
msgid "Rejected Ideas"
msgstr ""

#: ../../peps/pep-0502.rst:581
msgid "Restricting Syntax to ``str.format()`` Only"
msgstr ""

#: ../../peps/pep-0502.rst:583
msgid "The common `arguments against`_ support of arbitrary expressions were:"
msgstr ""

#: ../../peps/pep-0502.rst:585
msgid "`YAGNI`_, \"You aren't gonna need it.\""
msgstr ""

#: ../../peps/pep-0502.rst:586
msgid "The feature is not congruent with historical Python conservatism."
msgstr ""

#: ../../peps/pep-0502.rst:587
msgid "Postpone - can implement in a future version if need is demonstrated."
msgstr ""

#: ../../peps/pep-0502.rst:592
msgid ""
"Support of only ``str.format()`` syntax however, was deemed not enough of"
" a solution to the problem. Often a simple length or increment of  an "
"object, for example, is desired before printing."
msgstr ""

#: ../../peps/pep-0502.rst:597
msgid ""
"It can be seen in the `Implementations in Other Languages`_ section that "
"the developer community at large tends to agree. String interpolation "
"with arbitrary expressions is becoming an industry standard in modern "
"languages due to its utility."
msgstr ""

#: ../../peps/pep-0502.rst:604
msgid "Additional/Custom String-Prefixes"
msgstr ""

#: ../../peps/pep-0502.rst:606
msgid ""
"As seen in the `Implementations in Other Languages`_ section, many modern"
" languages have extensible string prefixes with a common interface. This "
"could be a way to generalize and reduce lines of code in common "
"situations. Examples are found in ES6 (Javascript), Scala, Nim, and C# "
"(to a lesser extent). This was rejected by the BDFL. [14]_"
msgstr ""

#: ../../peps/pep-0502.rst:616
msgid "Automated Escaping of Input Variables"
msgstr ""

#: ../../peps/pep-0502.rst:618
msgid ""
"While helpful in some cases, this was thought to create too much "
"uncertainty of when and where string expressions could be used safely or "
"not. The concept was also difficult to describe to others. [12]_"
msgstr ""

#: ../../peps/pep-0502.rst:623
msgid ""
"Always consider format string variables to be unescaped, unless the "
"developer has explicitly escaped them."
msgstr ""

#: ../../peps/pep-0502.rst:628
msgid "Environment Access and Command Substitution"
msgstr ""

#: ../../peps/pep-0502.rst:630
msgid ""
"For systems programming and shell-script replacements, it would be useful"
" to handle environment variables and capture output of commands directly "
"in an expression string. This was rejected as not important enough, and "
"looking too much like bash/perl, which could encourage bad habits. [13]_"
msgstr ""

#: ../../peps/pep-0502.rst:639
msgid "Acknowledgements"
msgstr ""

#: ../../peps/pep-0502.rst:641
msgid "Eric V. Smith for the authoring and implementation of :pep:`498`."
msgstr ""

#: ../../peps/pep-0502.rst:642
msgid ""
"Everyone on the python-ideas mailing list for rejecting the various crazy"
" ideas that came up, helping to keep the final design in focus."
msgstr ""

#: ../../peps/pep-0502.rst:648
msgid "References"
msgstr "Referências"

#: ../../peps/pep-0502.rst:650
msgid ""
"Briefer String Format (https://mail.python.org/pipermail/python-"
"ideas/2015-July/034659.html)"
msgstr ""

#: ../../peps/pep-0502.rst:653
msgid ""
"Briefer String Format (https://mail.python.org/pipermail/python-"
"ideas/2015-July/034669.html)"
msgstr ""

#: ../../peps/pep-0502.rst:656
msgid ""
"Briefer String Format (https://mail.python.org/pipermail/python-"
"ideas/2015-July/034701.html)"
msgstr ""

#: ../../peps/pep-0502.rst:659
msgid "Bash Docs (https://tldp.org/LDP/abs/html/arithexp.html)"
msgstr ""

#: ../../peps/pep-0502.rst:662
msgid "Bash Docs (https://tldp.org/LDP/abs/html/commandsub.html)"
msgstr ""

#: ../../peps/pep-0502.rst:665
msgid "Perl Cookbook (https://docstore.mik.ua/orelly/perl/cookbook/ch01_11.htm)"
msgstr ""

#: ../../peps/pep-0502.rst:668
msgid ""
"Perl Docs "
"(https://web.archive.org/web/20121025185907/https://perl6maven.com/perl6"
"-scalar-array-and-hash-interpolation)"
msgstr ""

#: ../../peps/pep-0502.rst:671
msgid ""
"Ruby Docs (http://ruby-doc.org/core-2.1.1/doc/syntax/literals_rdoc.html"
"#label-Strings)"
msgstr ""

#: ../../peps/pep-0502.rst:674
msgid ""
"Ruby Docs "
"(https://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Literals#Interpolation)"
msgstr ""

#: ../../peps/pep-0502.rst:677
msgid ""
"Python Str.Format Syntax (https://docs.python.org/3.6/library/string.html"
"#format-string-syntax)"
msgstr ""

#: ../../peps/pep-0502.rst:680
msgid ""
"Python Format-Spec Mini Language "
"(https://docs.python.org/3.6/library/string.html#format-specification-"
"mini-language)"
msgstr ""

#: ../../peps/pep-0502.rst:683
msgid ""
"Escaping of Input Variables (https://mail.python.org/pipermail/python-"
"ideas/2015-August/035532.html)"
msgstr ""

#: ../../peps/pep-0502.rst:686
msgid ""
"Environment Access and Command Substitution "
"(https://mail.python.org/pipermail/python-ideas/2015-August/035554.html)"
msgstr ""

#: ../../peps/pep-0502.rst:689
msgid ""
"Extensible String Prefixes (https://mail.python.org/pipermail/python-"
"ideas/2015-August/035336.html)"
msgstr ""

#: ../../peps/pep-0502.rst:692
msgid ""
"Literal String Formatting (https://mail.python.org/pipermail/python-"
"dev/2015-August/141289.html)"
msgstr ""

#: ../../peps/pep-0502.rst:697
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0502.rst:699
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid ""
#~ "To recap that PEP, a string prefix"
#~ " was introduced that marks the string"
#~ " as a template to be rendered. "
#~ "These formatted strings may contain one"
#~ " or more expressions built on `the"
#~ " existing syntax`_ of ``str.format()``. The"
#~ " formatted string expands at compile-"
#~ "time into a conventional string format"
#~ " operation, with the given expressions "
#~ "from its text extracted and passed "
#~ "instead as positional arguments."
#~ msgstr ""

#~ msgid "Briefer String Format"
#~ msgstr ""

#~ msgid "(https://mail.python.org/pipermail/python-ideas/2015-July/034659.html)"
#~ msgstr ""

#~ msgid "(https://mail.python.org/pipermail/python-ideas/2015-July/034669.html)"
#~ msgstr ""

#~ msgid "(https://mail.python.org/pipermail/python-ideas/2015-July/034701.html)"
#~ msgstr ""

#~ msgid "Bash Docs"
#~ msgstr ""

#~ msgid "(http://www.tldp.org/LDP/abs/html/arithexp.html)"
#~ msgstr ""

#~ msgid "(http://www.tldp.org/LDP/abs/html/commandsub.html)"
#~ msgstr ""

#~ msgid "Perl Cookbook"
#~ msgstr ""

#~ msgid "(http://docstore.mik.ua/orelly/perl/cookbook/ch01_11.htm)"
#~ msgstr ""

#~ msgid "Perl Docs"
#~ msgstr ""

#~ msgid "(http://perl6maven.com/perl6-scalar-array-and-hash-interpolation)"
#~ msgstr ""

#~ msgid "Ruby Docs"
#~ msgstr ""

#~ msgid ""
#~ "(http://ruby-doc.org/core-2.1.1/doc/syntax/literals_rdoc.html"
#~ "#label-Strings)"
#~ msgstr ""

#~ msgid "(https://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Literals#Interpolation)"
#~ msgstr ""

#~ msgid "Python Str.Format Syntax"
#~ msgstr ""

#~ msgid "(https://docs.python.org/3/library/string.html#format-string-syntax)"
#~ msgstr ""

#~ msgid "Python Format-Spec Mini Language"
#~ msgstr ""

#~ msgid ""
#~ "(https://docs.python.org/3/library/string.html#format-"
#~ "specification-mini-language)"
#~ msgstr ""

#~ msgid "Escaping of Input Variables"
#~ msgstr ""

#~ msgid ""
#~ "(https://mail.python.org/pipermail/python-"
#~ "ideas/2015-August/035532.html)"
#~ msgstr ""

#~ msgid ""
#~ "(https://mail.python.org/pipermail/python-"
#~ "ideas/2015-August/035554.html)"
#~ msgstr ""

#~ msgid "Extensible String Prefixes"
#~ msgstr ""

#~ msgid ""
#~ "(https://mail.python.org/pipermail/python-"
#~ "ideas/2015-August/035336.html)"
#~ msgstr ""

#~ msgid "Literal String Formatting"
#~ msgstr ""

#~ msgid "(https://mail.python.org/pipermail/python-dev/2015-August/141289.html)"
#~ msgstr ""

