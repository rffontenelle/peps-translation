# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0420.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0420.rst:5
msgid "Eric V. Smith <eric@trueblade.com>"
msgstr ""

#: ../../peps/pep-0420.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0420.rst:6
msgid "Final"
msgstr ""

#: ../../peps/pep-0420.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0420.rst:7
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0420.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0420.rst:9
msgid "19-Apr-2012"
msgstr ""

#: ../../peps/pep-0420.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-0420.rst:10
msgid "3.3"
msgstr ""

#: ../../peps/pep-0420.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0420.rst
msgid "Resolution"
msgstr ""

#: ../../peps/pep-0420.rst:12
msgid "https://mail.python.org/pipermail/python-dev/2012-May/119651.html"
msgstr ""

#: ../../peps/pep-0420.rst:15
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0420.rst:17
msgid ""
"Namespace packages are a mechanism for splitting a single Python package "
"across multiple directories on disk.  In current Python versions, an "
"algorithm to compute the packages ``__path__`` must be formulated.  With "
"the enhancement proposed here, the import machinery itself will construct"
" the list of directories that make up the package.  This PEP builds upon "
"previous work, documented in :pep:`382` and :pep:`402`.  Those PEPs have "
"since been rejected in favor of this one.  An implementation of this PEP "
"is at [1]_."
msgstr ""

#: ../../peps/pep-0420.rst:27
msgid "Terminology"
msgstr ""

#: ../../peps/pep-0420.rst:29
msgid "Within this PEP:"
msgstr ""

#: ../../peps/pep-0420.rst:31
msgid ""
"\"package\" refers to Python packages as defined by Python's import "
"statement."
msgstr ""

#: ../../peps/pep-0420.rst:34
msgid ""
"\"distribution\" refers to separately installable sets of Python modules "
"as stored in the Python package index, and installed by distutils or "
"setuptools."
msgstr ""

#: ../../peps/pep-0420.rst:38
msgid ""
"\"vendor package\" refers to groups of files installed by an operating "
"system's packaging mechanism (e.g. Debian or Redhat packages install on "
"Linux systems)."
msgstr ""

#: ../../peps/pep-0420.rst:42
msgid ""
"\"regular package\" refers to packages as they are implemented in Python "
"3.2 and earlier."
msgstr ""

#: ../../peps/pep-0420.rst:45
msgid ""
"\"portion\" refers to a set of files in a single directory (possibly "
"stored in a zip file) that contribute to a namespace package."
msgstr ""

#: ../../peps/pep-0420.rst:48
msgid ""
"\"legacy portion\" refers to a portion that uses ``__path__`` "
"manipulation in order to implement namespace packages."
msgstr ""

#: ../../peps/pep-0420.rst:51
msgid "This PEP defines a new type of package, the \"namespace package\"."
msgstr ""

#: ../../peps/pep-0420.rst:55
msgid "Namespace packages today"
msgstr ""

#: ../../peps/pep-0420.rst:57
msgid ""
"Python currently provides ``pkgutil.extend_path`` to denote a package as "
"a namespace package.  The recommended way of using it is to put::"
msgstr ""

#: ../../peps/pep-0420.rst:63
msgid ""
"in the package's ``__init__.py``.  Every distribution needs to provide "
"the same contents in its ``__init__.py``, so that ``extend_path`` is "
"invoked independent of which portion of the package gets imported first."
"  As a consequence, the package's ``__init__.py`` cannot practically "
"define any names as it depends on the order of the package fragments on "
"``sys.path`` to determine which portion is imported first.  As a special "
"feature, ``extend_path`` reads files named ``<packagename>.pkg`` which "
"allows declaration of additional portions."
msgstr ""

#: ../../peps/pep-0420.rst:72
msgid ""
"setuptools provides a similar function named "
"``pkg_resources.declare_namespace`` that is used in the form::"
msgstr ""

#: ../../peps/pep-0420.rst:78
msgid ""
"In the portion's ``__init__.py``, no assignment to ``__path__`` is "
"necessary, as ``declare_namespace`` modifies the package ``__path__`` "
"through ``sys.modules``.  As a special feature, ``declare_namespace`` "
"also supports zip files, and registers the package name internally so "
"that future additions to ``sys.path`` by setuptools can properly add "
"additional portions to each package."
msgstr ""

#: ../../peps/pep-0420.rst:85
msgid ""
"setuptools allows declaring namespace packages in a distribution's "
"``setup.py``, so that distribution developers don't need to put the magic"
" ``__path__`` modification into ``__init__.py`` themselves."
msgstr ""

#: ../../peps/pep-0420.rst:89
msgid ""
"See :pep:`402`'s :pep:`\"The Problem\" <402#the-problem>` section for "
"additional motivations for namespace packages.  Note that :pep:`402` has "
"been rejected, but the motivating use cases are still valid."
msgstr ""

#: ../../peps/pep-0420.rst:96
msgid "Rationale"
msgstr ""

#: ../../peps/pep-0420.rst:98
msgid ""
"The current imperative approach to namespace packages has led to multiple"
" slightly-incompatible mechanisms for providing namespace packages.  For "
"example, pkgutil supports ``*.pkg`` files; setuptools doesn't.  Likewise,"
" setuptools supports inspecting zip files, and supports adding portions "
"to its ``_namespace_packages`` variable, whereas pkgutil doesn't."
msgstr ""

#: ../../peps/pep-0420.rst:105
msgid ""
"Namespace packages are designed to support being split across multiple "
"directories (and hence found via multiple ``sys.path`` entries).  In this"
" configuration, it doesn't matter if multiple portions all provide an "
"``__init__.py`` file, so long as each portion correctly initializes the "
"namespace package.  However, Linux distribution vendors (amongst others) "
"prefer to combine the separate portions and install them all into the "
"*same* file system directory.  This creates a potential for conflict, as "
"the portions are now attempting to provide the *same* file on the target "
"system - something that is not allowed by many package managers.  "
"Allowing implicit namespace packages means that the requirement to "
"provide an ``__init__.py`` file can be dropped completely, and affected "
"portions can be installed into a common directory or split across "
"multiple directories as distributions see fit."
msgstr ""

#: ../../peps/pep-0420.rst:120
msgid ""
"A namespace package will not be constrained by a fixed ``__path__``, "
"computed from the parent path at namespace package creation time. "
"Consider the standard library ``encodings`` package:"
msgstr ""

#: ../../peps/pep-0420.rst:124
msgid "Suppose that ``encodings`` becomes a namespace package."
msgstr ""

#: ../../peps/pep-0420.rst:126
msgid ""
"It sometimes gets imported during interpreter startup to initialize the "
"standard io streams."
msgstr ""

#: ../../peps/pep-0420.rst:129
msgid ""
"An application modifies ``sys.path`` after startup and wants to "
"contribute additional encodings from new path entries."
msgstr ""

#: ../../peps/pep-0420.rst:132
msgid ""
"An attempt is made to import an encoding from an ``encodings`` portion "
"that is found on a path entry added in step 3."
msgstr ""

#: ../../peps/pep-0420.rst:135
msgid ""
"If the import system was restricted to only finding portions along the "
"value of ``sys.path`` that existed at the time the ``encodings`` "
"namespace package was created, the additional paths added in step 3 would"
" never be searched for the additional portions imported in step 4.  In "
"addition, if step 2 were sometimes skipped (due to some runtime flag or "
"other condition), then the path items added in step 3 would indeed be "
"used the first time a portion was imported.  Thus this PEP requires that "
"the list of path entries be dynamically computed when each portion is "
"loaded.  It is expected that the import machinery will do this "
"efficiently by caching ``__path__`` values and only refreshing them when "
"it detects that the parent path has changed.  In the case of a top-level "
"package like ``encodings``, this parent path would be ``sys.path``."
msgstr ""

#: ../../peps/pep-0420.rst:151
msgid "Specification"
msgstr ""

#: ../../peps/pep-0420.rst:153
msgid ""
"Regular packages will continue to have an ``__init__.py`` and will reside"
" in a single directory."
msgstr ""

#: ../../peps/pep-0420.rst:156
msgid ""
"Namespace packages cannot contain an ``__init__.py``.  As a consequence, "
"``pkgutil.extend_path`` and ``pkg_resources.declare_namespace`` become "
"obsolete for purposes of namespace package creation.  There will be no "
"marker file or directory for specifying a namespace package."
msgstr ""

#: ../../peps/pep-0420.rst:162
msgid ""
"During import processing, the import machinery will continue to iterate "
"over each directory in the parent path as it does in Python 3.2.  While "
"looking for a module or package named \"foo\", for each directory in the "
"parent path:"
msgstr ""

#: ../../peps/pep-0420.rst:167
msgid ""
"If ``<directory>/foo/__init__.py`` is found, a regular package is "
"imported and returned."
msgstr ""

#: ../../peps/pep-0420.rst:170
msgid ""
"If not, but ``<directory>/foo.{py,pyc,so,pyd}`` is found, a module is "
"imported and returned.  The exact list of extension varies by platform "
"and whether the -O flag is specified.  The list here is representative."
msgstr ""

#: ../../peps/pep-0420.rst:175
msgid ""
"If not, but ``<directory>/foo`` is found and is a directory, it is "
"recorded and the scan continues with the next directory in the parent "
"path."
msgstr ""

#: ../../peps/pep-0420.rst:179
msgid "Otherwise the scan continues with the next directory in the parent path."
msgstr ""

#: ../../peps/pep-0420.rst:182
msgid ""
"If the scan completes without returning a module or package, and at least"
" one directory was recorded, then a namespace package is created. The new"
" namespace package:"
msgstr ""

#: ../../peps/pep-0420.rst:186
msgid ""
"Has a ``__path__`` attribute set to an iterable of the path strings that "
"were found and recorded during the scan."
msgstr ""

#: ../../peps/pep-0420.rst:189
msgid "Does not have a ``__file__`` attribute."
msgstr ""

#: ../../peps/pep-0420.rst:191
msgid ""
"Note that if \"import foo\" is executed and \"foo\" is found as a "
"namespace package (using the above rules), then \"foo\" is immediately "
"created as a package.  The creation of the namespace package is not "
"deferred until a sub-level import occurs."
msgstr ""

#: ../../peps/pep-0420.rst:196
msgid ""
"A namespace package is not fundamentally different from a regular "
"package.  It is just a different way of creating packages.  Once a "
"namespace package is created, there is no functional difference between "
"it and a regular package."
msgstr ""

#: ../../peps/pep-0420.rst:202 ../../peps/pep-0420.rst:362
#: ../../peps/pep-0420.rst:500
msgid "Dynamic path computation"
msgstr ""

#: ../../peps/pep-0420.rst:204
msgid ""
"The import machinery will behave as if a namespace package's ``__path__``"
" is recomputed before each portion is loaded."
msgstr ""

#: ../../peps/pep-0420.rst:207
msgid ""
"For performance reasons, it is expected that this will be achieved by "
"detecting that the parent path has changed.  If no change has taken "
"place, then no ``__path__`` recomputation is required.  The "
"implementation must ensure that changes to the contents of the parent "
"path are detected, as well as detecting the replacement of the parent "
"path with a new path entry list object."
msgstr ""

#: ../../peps/pep-0420.rst:215
msgid "Impact on import finders and loaders"
msgstr ""

#: ../../peps/pep-0420.rst:217
msgid ""
":pep:`302` defines \"finders\" that are called to search path elements. "
"These finders' ``find_module`` methods return either a \"loader\" object "
"or ``None``."
msgstr ""

#: ../../peps/pep-0420.rst:221
msgid ""
"For a finder to contribute to namespace packages, it must implement a new"
" ``find_loader(fullname)`` method.  ``fullname`` has the same meaning as "
"for ``find_module``.  ``find_loader`` always returns a 2-tuple of "
"``(loader, <iterable-of-path-entries>)``.  ``loader`` may be ``None``, in"
" which case ``<iterable-of-path-entries>`` (which may be empty) is added "
"to the list of recorded path entries and path searching continues.  If "
"``loader`` is not ``None``, it is immediately used to load a module or "
"regular package."
msgstr ""

#: ../../peps/pep-0420.rst:230
msgid ""
"Even if ``loader`` is returned and is not ``None``, ``<iterable-of-path-"
"entries>`` must still contain the path entries for the package.  This "
"allows code such as ``pkgutil.extend_path()`` to compute path entries for"
" packages that it does not load."
msgstr ""

#: ../../peps/pep-0420.rst:235
msgid ""
"Note that multiple path entries per finder are allowed.  This is to "
"support the case where a finder discovers multiple namespace portions for"
" a given ``fullname``.  Many finders will support only a single namespace"
" package portion per ``find_loader`` call, in which case this iterable "
"will contain only a single string."
msgstr ""

#: ../../peps/pep-0420.rst:241
msgid ""
"The import machinery will call ``find_loader`` if it exists, else fall "
"back to ``find_module``.  Legacy finders which implement ``find_module`` "
"but not ``find_loader`` will be unable to contribute portions to a "
"namespace package."
msgstr ""

#: ../../peps/pep-0420.rst:246
msgid ""
"The specification expands :pep:`302` loaders to include an optional "
"method called ``module_repr()`` which if present, is used to generate "
"module object reprs. See the section below for further details."
msgstr ""

#: ../../peps/pep-0420.rst:251
msgid "Differences between namespace packages and regular packages"
msgstr ""

#: ../../peps/pep-0420.rst:253
msgid ""
"Namespace packages and regular packages are very similar. The differences"
" are:"
msgstr ""

#: ../../peps/pep-0420.rst:256
msgid ""
"Portions of namespace packages need not all come from the same directory "
"structure, or even from the same loader. Regular packages are self-"
"contained: all parts live in the same directory hierarchy."
msgstr ""

#: ../../peps/pep-0420.rst:260
msgid "Namespace packages have no ``__file__`` attribute."
msgstr ""

#: ../../peps/pep-0420.rst:262
msgid ""
"Namespace packages' ``__path__`` attribute is a read-only iterable of "
"strings, which is automatically updated when the parent path is modified."
msgstr ""

#: ../../peps/pep-0420.rst:266
msgid "Namespace packages have no ``__init__.py`` module."
msgstr ""

#: ../../peps/pep-0420.rst:268
msgid ""
"Namespace packages have a different type of object for their "
"``__loader__`` attribute."
msgstr ""

#: ../../peps/pep-0420.rst:273
msgid "Namespace packages in the standard library"
msgstr ""

#: ../../peps/pep-0420.rst:275
msgid ""
"It is possible, and this PEP explicitly allows, that parts of the "
"standard library be implemented as namespace packages.  When and if any "
"standard library packages become namespace packages is outside the scope "
"of this PEP."
msgstr ""

#: ../../peps/pep-0420.rst:282
msgid "Migrating from legacy namespace packages"
msgstr ""

#: ../../peps/pep-0420.rst:284
msgid ""
"As described above, prior to this PEP ``pkgutil.extend_path()`` was used "
"by legacy portions to create namespace packages.  Because it is likely "
"not practical for all existing portions of a namespace package to be "
"migrated to this PEP at once, ``extend_path()`` will be modified to also "
"recognize :pep:`420` namespace packages.  This will allow some portions "
"of a namespace to be legacy portions while others are migrated to "
":pep:`420`.  These hybrid namespace packages will not have the dynamic "
"path computation that normal namespace packages have, since "
"``extend_path()`` never provided this functionality in the past."
msgstr ""

#: ../../peps/pep-0420.rst:296
msgid "Packaging Implications"
msgstr ""

#: ../../peps/pep-0420.rst:298
msgid ""
"Multiple portions of a namespace package can be installed into the same "
"directory, or into separate directories.  For this section, suppose there"
" are two portions which define \"foo.bar\" and \"foo.baz\". \"foo\" "
"itself is a namespace package."
msgstr ""

#: ../../peps/pep-0420.rst:303
msgid ""
"If these are installed in the same location, a single directory \"foo\" "
"would be in a directory that is on ``sys.path``.  Inside \"foo\" would be"
" two directories, \"bar\" and \"baz\".  If \"foo.bar\" is removed "
"(perhaps by an OS package manager), care must be taken not to remove the "
"\"foo/baz\" or \"foo\" directories.  Note that in this case \"foo\" will "
"be a namespace package (because it lacks an ``__init__.py``), even though"
" all of its portions are in the same directory."
msgstr ""

#: ../../peps/pep-0420.rst:311
msgid ""
"Note that \"foo.bar\" and \"foo.baz\" can be installed into the same "
"\"foo\" directory because they will not have any files in common."
msgstr ""

#: ../../peps/pep-0420.rst:314
msgid ""
"If the portions are installed in different locations, two different "
"\"foo\" directories would be in directories that are on ``sys.path``. "
"\"foo/bar\" would be in one of these sys.path entries, and \"foo/baz\" "
"would be in the other.  Upon removal of \"foo.bar\", the \"foo/bar\" and "
"corresponding \"foo\" directories can be completely removed.  But "
"\"foo/baz\" and its corresponding \"foo\" directory cannot be removed."
msgstr ""

#: ../../peps/pep-0420.rst:321
msgid ""
"It is also possible to have the \"foo.bar\" portion installed in a "
"directory on ``sys.path``, and have the \"foo.baz\" portion provided in a"
" zip file, also on ``sys.path``."
msgstr ""

#: ../../peps/pep-0420.rst:327
msgid "Examples"
msgstr ""

#: ../../peps/pep-0420.rst:330
msgid "Nested namespace packages"
msgstr ""

#: ../../peps/pep-0420.rst:332
msgid "This example uses the following directory structure::"
msgstr ""

#: ../../peps/pep-0420.rst:344
msgid ""
"Here, both parent and child are namespace packages: Portions of them "
"exist in different directories, and they do not have ``__init__.py`` "
"files."
msgstr ""

#: ../../peps/pep-0420.rst:348
msgid ""
"Here we add the parent directories to ``sys.path``, and show that the "
"portions are correctly found::"
msgstr ""

#: ../../peps/pep-0420.rst:364
msgid ""
"This example uses a similar directory structure, but adds a third "
"portion::"
msgstr ""

#: ../../peps/pep-0420.rst:381
msgid ""
"We add ``project1`` and ``project2`` to ``sys.path``, then import "
"``parent.child.one`` and ``parent.child.two``.  Then we add the "
"``project3`` to ``sys.path`` and when ``parent.child.three`` is imported,"
" ``project3/parent`` is automatically added to ``parent.__path__``::"
msgstr ""

#: ../../peps/pep-0420.rst:429
msgid "Discussion"
msgstr ""

#: ../../peps/pep-0420.rst:431
msgid ""
"At PyCon 2012, we had a discussion about namespace packages at which "
":pep:`382` and :pep:`402` were rejected, to be replaced by this PEP [3]_."
msgstr ""

#: ../../peps/pep-0420.rst:434
msgid ""
"There is no intention to remove support of regular packages.  If a "
"developer knows that her package will never be a portion of a namespace "
"package, then there is a performance advantage to it being a regular "
"package (with an ``__init__.py``).  Creation and loading of a regular "
"package can take place immediately when it is located along the path.  "
"With namespace packages, all entries in the path must be scanned before "
"the package is created."
msgstr ""

#: ../../peps/pep-0420.rst:442
msgid ""
"Note that an ImportWarning will no longer be raised for a directory "
"lacking an ``__init__.py`` file.  Such a directory will now be imported "
"as a namespace package, whereas in prior Python versions an ImportWarning"
" would be raised."
msgstr ""

#: ../../peps/pep-0420.rst:447
msgid ""
"Alyssa (Nick) Coghlan presented a list of her objections to this proposal"
" [4]_. They are:"
msgstr ""

#: ../../peps/pep-0420.rst:450
msgid "Implicit package directories go against the Zen of Python."
msgstr ""

#: ../../peps/pep-0420.rst:452
msgid ""
"Implicit package directories pose awkward backwards compatibility "
"challenges."
msgstr ""

#: ../../peps/pep-0420.rst:455
msgid "Implicit package directories introduce ambiguity into file system layouts."
msgstr ""

#: ../../peps/pep-0420.rst:458
msgid ""
"Implicit package directories will permanently entrench current newbie-"
"hostile behavior in ``__main__``."
msgstr ""

#: ../../peps/pep-0420.rst:461
msgid ""
"Alyssa later gave a detailed response to her own objections [5]_, which "
"is summarized here:"
msgstr ""

#: ../../peps/pep-0420.rst:464
msgid "The practicality of this PEP wins over other proposals and the status quo."
msgstr ""

#: ../../peps/pep-0420.rst:467
msgid ""
"Minor backward compatibility issues are okay, as long as they are "
"properly documented."
msgstr ""

#: ../../peps/pep-0420.rst:470
msgid "This will be addressed in :pep:`395`."
msgstr ""

#: ../../peps/pep-0420.rst:472
msgid "This will also be addressed in :pep:`395`."
msgstr ""

#: ../../peps/pep-0420.rst:474
msgid ""
"The inclusion of namespace packages in the standard library was motivated"
" by Martin v. Löwis, who wanted the ``encodings`` package to become a "
"namespace package [6]_.  While this PEP allows for standard library "
"packages to become namespaces, it defers a decision on ``encodings``."
msgstr ""

#: ../../peps/pep-0420.rst:481
msgid "``find_module`` versus ``find_loader``"
msgstr ""

#: ../../peps/pep-0420.rst:483
msgid ""
"An early draft of this PEP specified a change to the ``find_module`` "
"method in order to support namespace packages.  It would be modified to "
"return a string in the case where a namespace package portion was "
"discovered."
msgstr ""

#: ../../peps/pep-0420.rst:488
msgid ""
"However, this caused a problem with existing code outside of the standard"
" library which calls ``find_module``.  Because this code would not be "
"upgraded in concert with changes required by this PEP, it would fail when"
" it would receive unexpected return values from ``find_module``.  Because"
" of this incompatibility, this PEP now specifies that finders that want "
"to provide namespace portions must implement the ``find_loader`` method, "
"described above."
msgstr ""

#: ../../peps/pep-0420.rst:496
msgid ""
"The use case for supporting multiple portions per ``find_loader`` call is"
" given in [7]_."
msgstr ""

#: ../../peps/pep-0420.rst:502
msgid ""
"Guido raised a concern that automatic dynamic path computation was an "
"unnecessary feature [8]_.  Later in that thread, PJ Eby and Alyssa "
"Coghlan presented arguments as to why dynamic computation would minimize "
"surprise to Python users.  The conclusion of that discussion has been "
"included in this PEP's Rationale section."
msgstr ""

#: ../../peps/pep-0420.rst:508
msgid ""
"An earlier version of this PEP required that dynamic path computation "
"could only take affect if the parent path object were modified in-place."
"  That is, this would work::"
msgstr ""

#: ../../peps/pep-0420.rst:514
msgid "But this would not::"
msgstr ""

#: ../../peps/pep-0420.rst:518
msgid ""
"In the same thread [8]_, it was pointed out that this restriction is not "
"required.  If the parent path is looked up by name instead of by holding "
"a reference to it, then there is no restriction on how the parent path is"
" modified or replaced.  For a top-level namespace package, the lookup "
"would be the module named ``\"sys\"`` then its attribute ``\"path\"``.  "
"For a namespace package nested inside a package ``foo``, the lookup would"
" be for the module named ``\"foo\"`` then its attribute ``\"__path__\"``."
msgstr ""

#: ../../peps/pep-0420.rst:529
msgid "Module reprs"
msgstr ""

#: ../../peps/pep-0420.rst:531
msgid ""
"Previously, module reprs were hard coded based on assumptions about a "
"module's ``__file__`` attribute.  If this attribute existed and was a "
"string, it was assumed to be a file system path, and the module object's "
"repr would include this in its value.  The only exception was that "
":pep:`302` reserved missing ``__file__`` attributes to built-in modules, "
"and in CPython, this assumption was baked into the module object's "
"implementation.  Because of this restriction, some modules contained "
"contrived ``__file__`` values that did not reflect file system paths, and"
" which could cause unexpected problems later (e.g. ``os.path.join()`` on "
"a non-path ``__file__`` would return gibberish)."
msgstr ""

#: ../../peps/pep-0420.rst:541
msgid ""
"This PEP relaxes this constraint, and leaves the setting of ``__file__`` "
"to the purview of the loader producing the module.  Loaders may opt to "
"leave ``__file__`` unset if no file system path is appropriate.  Loaders "
"may also set additional reserved attributes on the module if useful.  "
"This means that the definitive way to determine the origin of a module is"
" to check its ``__loader__`` attribute."
msgstr ""

#: ../../peps/pep-0420.rst:548
msgid ""
"For example, namespace packages as described in this PEP will have no "
"``__file__`` attribute because no corresponding file exists.  In order to"
" provide flexibility and descriptiveness in the reprs of such modules, a "
"new optional protocol is added to :pep:`302` loaders.  Loaders can "
"implement a ``module_repr()`` method which takes a single argument, the "
"module object. This method should return the string to be used verbatim "
"as the repr of the module.  The rules for producing a module repr are now"
" standardized as:"
msgstr ""

#: ../../peps/pep-0420.rst:556
msgid ""
"If the module has an ``__loader__`` and that loader has a "
"``module_repr()`` method, call it with a single argument, which is the "
"module object.  The value returned is used as the module's repr."
msgstr ""

#: ../../peps/pep-0420.rst:560
msgid ""
"If an exception occurs in ``module_repr()``, the exception is caught and "
"discarded, and the calculation of the module's repr continues as if "
"``module_repr()`` did not exist."
msgstr ""

#: ../../peps/pep-0420.rst:564
msgid ""
"If the module has an ``__file__`` attribute, this is used as part of the "
"module's repr."
msgstr ""

#: ../../peps/pep-0420.rst:567
msgid ""
"If the module has no ``__file__`` but does have an ``__loader__``, then "
"the loader's repr is used as part of the module's repr."
msgstr ""

#: ../../peps/pep-0420.rst:570
msgid "Otherwise, just use the module's ``__name__`` in the repr."
msgstr ""

#: ../../peps/pep-0420.rst:572
msgid ""
"Here is a snippet showing how namespace module reprs are calculated from "
"its loader::"
msgstr ""

#: ../../peps/pep-0420.rst:580
msgid ""
"Built-in module reprs would no longer need to be hard-coded, but instead "
"would come from their loader as well::"
msgstr ""

#: ../../peps/pep-0420.rst:588
msgid ""
"Here are some example reprs of different types of modules with different "
"sets of the related attributes::"
msgstr ""

#: ../../peps/pep-0420.rst:618
msgid "References"
msgstr "Referências"

#: ../../peps/pep-0420.rst:620
msgid "PEP 420 branch (http://hg.python.org/features/pep-420)"
msgstr ""

#: ../../peps/pep-0420.rst:622
msgid ""
"PyCon 2012 Namespace Package discussion outcome "
"(https://mail.python.org/pipermail/import-sig/2012-March/000421.html)"
msgstr ""

#: ../../peps/pep-0420.rst:625
msgid ""
"Alyssa Coghlan's objection to the lack of marker files or directories "
"(https://mail.python.org/pipermail/import-sig/2012-March/000423.html)"
msgstr ""

#: ../../peps/pep-0420.rst:628
msgid ""
"Alyssa Coghlan's response to her initial objections "
"(https://mail.python.org/pipermail/import-sig/2012-April/000464.html)"
msgstr ""

#: ../../peps/pep-0420.rst:631
msgid ""
"Martin v. Löwis's suggestion to make ``encodings`` a namespace package "
"(https://mail.python.org/pipermail/import-sig/2012-May/000540.html)"
msgstr ""

#: ../../peps/pep-0420.rst:635
msgid ""
"Use case for multiple portions per ``find_loader`` call "
"(https://mail.python.org/pipermail/import-sig/2012-May/000585.html)"
msgstr ""

#: ../../peps/pep-0420.rst:638
msgid ""
"Discussion about dynamic path computation "
"(https://mail.python.org/pipermail/python-dev/2012-May/119560.html)"
msgstr ""

#: ../../peps/pep-0420.rst:642
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0420.rst:644
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid ""
#~ "Nick Coghlan presented a list of "
#~ "his objections to this proposal [4]_."
#~ " They are:"
#~ msgstr ""

#~ msgid ""
#~ "Nick later gave a detailed response "
#~ "to his own objections [5]_, which "
#~ "is summarized here:"
#~ msgstr ""

#~ msgid ""
#~ "Guido raised a concern that automatic"
#~ " dynamic path computation was an "
#~ "unnecessary feature [8]_.  Later in that"
#~ " thread, PJ Eby and Nick Coghlan "
#~ "presented arguments as to why dynamic"
#~ " computation would minimize surprise to "
#~ "Python users.  The conclusion of that"
#~ " discussion has been included in this"
#~ " PEP's Rationale section."
#~ msgstr ""

#~ msgid ""
#~ "Nick Coghlan's objection to the lack "
#~ "of marker files or directories "
#~ "(https://mail.python.org/pipermail/import-"
#~ "sig/2012-March/000423.html)"
#~ msgstr ""

#~ msgid ""
#~ "Nick Coghlan's response to his initial"
#~ " objections (https://mail.python.org/pipermail/import-"
#~ "sig/2012-April/000464.html)"
#~ msgstr ""

