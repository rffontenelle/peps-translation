# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0427.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0427.rst:5
msgid "Daniel Holth <dholth@gmail.com>"
msgstr ""

#: ../../peps/pep-0427.rst
msgid "BDFL-Delegate"
msgstr ""

#: ../../peps/pep-0427.rst:6
msgid "Alyssa Coghlan <ncoghlan@gmail.com>"
msgstr ""

#: ../../peps/pep-0427.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/pep-0427.rst:7
msgid "distutils-sig@python.org"
msgstr ""

#: ../../peps/pep-0427.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0427.rst:8
msgid "Final"
msgstr ""

#: ../../peps/pep-0427.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0427.rst:9
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0427.rst
msgid "Topic"
msgstr ""

#: ../../peps/pep-0427.rst:10
msgid "Packaging"
msgstr ""

#: ../../peps/pep-0427.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0427.rst:12
msgid "20-Sep-2012"
msgstr ""

#: ../../peps/pep-0427.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0427.rst:13
msgid "18-Oct-2012, 15-Feb-2013"
msgstr ""

#: ../../peps/pep-0427.rst
msgid "Resolution"
msgstr ""

#: ../../peps/pep-0427.rst:14
msgid "https://mail.python.org/pipermail/python-dev/2013-February/124103.html"
msgstr ""

#: ../../peps/pep-0427.rst:21
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0427.rst:23
msgid "This PEP describes a built-package format for Python called \"wheel\"."
msgstr ""

#: ../../peps/pep-0427.rst:25
msgid ""
"A wheel is a ZIP-format archive with a specially formatted file name and "
"the ``.whl`` extension.  It contains a single distribution nearly as it "
"would be installed according to :pep:`376` with a particular installation"
" scheme.  Although a specialized installer is recommended, a wheel file "
"may be installed by simply unpacking into site-packages with the standard"
" 'unzip' tool while preserving enough information to spread its contents "
"out onto their final paths at any later time."
msgstr ""

#: ../../peps/pep-0427.rst:35
msgid "PEP Acceptance"
msgstr ""

#: ../../peps/pep-0427.rst:37
msgid ""
"This PEP was accepted, and the defined wheel version updated to 1.0, by "
"Alyssa Coghlan on 16th February, 2013 [1]_"
msgstr ""

#: ../../peps/pep-0427.rst:42
msgid "Rationale"
msgstr ""

#: ../../peps/pep-0427.rst:44
msgid ""
"Python needs a package format that is easier to install than sdist. "
"Python's sdist packages are defined by and require the distutils and "
"setuptools build systems, running arbitrary code to build-and-install, "
"and re-compile, code just so it can be installed into a new virtualenv.  "
"This system of conflating build-install is slow, hard to maintain, and "
"hinders innovation in both build systems and installers."
msgstr ""

#: ../../peps/pep-0427.rst:51
msgid ""
"Wheel attempts to remedy these problems by providing a simpler interface "
"between the build system and the installer.  The wheel binary package "
"format frees installers from having to know about the build system, saves"
" time by amortizing compile time over many installations, and removes the"
" need to install a build system in the target environment."
msgstr ""

#: ../../peps/pep-0427.rst:60
msgid "Details"
msgstr ""

#: ../../peps/pep-0427.rst:63
msgid "Installing a wheel 'distribution-1.0-py32-none-any.whl'"
msgstr ""

#: ../../peps/pep-0427.rst:65
msgid "Wheel installation notionally consists of two phases:"
msgstr ""

#: ../../peps/pep-0427.rst:67
msgid "Unpack."
msgstr ""

#: ../../peps/pep-0427.rst:69
msgid "Parse ``distribution-1.0.dist-info/WHEEL``."
msgstr ""

#: ../../peps/pep-0427.rst:70
msgid ""
"Check that installer is compatible with Wheel-Version.  Warn if minor "
"version is greater, abort if major version is greater."
msgstr ""

#: ../../peps/pep-0427.rst:72
msgid "If Root-Is-Purelib == 'true', unpack archive into purelib (site-packages)."
msgstr ""

#: ../../peps/pep-0427.rst:74
msgid "Else unpack archive into platlib (site-packages)."
msgstr ""

#: ../../peps/pep-0427.rst:76
msgid "Spread."
msgstr ""

#: ../../peps/pep-0427.rst:78
msgid ""
"Unpacked archive includes ``distribution-1.0.dist-info/`` and (if there "
"is data) ``distribution-1.0.data/``."
msgstr ""

#: ../../peps/pep-0427.rst:80
msgid ""
"Move each subtree of ``distribution-1.0.data/`` onto its destination "
"path. Each subdirectory of ``distribution-1.0.data/`` is a key into a "
"dict of destination directories, such as "
"``distribution-1.0.data/(purelib|platlib|headers|scripts|data)``. The "
"initially supported paths are taken from ``distutils.command.install``."
msgstr ""

#: ../../peps/pep-0427.rst:86
msgid ""
"If applicable, update scripts starting with ``#!python`` to point to the "
"correct interpreter."
msgstr ""

#: ../../peps/pep-0427.rst:88
msgid "Update ``distribution-1.0.dist-info/RECORD`` with the installed paths."
msgstr ""

#: ../../peps/pep-0427.rst:90
msgid "Remove empty ``distribution-1.0.data`` directory."
msgstr ""

#: ../../peps/pep-0427.rst:91
msgid ""
"Compile any installed .py to .pyc. (Uninstallers should be smart enough "
"to remove .pyc even if it is not mentioned in RECORD.)"
msgstr ""

#: ../../peps/pep-0427.rst:95
msgid "Recommended installer features"
msgstr ""

#: ../../peps/pep-0427.rst:105
msgid "Rewrite ``#!python``."
msgstr ""

#: ../../peps/pep-0427.rst:98
msgid ""
"In wheel, scripts are packaged in "
"``{distribution}-{version}.data/scripts/``.  If the first line of a file "
"in ``scripts/`` starts with exactly ``b'#!python'``, rewrite to point to "
"the correct interpreter.  Unix installers may need to add the +x bit to "
"these files if the archive was created on Windows."
msgstr ""

#: ../../peps/pep-0427.rst:104
msgid ""
"The ``b'#!pythonw'`` convention is allowed. ``b'#!pythonw'`` indicates a "
"GUI script instead of a console script."
msgstr ""

#: ../../peps/pep-0427.rst:110
msgid "Generate script wrappers."
msgstr ""

#: ../../peps/pep-0427.rst:108
msgid ""
"In wheel, scripts packaged on Unix systems will certainly not have "
"accompanying .exe wrappers.  Windows installers may want to add them "
"during install."
msgstr ""

#: ../../peps/pep-0427.rst:113
msgid "Recommended archiver features"
msgstr ""

#: ../../peps/pep-0427.rst:120
msgid "Place ``.dist-info`` at the end of the archive."
msgstr ""

#: ../../peps/pep-0427.rst:116
msgid ""
"Archivers are encouraged to place the ``.dist-info`` files physically at "
"the end of the archive.  This enables some potentially interesting ZIP "
"tricks including the ability to amend the metadata without rewriting the "
"entire archive."
msgstr ""

#: ../../peps/pep-0427.rst:123
msgid "File Format"
msgstr ""

#: ../../peps/pep-0427.rst:126
msgid "File name convention"
msgstr ""

#: ../../peps/pep-0427.rst:128
msgid ""
"The wheel filename is ``{distribution}-{version}(-{build tag})?-{python "
"tag}-{abi tag}-{platform tag}.whl``."
msgstr ""

#: ../../peps/pep-0427.rst:132
msgid "distribution"
msgstr ""

#: ../../peps/pep-0427.rst:132
msgid "Distribution name, e.g. 'django', 'pyramid'."
msgstr ""

#: ../../peps/pep-0427.rst:135
msgid "version"
msgstr ""

#: ../../peps/pep-0427.rst:135
msgid "Distribution version, e.g. 1.0."
msgstr ""

#: ../../peps/pep-0427.rst:143
msgid "build tag"
msgstr ""

#: ../../peps/pep-0427.rst:138
msgid ""
"Optional build number.  Must start with a digit.  Acts as a tie-breaker "
"if two wheel file names are the same in all other respects (i.e. name, "
"version, and other tags).  Sort as an empty tuple if unspecified, else "
"sort as a two-item tuple with the first item being the initial digits as "
"an ``int``, and the second item being the remainder of the tag as a "
"``str``."
msgstr ""

#: ../../peps/pep-0427.rst:146
msgid "language implementation and version tag"
msgstr ""

#: ../../peps/pep-0427.rst:146
msgid "E.g. 'py27', 'py2', 'py3'."
msgstr ""

#: ../../peps/pep-0427.rst:149
msgid "abi tag"
msgstr ""

#: ../../peps/pep-0427.rst:149
msgid "E.g. 'cp33m', 'abi3', 'none'."
msgstr ""

#: ../../peps/pep-0427.rst:152
msgid "platform tag"
msgstr ""

#: ../../peps/pep-0427.rst:152
msgid "E.g. 'linux_x86_64', 'any'."
msgstr ""

#: ../../peps/pep-0427.rst:154
msgid ""
"For example, ``distribution-1.0-1-py27-none-any.whl`` is the first build "
"of a package called 'distribution', and is compatible with Python 2.7 "
"(any Python 2.7 implementation), with no ABI (pure Python), on any CPU "
"architecture."
msgstr ""

#: ../../peps/pep-0427.rst:159
msgid ""
"The last three components of the filename before the extension are called"
" \"compatibility tags.\"  The compatibility tags express the package's "
"basic interpreter requirements and are detailed in :pep:`425`."
msgstr ""

#: ../../peps/pep-0427.rst:164
msgid "Escaping and Unicode"
msgstr ""

#: ../../peps/pep-0427.rst:166
msgid ""
"Each component of the filename is escaped by replacing runs of non-"
"alphanumeric characters with an underscore ``_``::"
msgstr ""

#: ../../peps/pep-0427.rst:171
msgid ""
"The archive filename is Unicode.  It will be some time before the tools "
"are updated to support non-ASCII filenames, but they are supported in "
"this specification."
msgstr ""

#: ../../peps/pep-0427.rst:175
msgid ""
"The filenames *inside* the archive are encoded as UTF-8.  Although some "
"ZIP clients in common use do not properly display UTF-8 filenames, the "
"encoding is supported by both the ZIP specification and Python's "
"``zipfile``."
msgstr ""

#: ../../peps/pep-0427.rst:181
msgid "File contents"
msgstr ""

#: ../../peps/pep-0427.rst:183
msgid ""
"The contents of a wheel file, where {distribution} is replaced with the "
"name of the package, e.g. ``beaglevote`` and {version} is replaced with "
"its version, e.g. ``1.0.0``, consist of:"
msgstr ""

#: ../../peps/pep-0427.rst:187
msgid ""
"``/``, the root of the archive, contains all files to be installed in "
"``purelib`` or ``platlib`` as specified in ``WHEEL``.  ``purelib`` and "
"``platlib`` are usually both ``site-packages``."
msgstr ""

#: ../../peps/pep-0427.rst:190
msgid "``{distribution}-{version}.dist-info/`` contains metadata."
msgstr ""

#: ../../peps/pep-0427.rst:191
msgid ""
"``{distribution}-{version}.data/`` contains one subdirectory for each "
"non-empty install scheme key not already covered, where the subdirectory "
"name is an index into a dictionary of install paths (e.g. ``data``, "
"``scripts``, ``headers``, ``purelib``, ``platlib``)."
msgstr ""

#: ../../peps/pep-0427.rst:195
msgid ""
"Python scripts must appear in ``scripts`` and begin with exactly "
"``b'#!python'`` in order to enjoy script wrapper generation and "
"``#!python`` rewriting at install time.  They may have any or no "
"extension."
msgstr ""

#: ../../peps/pep-0427.rst:199
msgid ""
"``{distribution}-{version}.dist-info/METADATA`` is Metadata version 1.1 "
"or greater format metadata."
msgstr ""

#: ../../peps/pep-0427.rst:201
msgid ""
"``{distribution}-{version}.dist-info/WHEEL`` is metadata about the "
"archive itself in the same basic key: value format::"
msgstr ""

#: ../../peps/pep-0427.rst:211
msgid "``Wheel-Version`` is the version number of the Wheel specification."
msgstr ""

#: ../../peps/pep-0427.rst:212
msgid ""
"``Generator`` is the name and optionally the version of the software that"
" produced the archive."
msgstr ""

#: ../../peps/pep-0427.rst:214
msgid ""
"``Root-Is-Purelib`` is true if the top level directory of the archive "
"should be installed into purelib; otherwise the root should be installed "
"into platlib."
msgstr ""

#: ../../peps/pep-0427.rst:217
msgid ""
"``Tag`` is the wheel's expanded compatibility tags; in the example the "
"filename would contain ``py2.py3-none-any``."
msgstr ""

#: ../../peps/pep-0427.rst:219
msgid "``Build`` is the build number and is omitted if there is no build number."
msgstr ""

#: ../../peps/pep-0427.rst:220
msgid ""
"A wheel installer should warn if Wheel-Version is greater than the "
"version it supports, and must fail if Wheel-Version has a greater major "
"version than the version it supports."
msgstr ""

#: ../../peps/pep-0427.rst:223
msgid ""
"Wheel, being an installation format that is intended to work across "
"multiple versions of Python, does not generally include .pyc files."
msgstr ""

#: ../../peps/pep-0427.rst:225
msgid "Wheel does not contain setup.py or setup.cfg."
msgstr ""

#: ../../peps/pep-0427.rst:227
msgid ""
"This version of the wheel specification is based on the distutils install"
" schemes and does not define how to install files to other locations. The"
" layout offers a superset of the functionality provided by the existing "
"wininst and egg binary formats."
msgstr ""

#: ../../peps/pep-0427.rst:234
msgid "The .dist-info directory"
msgstr ""

#: ../../peps/pep-0427.rst:236
msgid ""
"Wheel .dist-info directories include at a minimum METADATA, WHEEL, and "
"RECORD."
msgstr ""

#: ../../peps/pep-0427.rst:238
msgid ""
"METADATA is the package metadata, the same format as PKG-INFO as found at"
" the root of sdists."
msgstr ""

#: ../../peps/pep-0427.rst:240
msgid "WHEEL is the wheel metadata specific to a build of the package."
msgstr ""

#: ../../peps/pep-0427.rst:241
msgid ""
"RECORD is a list of (almost) all the files in the wheel and their secure "
"hashes.  Unlike :pep:`376`, every file except RECORD, which cannot "
"contain a hash of itself, must include its hash.  The hash algorithm must"
" be sha256 or better; specifically, md5 and sha1 are not permitted, as "
"signed wheel files rely on the strong hashes in RECORD to validate the "
"integrity of the archive."
msgstr ""

#: ../../peps/pep-0427.rst:247
msgid ":pep:`376`'s INSTALLER and REQUESTED are not included in the archive."
msgstr ""

#: ../../peps/pep-0427.rst:248
msgid "RECORD.jws is used for digital signatures.  It is not mentioned in RECORD."
msgstr ""

#: ../../peps/pep-0427.rst:250
msgid ""
"RECORD.p7s is allowed as a courtesy to anyone who would prefer to use "
"S/MIME signatures to secure their wheel files.  It is not mentioned in "
"RECORD."
msgstr ""

#: ../../peps/pep-0427.rst:253
msgid ""
"During extraction, wheel installers verify all the hashes in RECORD "
"against the file contents.  Apart from RECORD and its signatures, "
"installation will fail if any file in the archive is not both mentioned "
"and correctly hashed in RECORD."
msgstr ""

#: ../../peps/pep-0427.rst:260
msgid "The .data directory"
msgstr ""

#: ../../peps/pep-0427.rst:262
msgid ""
"Any file that is not normally installed inside site-packages goes into "
"the .data directory, named as the .dist-info directory but with the "
".data/ extension::"
msgstr ""

#: ../../peps/pep-0427.rst:270
msgid ""
"The .data directory contains subdirectories with the scripts, headers, "
"documentation and so forth from the distribution.  During installation "
"the contents of these subdirectories are moved onto their destination "
"paths."
msgstr ""

#: ../../peps/pep-0427.rst:276
msgid "Signed wheel files"
msgstr ""

#: ../../peps/pep-0427.rst:278
msgid ""
"Wheel files include an extended RECORD that enables digital signatures.  "
":pep:`376`'s RECORD is altered to include a secure hash "
"``digestname=urlsafe_b64encode_nopad(digest)`` (urlsafe base64 encoding "
"with no trailing = characters) as the second column instead of an md5sum."
"  All possible entries are hashed, including any generated files such as "
".pyc files, but not RECORD which cannot contain its own hash. For "
"example::"
msgstr ""

#: ../../peps/pep-0427.rst:289
msgid ""
"The signature file(s) RECORD.jws and RECORD.p7s are not mentioned in "
"RECORD at all since they can only be added after RECORD is generated. "
"Every other file in the archive must have a correct hash in RECORD or the"
" installation will fail."
msgstr ""

#: ../../peps/pep-0427.rst:294
msgid ""
"If JSON web signatures are used, one or more JSON Web Signature JSON "
"Serialization (JWS-JS) signatures is stored in a file RECORD.jws adjacent"
" to RECORD.  JWS is used to sign RECORD by including the SHA-256 hash of "
"RECORD as the signature's JSON payload::"
msgstr ""

#: ../../peps/pep-0427.rst:301
msgid "(The hash value is the same format used in RECORD.)"
msgstr ""

#: ../../peps/pep-0427.rst:303
msgid ""
"If RECORD.p7s is used, it must contain a detached S/MIME format signature"
" of RECORD."
msgstr ""

#: ../../peps/pep-0427.rst:306
msgid ""
"A wheel installer is not required to understand digital signatures but "
"MUST verify the hashes in RECORD against the extracted file contents. "
"When the installer checks file hashes against RECORD, a separate "
"signature checker only needs to establish that RECORD matches the "
"signature."
msgstr ""

#: ../../peps/pep-0427.rst:311
msgid "See"
msgstr ""

#: ../../peps/pep-0427.rst:313
msgid ":rfc:`7515`"
msgstr ""

#: ../../peps/pep-0427.rst:314
msgid ""
"https://datatracker.ietf.org/doc/html/draft-jones-jose-jws-json-"
"serialization.html"
msgstr ""

#: ../../peps/pep-0427.rst:315
msgid ":rfc:`7517`"
msgstr ""

#: ../../peps/pep-0427.rst:316
msgid ""
"https://datatracker.ietf.org/doc/html/draft-jones-jose-json-private-"
"key.html"
msgstr ""

#: ../../peps/pep-0427.rst:320
msgid "Comparison to .egg"
msgstr ""

#: ../../peps/pep-0427.rst:322
msgid ""
"Wheel is an installation format; egg is importable.  Wheel archives do "
"not need to include .pyc and are less tied to a specific Python version "
"or implementation. Wheel can install (pure Python) packages built with "
"previous versions of Python so you don't always have to wait for the "
"packager to catch up."
msgstr ""

#: ../../peps/pep-0427.rst:327
msgid ""
"Wheel uses .dist-info directories; egg uses .egg-info.  Wheel is "
"compatible with the new world of Python packaging and the new concepts it"
" brings."
msgstr ""

#: ../../peps/pep-0427.rst:330
msgid ""
"Wheel has a richer file naming convention for today's multi-"
"implementation world.  A single wheel archive can indicate its "
"compatibility with a number of Python language versions and "
"implementations, ABIs, and system architectures.  Historically the ABI "
"has been specific to a CPython release, wheel is ready for the stable "
"ABI."
msgstr ""

#: ../../peps/pep-0427.rst:336
msgid ""
"Wheel is lossless.  The first wheel implementation bdist_wheel always "
"generates egg-info, and then converts it to a .whl.  It is also possible "
"to convert existing eggs and bdist_wininst distributions."
msgstr ""

#: ../../peps/pep-0427.rst:340
msgid ""
"Wheel is versioned.  Every wheel file contains the version of the wheel "
"specification and the implementation that packaged it. Hopefully the next"
" migration can simply be to Wheel 2.0."
msgstr ""

#: ../../peps/pep-0427.rst:343
msgid "Wheel is a reference to the other Python."
msgstr ""

#: ../../peps/pep-0427.rst:347
msgid "FAQ"
msgstr ""

#: ../../peps/pep-0427.rst:351
msgid "Wheel defines a .data directory.  Should I put all my data there?"
msgstr ""

#: ../../peps/pep-0427.rst:353
msgid ""
"This specification does not have an opinion on how you should organize "
"your code.  The .data directory is just a place for any files that are "
"not normally installed inside ``site-packages`` or on the PYTHONPATH. In "
"other words, you may continue to use ``pkgutil.get_data(package, "
"resource)`` even though *those* files will usually not be distributed in "
"*wheel's* ``.data`` directory."
msgstr ""

#: ../../peps/pep-0427.rst:362
msgid "Why does wheel include attached signatures?"
msgstr ""

#: ../../peps/pep-0427.rst:364
msgid ""
"Attached signatures are more convenient than detached signatures because "
"they travel with the archive.  Since only the individual files are "
"signed, the archive can be recompressed without invalidating the "
"signature or individual files can be verified without having to download "
"the whole archive."
msgstr ""

#: ../../peps/pep-0427.rst:372
msgid "Why does wheel allow JWS signatures?"
msgstr ""

#: ../../peps/pep-0427.rst:374
msgid ""
"The JOSE specifications of which JWS is a part are designed to be easy to"
" implement, a feature that is also one of wheel's primary design goals.  "
"JWS yields a useful, concise pure-Python implementation."
msgstr ""

#: ../../peps/pep-0427.rst:380
msgid "Why does wheel also allow S/MIME signatures?"
msgstr ""

#: ../../peps/pep-0427.rst:382
msgid ""
"S/MIME signatures are allowed for users who need or want to use existing "
"public key infrastructure with wheel."
msgstr ""

#: ../../peps/pep-0427.rst:385
msgid ""
"Signed packages are only a basic building block in a secure package "
"update system.  Wheel only provides the building block."
msgstr ""

#: ../../peps/pep-0427.rst:390
msgid "What's the deal with \"purelib\" vs. \"platlib\"?"
msgstr ""

#: ../../peps/pep-0427.rst:392
msgid ""
"Wheel preserves the \"purelib\" vs. \"platlib\" distinction, which is "
"significant on some platforms. For example, Fedora installs pure Python "
"packages to '/usr/lib/pythonX.Y/site-packages' and platform dependent "
"packages to '/usr/lib64/pythonX.Y/site-packages'."
msgstr ""

#: ../../peps/pep-0427.rst:397
msgid ""
"A wheel with \"Root-Is-Purelib: false\" with all its files in "
"``{name}-{version}.data/purelib`` is equivalent to a wheel with \"Root-"
"Is-Purelib: true\" with those same files in the root, and it is legal to "
"have files in both the \"purelib\" and \"platlib\" categories."
msgstr ""

#: ../../peps/pep-0427.rst:402
msgid ""
"In practice a wheel should have only one of \"purelib\" or \"platlib\" "
"depending on whether it is pure Python or not and those files should be "
"at the root with the appropriate setting given for \"Root-is-purelib\"."
msgstr ""

#: ../../peps/pep-0427.rst:408
msgid "Is it possible to import Python code directly from a wheel file?"
msgstr ""

#: ../../peps/pep-0427.rst:410
msgid ""
"Technically, due to the combination of supporting installation via simple"
" extraction and using an archive format that is compatible with "
"``zipimport``, a subset of wheel files *do* support being placed directly"
" on ``sys.path``. However, while this behaviour is a natural consequence "
"of the format design, actually relying on it is generally discouraged."
msgstr ""

#: ../../peps/pep-0427.rst:416
msgid ""
"Firstly, wheel *is* designed primarily as a distribution format, so "
"skipping the installation step also means deliberately avoiding any "
"reliance on features that assume full installation (such as being able to"
" use standard tools like ``pip`` and ``virtualenv`` to capture and manage"
" dependencies in a way that can be properly tracked for auditing and "
"security update purposes, or integrating fully with the standard build "
"machinery for C extensions by publishing header files in the appropriate "
"place)."
msgstr ""

#: ../../peps/pep-0427.rst:425
msgid ""
"Secondly, while some Python software is written to support running "
"directly from a zip archive, it is still common for code to be written "
"assuming it has been fully installed. When that assumption is broken by "
"trying to run the software from a zip archive, the failures can often be "
"obscure and hard to diagnose (especially when they occur in third party "
"libraries). The two most common sources of problems with this are the "
"fact that importing C extensions from a zip archive is *not* supported by"
" CPython (since doing so is not supported directly by the dynamic loading"
" machinery on any platform) and that when running from a zip archive the "
"``__file__`` attribute no longer refers to an ordinary filesystem path, "
"but to a combination path that includes both the location of the zip "
"archive on the filesystem and the relative path to the module inside the "
"archive. Even when software correctly uses the abstract resource APIs "
"internally, interfacing with external components may still require the "
"availability of an actual on-disk file."
msgstr ""

#: ../../peps/pep-0427.rst:442
msgid ""
"Like metaclasses, monkeypatching and metapath importers, if you're not "
"already sure you need to take advantage of this feature, you almost "
"certainly don't need it. If you *do* decide to use it anyway, be aware "
"that many projects will require a failure to be reproduced with a fully "
"installed package before accepting it as a genuine bug."
msgstr ""

#: ../../peps/pep-0427.rst:450
msgid "References"
msgstr "Referências"

#: ../../peps/pep-0427.rst:452
msgid ""
"PEP acceptance (https://mail.python.org/pipermail/python-"
"dev/2013-February/124103.html)"
msgstr ""

#: ../../peps/pep-0427.rst:457
msgid "Appendix"
msgstr ""

#: ../../peps/pep-0427.rst:459
msgid "Example urlsafe-base64-nopad implementation::"
msgstr ""

#: ../../peps/pep-0427.rst:473
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0427.rst:475
msgid "This document has been placed into the public domain."
msgstr ""

#~ msgid "Nick Coghlan <ncoghlan@gmail.com>"
#~ msgstr ""

#~ msgid ""
#~ "This PEP was accepted, and the "
#~ "defined wheel version updated to 1.0,"
#~ " by Nick Coghlan on 16th February,"
#~ " 2013 [1]_"
#~ msgstr ""

