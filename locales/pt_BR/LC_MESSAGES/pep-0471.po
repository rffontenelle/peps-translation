# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0471.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0471.rst:5
msgid "Ben Hoyt <benhoyt@gmail.com>"
msgstr ""

#: ../../peps/pep-0471.rst
msgid "BDFL-Delegate"
msgstr ""

#: ../../peps/pep-0471.rst:6
msgid "Victor Stinner <vstinner@python.org>"
msgstr ""

#: ../../peps/pep-0471.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0471.rst:7
msgid "Final"
msgstr ""

#: ../../peps/pep-0471.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0471.rst:8
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0471.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0471.rst:10
msgid "30-May-2014"
msgstr ""

#: ../../peps/pep-0471.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-0471.rst:11
msgid "3.5"
msgstr ""

#: ../../peps/pep-0471.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0471.rst:12
msgid "27-Jun-2014, 08-Jul-2014, 14-Jul-2014"
msgstr ""

#: ../../peps/pep-0471.rst:16
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0471.rst:18
msgid ""
"This PEP proposes including a new directory iteration function, "
"``os.scandir()``, in the standard library. This new function adds useful "
"functionality and increases the speed of ``os.walk()`` by 2-20 times "
"(depending on the platform and file system) by avoiding calls to "
"``os.stat()`` in most cases."
msgstr ""

#: ../../peps/pep-0471.rst:26
msgid "Rationale"
msgstr ""

#: ../../peps/pep-0471.rst:28
msgid ""
"Python's built-in ``os.walk()`` is significantly slower than it needs to "
"be, because -- in addition to calling ``os.listdir()`` on each directory "
"-- it executes the ``stat()`` system call or ``GetFileAttributes()`` on "
"each file to determine whether the entry is a directory or not."
msgstr ""

#: ../../peps/pep-0471.rst:34
msgid ""
"But the underlying system calls -- ``FindFirstFile`` / ``FindNextFile`` "
"on Windows and ``readdir`` on POSIX systems -- already tell you whether "
"the files returned are directories or not, so no further system calls are"
" needed. Further, the Windows system calls return all the information for"
" a ``stat_result`` object on the directory entry, such as file size and "
"last modification time."
msgstr ""

#: ../../peps/pep-0471.rst:41
msgid ""
"In short, you can reduce the number of system calls required for a tree "
"function like ``os.walk()`` from approximately 2N to N, where N is the "
"total number of files and directories in the tree. (And because directory"
" trees are usually wider than they are deep, it's often much better than "
"this.)"
msgstr ""

#: ../../peps/pep-0471.rst:47
msgid ""
"In practice, removing all those extra system calls makes ``os.walk()`` "
"about **8-9 times as fast on Windows**, and about **2-3 times as fast on "
"POSIX systems**. So we're not talking about micro-optimizations. See more"
" `benchmarks here`_."
msgstr ""

#: ../../peps/pep-0471.rst:54
msgid ""
"Somewhat relatedly, many people (see Python `Issue 11406`_) are also keen"
" on a version of ``os.listdir()`` that yields filenames as it iterates "
"instead of returning them as one big list. This improves memory "
"efficiency for iterating very large directories."
msgstr ""

#: ../../peps/pep-0471.rst:59
msgid ""
"So, as well as providing a ``scandir()`` iterator function for calling "
"directly, Python's existing ``os.walk()`` function can be sped up a huge "
"amount."
msgstr ""

#: ../../peps/pep-0471.rst:67
msgid "Implementation"
msgstr ""

#: ../../peps/pep-0471.rst:69
msgid ""
"The implementation of this proposal was written by Ben Hoyt (initial "
"version) and Tim Golden (who helped a lot with the C extension module). "
"It lives on GitHub at `benhoyt/scandir`_. (The implementation may lag "
"behind the updates to this PEP a little.)"
msgstr ""

#: ../../peps/pep-0471.rst:76
msgid ""
"Note that this module has been used and tested (see \"Use in the wild\" "
"section in this PEP), so it's more than a proof-of-concept. However, it "
"is marked as beta software and is not extensively battle-tested. It will "
"need some cleanup and more thorough testing before going into the "
"standard library, as well as integration into ``posixmodule.c``."
msgstr ""

#: ../../peps/pep-0471.rst:85
msgid "Specifics of proposal"
msgstr ""

#: ../../peps/pep-0471.rst:88
msgid "os.scandir()"
msgstr ""

#: ../../peps/pep-0471.rst:90
msgid ""
"Specifically, this PEP proposes adding a single function to the ``os`` "
"module in the standard library, ``scandir``, that takes a single, "
"optional string as its argument::"
msgstr ""

#: ../../peps/pep-0471.rst:96
msgid ""
"Like ``listdir``, ``scandir`` calls the operating system's directory "
"iteration system calls to get the names of the files in the given "
"``path``, but it's different from ``listdir`` in two ways:"
msgstr ""

#: ../../peps/pep-0471.rst:100
msgid ""
"Instead of returning bare filename strings, it returns lightweight "
"``DirEntry`` objects that hold the filename string and provide simple "
"methods that allow access to the additional data the operating system may"
" have returned."
msgstr ""

#: ../../peps/pep-0471.rst:105
msgid ""
"It returns a generator instead of a list, so that ``scandir`` acts as a "
"true iterator instead of returning the full list immediately."
msgstr ""

#: ../../peps/pep-0471.rst:108
msgid ""
"``scandir()`` yields a ``DirEntry`` object for each file and sub-"
"directory in ``path``. Just like ``listdir``, the ``'.'`` and ``'..'`` "
"pseudo-directories are skipped, and the entries are yielded in system-"
"dependent order. Each ``DirEntry`` object has the following attributes "
"and methods:"
msgstr ""

#: ../../peps/pep-0471.rst:114
msgid ""
"``name``: the entry's filename, relative to the scandir ``path`` argument"
" (corresponds to the return values of ``os.listdir``)"
msgstr ""

#: ../../peps/pep-0471.rst:117
msgid ""
"``path``: the entry's full path name (not necessarily an absolute path) "
"-- the equivalent of ``os.path.join(scandir_path, entry.name)``"
msgstr ""

#: ../../peps/pep-0471.rst:121
msgid ""
"``inode()``: return the inode number of the entry. The result is cached "
"on the ``DirEntry`` object, use ``os.stat(entry.path, "
"follow_symlinks=False).st_ino`` to fetch up-to-date information. On Unix,"
" no system call is required."
msgstr ""

#: ../../peps/pep-0471.rst:126
msgid ""
"``is_dir(*, follow_symlinks=True)``: similar to "
"``pathlib.Path.is_dir()``, but the return value is cached on the "
"``DirEntry`` object; doesn't require a system call in most cases; don't "
"follow symbolic links if ``follow_symlinks`` is False"
msgstr ""

#: ../../peps/pep-0471.rst:131
msgid ""
"``is_file(*, follow_symlinks=True)``: similar to "
"``pathlib.Path.is_file()``, but the return value is cached on the "
"``DirEntry`` object; doesn't require a system call in most cases; don't "
"follow symbolic links if ``follow_symlinks`` is False"
msgstr ""

#: ../../peps/pep-0471.rst:136
msgid ""
"``is_symlink()``: similar to ``pathlib.Path.is_symlink()``, but the "
"return value is cached on the ``DirEntry`` object; doesn't require a "
"system call in most cases"
msgstr ""

#: ../../peps/pep-0471.rst:140
msgid ""
"``stat(*, follow_symlinks=True)``: like ``os.stat()``, but the return "
"value is cached on the ``DirEntry`` object; does not require a system "
"call on Windows (except for symlinks); don't follow symbolic links (like "
"``os.lstat()``) if ``follow_symlinks`` is False"
msgstr ""

#: ../../peps/pep-0471.rst:145
msgid ""
"All *methods* may perform system calls in some cases and therefore "
"possibly raise ``OSError`` -- see the \"Notes on exception handling\" "
"section for more details."
msgstr ""

#: ../../peps/pep-0471.rst:149
msgid ""
"The ``DirEntry`` attribute and method names were chosen to be the same as"
" those in the new ``pathlib`` module where possible, for consistency. The"
" only difference in functionality is that the ``DirEntry`` methods cache "
"their values on the entry object after the first call."
msgstr ""

#: ../../peps/pep-0471.rst:155
msgid ""
"Like the other functions in the ``os`` module, ``scandir()`` accepts "
"either a bytes or str object for the ``path`` parameter, and returns the "
"``DirEntry.name`` and ``DirEntry.path`` attributes with the same type as "
"``path``. However, it is *strongly recommended* to use the str type, as "
"this ensures cross-platform support for Unicode filenames. (On Windows, "
"bytes filenames have been deprecated since Python 3.3)."
msgstr ""

#: ../../peps/pep-0471.rst:164
msgid "os.walk()"
msgstr ""

#: ../../peps/pep-0471.rst:166
msgid ""
"As part of this proposal, ``os.walk()`` will also be modified to use "
"``scandir()`` rather than ``listdir()`` and ``os.path.isdir()``. This "
"will increase the speed of ``os.walk()`` very significantly (as mentioned"
" above, by 2-20 times, depending on the system)."
msgstr ""

#: ../../peps/pep-0471.rst:173
msgid "Examples"
msgstr ""

#: ../../peps/pep-0471.rst:175
msgid ""
"First, a very simple example of ``scandir()`` showing use of the "
"``DirEntry.name`` attribute and the ``DirEntry.is_dir()`` method::"
msgstr ""

#: ../../peps/pep-0471.rst:184
msgid ""
"This ``subdirs()`` function will be significantly faster with scandir "
"than ``os.listdir()`` and ``os.path.isdir()`` on both Windows and POSIX "
"systems, especially on medium-sized or large directories."
msgstr ""

#: ../../peps/pep-0471.rst:188
msgid ""
"Or, for getting the total size of files in a directory tree, showing use "
"of the ``DirEntry.stat()`` method and ``DirEntry.path`` attribute::"
msgstr ""

#: ../../peps/pep-0471.rst:202
msgid ""
"This also shows the use of the ``follow_symlinks`` parameter to "
"``is_dir()`` -- in a recursive function like this, we probably don't want"
" to follow links. (To properly follow links in a recursive function like "
"this we'd want special handling for the case where following a symlink "
"leads to a recursive loop.)"
msgstr ""

#: ../../peps/pep-0471.rst:208
msgid ""
"Note that ``get_tree_size()`` will get a huge speed boost on Windows, "
"because no extra stat call are needed, but on POSIX systems the size "
"information is not returned by the directory iteration functions, so this"
" function won't gain anything there."
msgstr ""

#: ../../peps/pep-0471.rst:215
msgid "Notes on caching"
msgstr ""

#: ../../peps/pep-0471.rst:217
msgid ""
"The ``DirEntry`` objects are relatively dumb -- the ``name`` and ``path``"
" attributes are obviously always cached, and the ``is_X`` and ``stat`` "
"methods cache their values (immediately on Windows via ``FindNextFile``, "
"and on first use on POSIX systems via a ``stat`` system call) and never "
"refetch from the system."
msgstr ""

#: ../../peps/pep-0471.rst:223
msgid ""
"For this reason, ``DirEntry`` objects are intended to be used and thrown "
"away after iteration, not stored in long-lived data structured and the "
"methods called again and again."
msgstr ""

#: ../../peps/pep-0471.rst:227
msgid ""
"If developers want \"refresh\" behaviour (for example, for watching a "
"file's size change), they can simply use ``pathlib.Path`` objects, or "
"call the regular ``os.stat()`` or ``os.path.getsize()`` functions which "
"get fresh data from the operating system every call."
msgstr ""

#: ../../peps/pep-0471.rst:234
msgid "Notes on exception handling"
msgstr ""

#: ../../peps/pep-0471.rst:236
msgid ""
"``DirEntry.is_X()`` and ``DirEntry.stat()`` are explicitly methods rather"
" than attributes or properties, to make it clear that they may not be "
"cheap operations (although they often are), and they may do a system "
"call. As a result, these methods may raise ``OSError``."
msgstr ""

#: ../../peps/pep-0471.rst:241
msgid ""
"For example, ``DirEntry.stat()`` will always make a system call on POSIX-"
"based systems, and the ``DirEntry.is_X()`` methods will make a ``stat()``"
" system call on such systems if ``readdir()`` does not support ``d_type``"
" or returns a ``d_type`` with a value of ``DT_UNKNOWN``, which can occur "
"under certain conditions or on certain file systems."
msgstr ""

#: ../../peps/pep-0471.rst:248
msgid ""
"Often this does not matter -- for example, ``os.walk()`` as defined in "
"the standard library only catches errors around the ``listdir()`` calls."
msgstr ""

#: ../../peps/pep-0471.rst:252
msgid ""
"Also, because the exception-raising behaviour of the ``DirEntry.is_X`` "
"methods matches that of ``pathlib`` -- which only raises ``OSError`` in "
"the case of permissions or other fatal errors, but returns False if the "
"path doesn't exist or is a broken symlink -- it's often not necessary to "
"catch errors around the ``is_X()`` calls."
msgstr ""

#: ../../peps/pep-0471.rst:258
msgid ""
"However, when a user requires fine-grained error handling, it may be "
"desirable to catch ``OSError`` around all method calls and handle as "
"appropriate."
msgstr ""

#: ../../peps/pep-0471.rst:262
msgid ""
"For example, below is a version of the ``get_tree_size()`` example shown "
"above, but with fine-grained error handling added::"
msgstr ""

#: ../../peps/pep-0471.rst:288
msgid "Support"
msgstr ""

#: ../../peps/pep-0471.rst:290
msgid ""
"The scandir module on GitHub has been forked and used quite a bit (see "
"\"Use in the wild\" in this PEP), but there's also been a fair bit of "
"direct support for a scandir-like function from core developers and "
"others on the python-dev and python-ideas mailing lists. A sampling:"
msgstr ""

#: ../../peps/pep-0471.rst:295
msgid ""
"**python-dev**: a good number of +1's and very few negatives for scandir "
"and :pep:`471` on `this June 2014 python-dev thread "
"<https://mail.python.org/pipermail/python-dev/2014-June/135217.html>`_"
msgstr ""

#: ../../peps/pep-0471.rst:299
msgid ""
"**Alyssa Coghlan**, a core Python developer: \"I've had the local Red Hat"
" release engineering team express their displeasure at having to stat "
"every file in a network mounted directory tree for info that is present "
"in the dirent structure, so a definite +1 to os.scandir from me, so long "
"as it makes that info available.\" [`source1 "
"<http://bugs.python.org/issue11406>`_]"
msgstr ""

#: ../../peps/pep-0471.rst:306
msgid ""
"**Tim Golden**, a core Python developer, supports scandir enough to have "
"spent time refactoring and significantly improving scandir's C extension "
"module. [`source2 <https://github.com/tjguk/scandir>`_]"
msgstr ""

#: ../../peps/pep-0471.rst:311
msgid ""
"**Christian Heimes**, a core Python developer: \"+1 for something like "
"yielddir()\" [`source3 <https://mail.python.org/pipermail/python-"
"ideas/2012-November/017772.html>`_] and \"Indeed! I'd like to see the "
"feature in 3.4 so I can remove my own hack from our code base.\" "
"[`source4 <http://bugs.python.org/issue11406>`_]"
msgstr ""

#: ../../peps/pep-0471.rst:318
msgid ""
"**Gregory P. Smith**, a core Python developer: \"As 3.4beta1 happens "
"tonight, this isn't going to make 3.4 so i'm bumping this to 3.5. I "
"really like the proposed design outlined above.\" [`source5 "
"<http://bugs.python.org/issue11406>`_]"
msgstr ""

#: ../../peps/pep-0471.rst:323
msgid ""
"**Guido van Rossum** on the possibility of adding scandir to Python 3.5 "
"(as it was too late for 3.4): \"The ship has likewise sailed for adding "
"scandir() (whether to os or pathlib). By all means experiment and get it "
"ready for consideration for 3.5, but I don't want to add it to 3.4.\" "
"[`source6 <https://mail.python.org/pipermail/python-"
"dev/2013-November/130583.html>`_]"
msgstr ""

#: ../../peps/pep-0471.rst:330
msgid ""
"Support for this PEP itself (meta-support?) was given by Alyssa (Nick) "
"Coghlan on python-dev: \"A PEP reviewing all this for 3.5 and proposing a"
" specific os.scandir API would be a good thing.\" [`source7 "
"<https://mail.python.org/pipermail/python-"
"dev/2013-November/130588.html>`_]"
msgstr ""

#: ../../peps/pep-0471.rst:337
msgid "Use in the wild"
msgstr ""

#: ../../peps/pep-0471.rst:339
msgid ""
"To date, the ``scandir`` implementation is definitely useful, but has "
"been clearly marked \"beta\", so it's uncertain how much use of it there "
"is in the wild. Ben Hoyt has had several reports from people using it. "
"For example:"
msgstr ""

#: ../../peps/pep-0471.rst:344
msgid ""
"Chris F: \"I am processing some pretty large directories and was half "
"expecting to have to modify getdents. So thanks for saving me the "
"effort.\" [via personal email]"
msgstr ""

#: ../../peps/pep-0471.rst:348
msgid ""
"bschollnick: \"I wanted to let you know about this, since I am using "
"Scandir as a building block for this code. Here's a good example of "
"scandir making a radical performance improvement over os.listdir.\" "
"[`source8 <https://github.com/benhoyt/scandir/issues/19>`_]"
msgstr ""

#: ../../peps/pep-0471.rst:353
msgid ""
"Avram L: \"I'm testing our scandir for a project I'm working on. Seems "
"pretty solid, so first thing, just want to say nice work!\" [via personal"
" email]"
msgstr ""

#: ../../peps/pep-0471.rst:357
msgid ""
"Matt Z: \"I used scandir to dump the contents of a network dir in under "
"15 seconds. 13 root dirs, 60,000 files in the structure. This will "
"replace some old VBA code embedded in a spreadsheet that was taking 15-20"
" minutes to do the exact same thing.\" [via personal email]"
msgstr ""

#: ../../peps/pep-0471.rst:363
msgid ""
"Others have `requested a PyPI package`_ for it, which has been created. "
"See `PyPI package`_."
msgstr ""

#: ../../peps/pep-0471.rst:369
msgid ""
"GitHub stats don't mean too much, but scandir does have several watchers,"
" issues, forks, etc. Here's the run-down as of the stats as of July 7, "
"2014:"
msgstr ""

#: ../../peps/pep-0471.rst:373
msgid "Watchers: 17"
msgstr ""

#: ../../peps/pep-0471.rst:374
msgid "Stars: 57"
msgstr ""

#: ../../peps/pep-0471.rst:375
msgid "Forks: 20"
msgstr ""

#: ../../peps/pep-0471.rst:376
msgid "Issues: 4 open, 26 closed"
msgstr ""

#: ../../peps/pep-0471.rst:378
msgid ""
"Also, because this PEP will increase the speed of ``os.walk()`` "
"significantly, there are thousands of developers and scripts, and a lot "
"of production code, that would benefit from it. For example, on GitHub, "
"there are almost as many uses of ``os.walk`` (194,000) as there are of "
"``os.mkdir`` (230,000)."
msgstr ""

#: ../../peps/pep-0471.rst:386
msgid "Rejected ideas"
msgstr ""

#: ../../peps/pep-0471.rst:390
msgid "Naming"
msgstr ""

#: ../../peps/pep-0471.rst:392
msgid ""
"The only other real contender for this function's name was ``iterdir()``."
" However, ``iterX()`` functions in Python (mostly found in Python 2) tend"
" to be simple iterator equivalents of their non-iterator counterparts. "
"For example, ``dict.iterkeys()`` is just an iterator version of "
"``dict.keys()``, but the objects returned are identical. In "
"``scandir()``'s case, however, the return values are quite different "
"objects (``DirEntry`` objects vs filename strings), so this should "
"probably be reflected by a difference in name -- hence ``scandir()``."
msgstr ""

#: ../../peps/pep-0471.rst:402
msgid ""
"See some `relevant discussion on python-dev "
"<https://mail.python.org/pipermail/python-dev/2014-June/135228.html>`_."
msgstr ""

#: ../../peps/pep-0471.rst:407
msgid "Wildcard support"
msgstr ""

#: ../../peps/pep-0471.rst:409
msgid ""
"``FindFirstFile``/``FindNextFile`` on Windows support passing a "
"\"wildcard\" like ``*.jpg``, so at first folks (this PEP's author "
"included) felt it would be a good idea to include a ``windows_wildcard`` "
"keyword argument to the ``scandir`` function so users could pass this in."
msgstr ""

#: ../../peps/pep-0471.rst:415
msgid ""
"However, on further thought and discussion it was decided that this would"
" be bad idea, *unless it could be made cross-platform* (a ``pattern`` "
"keyword argument or similar). This seems easy enough at first -- just use"
" the OS wildcard support on Windows, and something like ``fnmatch`` or "
"``re`` afterwards on POSIX-based systems."
msgstr ""

#: ../../peps/pep-0471.rst:421
msgid ""
"Unfortunately the exact Windows wildcard matching rules aren't really "
"documented anywhere by Microsoft, and they're quite quirky (see this "
"`blog post "
"<http://blogs.msdn.com/b/oldnewthing/archive/2007/12/17/6785519.aspx>`_),"
" meaning it's very problematic to emulate using ``fnmatch`` or regexes."
msgstr ""

#: ../../peps/pep-0471.rst:427
msgid ""
"So the consensus was that Windows wildcard support was a bad idea. It "
"would be possible to add at a later date if there's a cross-platform way "
"to achieve it, but not for the initial version."
msgstr ""

#: ../../peps/pep-0471.rst:431
msgid ""
"Read more on the `this Nov 2012 python-ideas thread "
"<https://mail.python.org/pipermail/python-"
"ideas/2012-November/017770.html>`_ and this `June 2014 python-dev thread "
"on PEP 471 <https://mail.python.org/pipermail/python-"
"dev/2014-June/135217.html>`_."
msgstr ""

#: ../../peps/pep-0471.rst:438
msgid "Methods not following symlinks by default"
msgstr ""

#: ../../peps/pep-0471.rst:440
msgid ""
"There was much debate on python-dev (see messages in `this thread "
"<https://mail.python.org/pipermail/python-dev/2014-July/135485.html>`_) "
"over whether the ``DirEntry`` methods should follow symbolic links or not"
" (when the ``is_X()`` methods had no ``follow_symlinks`` parameter)."
msgstr ""

#: ../../peps/pep-0471.rst:445
msgid ""
"Initially they did not (see previous versions of this PEP and the "
"scandir.py module), but Victor Stinner made a pretty compelling case on "
"python-dev that following symlinks by default is a better idea, because:"
msgstr ""

#: ../../peps/pep-0471.rst:449
#, python-format
msgid ""
"following links is usually what you want (in 92% of cases in the standard"
" library, functions using ``os.listdir()`` and ``os.path.isdir()`` do "
"follow symlinks)"
msgstr ""

#: ../../peps/pep-0471.rst:453
msgid ""
"that's the precedent set by the similar functions ``os.path.isdir()`` and"
" ``pathlib.Path.is_dir()``, so to do otherwise would be confusing"
msgstr ""

#: ../../peps/pep-0471.rst:457
msgid ""
"with the non-link-following approach, if you wanted to follow links you'd"
" have to say something like ``if (entry.is_symlink() and "
"os.path.isdir(entry.path)) or entry.is_dir()``, which is clumsy"
msgstr ""

#: ../../peps/pep-0471.rst:461
msgid ""
"As a case in point that shows the non-symlink-following version is error "
"prone, this PEP's author had a bug caused by getting this exact test "
"wrong in his initial implementation of ``scandir.walk()`` in scandir.py "
"(see `Issue #4 here <https://github.com/benhoyt/scandir/issues/4>`_)."
msgstr ""

#: ../../peps/pep-0471.rst:467
msgid ""
"In the end there was not total agreement that the methods should follow "
"symlinks, but there was basic consensus among the most involved "
"participants, and this PEP's author believes that the above case is "
"strong enough to warrant following symlinks by default."
msgstr ""

#: ../../peps/pep-0471.rst:472
msgid ""
"In addition, it's straightforward to call the relevant methods with "
"``follow_symlinks=False`` if the other behaviour is desired."
msgstr ""

#: ../../peps/pep-0471.rst:477
msgid "DirEntry attributes being properties"
msgstr ""

#: ../../peps/pep-0471.rst:479
msgid ""
"In some ways it would be nicer for the ``DirEntry`` ``is_X()`` and "
"``stat()`` to be properties instead of methods, to indicate they're very "
"cheap or free. However, this isn't quite the case, as ``stat()`` will "
"require an OS call on POSIX-based systems but not on Windows. Even "
"``is_dir()`` and friends may perform an OS call on POSIX-based systems if"
" the ``dirent.d_type`` value is ``DT_UNKNOWN`` (on certain file systems)."
msgstr ""

#: ../../peps/pep-0471.rst:487
msgid ""
"Also, people would expect the attribute access ``entry.is_dir`` to only "
"ever raise ``AttributeError``, not ``OSError`` in the case it makes a "
"system call under the covers. Calling code would have to have a "
"``try``/``except`` around what looks like a simple attribute access, and "
"so it's much better to make them *methods*."
msgstr ""

#: ../../peps/pep-0471.rst:493
msgid ""
"See `this May 2013 python-dev thread <https://mail.python.org/pipermail"
"/python-dev/2013-May/126184.html>`_ where this PEP author makes this case"
" and there's agreement from a core developers."
msgstr ""

#: ../../peps/pep-0471.rst:500
msgid "DirEntry fields being \"static\" attribute-only objects"
msgstr ""

#: ../../peps/pep-0471.rst:502
msgid ""
"In `this July 2014 python-dev message <https://mail.python.org/pipermail"
"/python-dev/2014-July/135303.html>`_, Paul Moore suggested a solution "
"that was a \"thin wrapper round the OS feature\", where the ``DirEntry`` "
"object had only static attributes: ``name``, ``path``, and ``is_X``, with"
" the ``st_X`` attributes only present on Windows. The idea was to use "
"this simpler, lower-level function as a building block for higher-level "
"functions."
msgstr ""

#: ../../peps/pep-0471.rst:510
msgid ""
"At first there was general agreement that simplifying in this way was a "
"good thing. However, there were two problems with this approach. First, "
"the assumption is the ``is_dir`` and similar attributes are always "
"present on POSIX, which isn't the case (if ``d_type`` is not present or "
"is ``DT_UNKNOWN``). Second, it's a much harder-to-use API in practice, as"
" even the ``is_dir`` attributes aren't always present on POSIX, and would"
" need to be tested with ``hasattr()`` and then ``os.stat()`` called if "
"they weren't present."
msgstr ""

#: ../../peps/pep-0471.rst:519
msgid ""
"See `this July 2014 python-dev response "
"<https://mail.python.org/pipermail/python-dev/2014-July/135312.html>`_ "
"from this PEP's author detailing why this option is a non-ideal solution,"
" and the subsequent reply from Paul Moore voicing agreement."
msgstr ""

#: ../../peps/pep-0471.rst:526
msgid "DirEntry fields being static with an ensure_lstat option"
msgstr ""

#: ../../peps/pep-0471.rst:528
msgid ""
"Another seemingly simpler and attractive option was suggested by Alyssa "
"Coghlan in this `June 2014 python-dev message "
"<https://mail.python.org/pipermail/python-dev/2014-June/135261.html>`_: "
"make ``DirEntry.is_X`` and ``DirEntry.lstat_result`` properties, and "
"populate ``DirEntry.lstat_result`` at iteration time, but only if the new"
" argument ``ensure_lstat=True`` was specified on the ``scandir()`` call."
msgstr ""

#: ../../peps/pep-0471.rst:536
msgid ""
"This does have the advantage over the above in that you can easily get "
"the stat result from ``scandir()`` if you need it. However, it has the "
"serious disadvantage that fine-grained error handling is messy, because "
"``stat()`` will be called (and hence potentially raise ``OSError``) "
"during iteration, leading to a rather ugly, hand-made iteration loop::"
msgstr ""

#: ../../peps/pep-0471.rst:552
msgid ""
"Or it means that ``scandir()`` would have to accept an ``onerror`` "
"argument -- a function to call when ``stat()`` errors occur during "
"iteration. This seems to this PEP's author neither as direct nor as "
"Pythonic as ``try``/``except`` around a ``DirEntry.stat()`` call."
msgstr ""

#: ../../peps/pep-0471.rst:557
msgid ""
"Another drawback is that ``os.scandir()`` is written to make code faster."
" Always calling ``os.lstat()`` on POSIX would not bring any speedup. In "
"most cases, you don't need the full ``stat_result`` object -- the "
"``is_X()`` methods are enough and this information is already known."
msgstr ""

#: ../../peps/pep-0471.rst:562
msgid ""
"See `Ben Hoyt's July 2014 reply <https://mail.python.org/pipermail"
"/python-dev/2014-July/135312.html>`_ to the discussion summarizing this "
"and detailing why he thinks the original :pep:`471` proposal is \"the "
"right one\" after all."
msgstr ""

#: ../../peps/pep-0471.rst:569
msgid "Return values being (name, stat_result) two-tuples"
msgstr ""

#: ../../peps/pep-0471.rst:571
msgid ""
"Initially this PEP's author proposed this concept as a function called "
"``iterdir_stat()`` which yielded two-tuples of (name, stat_result). This "
"does have the advantage that there are no new types introduced. However, "
"the ``stat_result`` is only partially filled on POSIX-based systems (most"
" fields set to ``None`` and other quirks), so they're not really "
"``stat_result`` objects at all, and this would have to be thoroughly "
"documented as different from ``os.stat()``."
msgstr ""

#: ../../peps/pep-0471.rst:579
msgid ""
"Also, Python has good support for proper objects with attributes and "
"methods, which makes for a saner and simpler API than two-tuples. It also"
" makes the ``DirEntry`` objects more extensible and future-proof as "
"operating systems add functionality and we want to include this in "
"``DirEntry``."
msgstr ""

#: ../../peps/pep-0471.rst:585
msgid "See also some previous discussion:"
msgstr ""

#: ../../peps/pep-0471.rst:587
msgid ""
"`May 2013 python-dev thread <https://mail.python.org/pipermail/python-"
"dev/2013-May/126148.html>`_ where Alyssa Coghlan makes the original case "
"for a ``DirEntry``-style object."
msgstr ""

#: ../../peps/pep-0471.rst:592
msgid ""
"`June 2014 python-dev thread <https://mail.python.org/pipermail/python-"
"dev/2014-June/135244.html>`_ where Alyssa Coghlan makes (another) good "
"case against the two-tuple approach."
msgstr ""

#: ../../peps/pep-0471.rst:599
msgid "Return values being overloaded stat_result objects"
msgstr ""

#: ../../peps/pep-0471.rst:601
msgid ""
"Another alternative discussed was making the return values to be "
"overloaded ``stat_result`` objects with ``name`` and ``path`` attributes."
" However, apart from this being a strange (and strained!) kind of "
"overloading, this has the same problems mentioned above -- most of the "
"``stat_result`` information is not fetched by ``readdir()`` on POSIX "
"systems, only (part of) the ``st_mode`` value."
msgstr ""

#: ../../peps/pep-0471.rst:610
msgid "Return values being pathlib.Path objects"
msgstr ""

#: ../../peps/pep-0471.rst:612
msgid ""
"With Antoine Pitrou's new standard library ``pathlib`` module, it at "
"first seems like a great idea for ``scandir()`` to return instances of "
"``pathlib.Path``. However, ``pathlib.Path``'s ``is_X()`` and ``stat()`` "
"functions are explicitly not cached, whereas ``scandir`` has to cache "
"them by design, because it's (often) returning values from the original "
"directory iteration system call."
msgstr ""

#: ../../peps/pep-0471.rst:619
msgid ""
"And if the ``pathlib.Path`` instances returned by ``scandir`` cached stat"
" values, but the ordinary ``pathlib.Path`` objects explicitly don't, that"
" would be more than a little confusing."
msgstr ""

#: ../../peps/pep-0471.rst:623
msgid ""
"Guido van Rossum explicitly rejected ``pathlib.Path`` caching stat in the"
" context of scandir `here <https://mail.python.org/pipermail/python-"
"dev/2013-November/130583.html>`_, making ``pathlib.Path`` objects a bad "
"choice for scandir return values."
msgstr ""

#: ../../peps/pep-0471.rst:631
msgid "Possible improvements"
msgstr ""

#: ../../peps/pep-0471.rst:633
msgid ""
"There are many possible improvements one could make to scandir, but here "
"is a short list of some this PEP's author has in mind:"
msgstr ""

#: ../../peps/pep-0471.rst:636
msgid ""
"scandir could potentially be further sped up by calling ``readdir`` / "
"``FindNextFile`` say 50 times per ``Py_BEGIN_ALLOW_THREADS`` block so "
"that it stays in the C extension module for longer, and may be somewhat "
"faster as a result. This approach hasn't been tested, but was suggested "
"by on Issue 11406 by Antoine Pitrou. [`source9 "
"<http://bugs.python.org/msg130125>`_]"
msgstr ""

#: ../../peps/pep-0471.rst:643
msgid ""
"scandir could use a free list to avoid the cost of memory allocation for "
"each iteration -- a short free list of 10 or maybe even 1 may help. "
"Suggested by Victor Stinner on a `python-dev thread on June 27`_."
msgstr ""

#: ../../peps/pep-0471.rst:651
msgid "Previous discussion"
msgstr ""

#: ../../peps/pep-0471.rst:653
msgid ""
"`Original November 2012 thread Ben Hoyt started on python-ideas "
"<https://mail.python.org/pipermail/python-"
"ideas/2012-November/017770.html>`_ about speeding up ``os.walk()``"
msgstr ""

#: ../../peps/pep-0471.rst:657
msgid ""
"Python `Issue 11406`_, which includes the original proposal for a "
"scandir-like function"
msgstr ""

#: ../../peps/pep-0471.rst:660
msgid ""
"`Further May 2013 thread Ben Hoyt started on python-dev "
"<https://mail.python.org/pipermail/python-dev/2013-May/126119.html>`_ "
"that refined the ``scandir()`` API, including Alyssa Coghlan's suggestion"
" of scandir yielding ``DirEntry``-like objects"
msgstr ""

#: ../../peps/pep-0471.rst:665
msgid ""
"`November 2013 thread Ben Hoyt started on python-dev "
"<https://mail.python.org/pipermail/python-"
"dev/2013-November/130572.html>`_ to discuss the interaction between "
"scandir and the new ``pathlib`` module"
msgstr ""

#: ../../peps/pep-0471.rst:670
msgid ""
"`June 2014 thread Ben Hoyt started on python-dev "
"<https://mail.python.org/pipermail/python-dev/2014-June/135215.html>`_ to"
" discuss the first version of this PEP, with extensive discussion about "
"the API"
msgstr ""

#: ../../peps/pep-0471.rst:675
msgid ""
"`First July 2014 thread Ben Hoyt started on python-dev "
"<https://mail.python.org/pipermail/python-dev/2014-July/135377.html>`_ to"
" discuss his updates to :pep:`471`"
msgstr ""

#: ../../peps/pep-0471.rst:679
msgid ""
"`Second July 2014 thread Ben Hoyt started on python-dev "
"<https://mail.python.org/pipermail/python-dev/2014-July/135485.html>`_ to"
" discuss the remaining decisions needed to finalize :pep:`471`, "
"specifically whether the ``DirEntry`` methods should follow symlinks by "
"default"
msgstr ""

#: ../../peps/pep-0471.rst:685
msgid ""
"`Question on StackOverflow <http://stackoverflow.com/questions/2485719"
"/very-quickly-getting-total-size-of-folder>`_ about why ``os.walk()`` is "
"slow and pointers on how to fix it (this inspired the author of this PEP "
"early on)"
msgstr ""

#: ../../peps/pep-0471.rst:690
msgid ""
"`BetterWalk <https://github.com/benhoyt/betterwalk>`_, this PEP's "
"author's previous attempt at this, on which the scandir code is based"
msgstr ""

#: ../../peps/pep-0471.rst:695
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0471.rst:697
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid ""
#~ "In practice, removing all those extra"
#~ " system calls makes ``os.walk()`` about "
#~ "**8-9 times as fast on Windows**, "
#~ "and about **2-3 times as fast on"
#~ " POSIX systems**. So we're not "
#~ "talking about micro- optimizations. See "
#~ "more `benchmarks here`_."
#~ msgstr ""

#~ msgid ""
#~ "**Nick Coghlan**, a core Python "
#~ "developer: \"I've had the local Red "
#~ "Hat release engineering team express "
#~ "their displeasure at having to stat "
#~ "every file in a network mounted "
#~ "directory tree for info that is "
#~ "present in the dirent structure, so "
#~ "a definite +1 to os.scandir from "
#~ "me, so long as it makes that "
#~ "info available.\" [`source1 "
#~ "<http://bugs.python.org/issue11406>`_]"
#~ msgstr ""

#~ msgid ""
#~ "Support for this PEP itself (meta-"
#~ "support?) was given by Nick Coghlan "
#~ "on python-dev: \"A PEP reviewing "
#~ "all this for 3.5 and proposing a"
#~ " specific os.scandir API would be a"
#~ " good thing.\" [`source7 "
#~ "<https://mail.python.org/pipermail/python-"
#~ "dev/2013-November/130588.html>`_]"
#~ msgstr ""

#~ msgid ""
#~ "Another seemingly simpler and attractive "
#~ "option was suggested by Nick Coghlan "
#~ "in this `June 2014 python-dev "
#~ "message <https://mail.python.org/pipermail/python-"
#~ "dev/2014-June/135261.html>`_: make ``DirEntry.is_X`` "
#~ "and ``DirEntry.lstat_result`` properties, and "
#~ "populate ``DirEntry.lstat_result`` at iteration "
#~ "time, but only if the new argument"
#~ " ``ensure_lstat=True`` was specified on the"
#~ " ``scandir()`` call."
#~ msgstr ""

#~ msgid ""
#~ "`May 2013 python-dev thread "
#~ "<https://mail.python.org/pipermail/python-"
#~ "dev/2013-May/126148.html>`_ where Nick Coghlan "
#~ "makes the original case for a "
#~ "``DirEntry``-style object."
#~ msgstr ""

#~ msgid ""
#~ "`June 2014 python-dev thread "
#~ "<https://mail.python.org/pipermail/python-"
#~ "dev/2014-June/135244.html>`_ where Nick Coghlan "
#~ "makes (another) good case against the"
#~ " two-tuple approach."
#~ msgstr ""

#~ msgid ""
#~ "`Further May 2013 thread Ben Hoyt "
#~ "started on python-dev "
#~ "<https://mail.python.org/pipermail/python-"
#~ "dev/2013-May/126119.html>`_ that refined the "
#~ "``scandir()`` API, including Nick Coghlan's"
#~ " suggestion of scandir yielding "
#~ "``DirEntry``-like objects"
#~ msgstr ""

