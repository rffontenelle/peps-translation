# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0411.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0411.rst:5
msgid "Alyssa Coghlan <ncoghlan@gmail.com>, Eli Bendersky <eliben@gmail.com>"
msgstr ""

#: ../../peps/pep-0411.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0411.rst:7
msgid "Superseded"
msgstr ""

#: ../../peps/pep-0411.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0411.rst:8
msgid "Informational"
msgstr ""

#: ../../peps/pep-0411.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0411.rst:10
msgid "10-Feb-2012"
msgstr ""

#: ../../peps/pep-0411.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-0411.rst:11
msgid "3.3"
msgstr ""

#: ../../peps/pep-0411.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0411.rst:12
msgid "10-Feb-2012, 24-Mar-2012"
msgstr ""

#: ../../peps/pep-0411.rst:16
msgid ""
"This PEP has been marked as *Superseded*. A decade after this PEP was "
"written, experience has shown this is a rarely used feature in managing "
"the standard library. It has also not helped prevent people from relying "
"too heavily on provisional modules, such that changes can still cause "
"significant breakage in the community."
msgstr ""

#: ../../peps/pep-0411.rst:24
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0411.rst:26
msgid ""
"The process of including a new package into the Python standard library "
"is hindered by the API lock-in and promise of backward compatibility "
"implied by a package being formally part of Python.  This PEP describes a"
" methodology for marking a standard library package \"provisional\" for "
"the period of a single feature release.  A provisional package may have "
"its API modified prior to \"graduating\" into a \"stable\" state.  On one"
" hand, this state provides the package with the benefits of being "
"formally part of the Python distribution. On the other hand, the core "
"development team explicitly states that no promises are made with regards"
" to the stability of the package's API, which may change for the next "
"release.  While it is considered an unlikely outcome, such packages may "
"even be removed from the standard library without a deprecation period if"
" the concerns regarding their API or maintenance prove well-founded."
msgstr ""

#: ../../peps/pep-0411.rst:42
msgid "Proposal - a documented provisional state"
msgstr ""

#: ../../peps/pep-0411.rst:44
msgid ""
"Whenever the Python core development team decides that a new package "
"should be included into the standard library, but isn't entirely sure "
"about whether the package's API is optimal, the package can be included "
"and marked as \"provisional\"."
msgstr ""

#: ../../peps/pep-0411.rst:49
msgid ""
"In the next feature release, the package may either be \"graduated\" into"
" a normal \"stable\" state in the standard library, remain in provisional"
" state, or be rejected and removed entirely from the Python source tree."
"  If the package ends up graduating into the stable state after being "
"provisional, its API may be changed according to accumulated feedback.  "
"The core development team explicitly makes no guarantees about API "
"stability and backward compatibility of provisional packages."
msgstr ""

#: ../../peps/pep-0411.rst:59
msgid "Marking a package provisional"
msgstr ""

#: ../../peps/pep-0411.rst:61
msgid ""
"A package will be marked provisional by a notice in its documentation "
"page and its docstring. The following paragraph will be added as a note "
"at the top of the documentation page:"
msgstr ""

#: ../../peps/pep-0411.rst:65
msgid ""
"The <X> package has been included in the standard library on a "
"provisional basis.  Backwards incompatible changes (up to and including "
"removal of the package) may occur if deemed necessary by the core "
"developers."
msgstr ""

#: ../../peps/pep-0411.rst:70
msgid ""
"The phrase \"provisional basis\" will then be a link to the glossary term"
" \"provisional package\", defined as:"
msgstr ""

#: ../../peps/pep-0411.rst:73
msgid ""
"A provisional package is one which has been deliberately excluded from "
"the standard library's backwards compatibility guarantees.  While major "
"changes to such packages are not expected, as long as they are marked "
"provisional, backwards incompatible changes (up to and including removal "
"of the package) may occur if deemed necessary by core developers.  Such "
"changes will not be made gratuitously -- they will occur only if serious "
"flaws are uncovered that were missed prior to the inclusion of the "
"package."
msgstr ""

#: ../../peps/pep-0411.rst:81
msgid ""
"This process allows the standard library to continue to evolve over time,"
" without locking in problematic design errors for extended periods of "
"time. See :pep:`411` for more details."
msgstr ""

#: ../../peps/pep-0411.rst:85
msgid "The following will be added to the start of the package's docstring:"
msgstr ""

#: ../../peps/pep-0411.rst:87
msgid ""
"The API of this package is currently provisional.  Refer to the "
"documentation for details."
msgstr ""

#: ../../peps/pep-0411.rst:90
msgid ""
"Moving a package from the provisional to the stable state simply implies "
"removing these notes from its documentation page and docstring."
msgstr ""

#: ../../peps/pep-0411.rst:95
msgid "Which packages should go through the provisional state"
msgstr ""

#: ../../peps/pep-0411.rst:97
msgid ""
"We expect most packages proposed for addition into the Python standard "
"library to go through a feature release in the provisional state. There "
"may, however, be some exceptions, such as packages that use a pre-defined"
" API (for example ``lzma``, which generally follows the API of the "
"existing ``bz2`` package), or packages with an API that has wide "
"acceptance in the Python development community."
msgstr ""

#: ../../peps/pep-0411.rst:104
msgid ""
"In any case, packages that are proposed to be added to the standard "
"library, whether via the provisional state or directly, must fulfill the "
"acceptance conditions set by :pep:`2`."
msgstr ""

#: ../../peps/pep-0411.rst:109
msgid "Criteria for \"graduation\""
msgstr ""

#: ../../peps/pep-0411.rst:111
msgid ""
"In principle, most provisional packages should eventually graduate to the"
" stable standard library.  Some reasons for not graduating are:"
msgstr ""

#: ../../peps/pep-0411.rst:114
msgid ""
"The package may prove to be unstable or fragile, without sufficient "
"developer support to maintain it."
msgstr ""

#: ../../peps/pep-0411.rst:116
msgid "A much better alternative package may be found during the preview release."
msgstr ""

#: ../../peps/pep-0411.rst:118
msgid ""
"Essentially, the decision will be made by the core developers on a per-"
"case basis.  The point to emphasize here is that a package's inclusion in"
" the standard library as \"provisional\" in some release does not "
"guarantee it will continue being part of Python in the next release.  At "
"the same time, the bar for making changes in a provisional package is "
"quite high.  We expect that most of the API of most provisional packages "
"will be unchanged at graduation. Withdrawals are expected to be rare."
msgstr ""

#: ../../peps/pep-0411.rst:128
msgid "Rationale"
msgstr ""

#: ../../peps/pep-0411.rst:131
msgid "Benefits for the core development team"
msgstr ""

#: ../../peps/pep-0411.rst:133
msgid ""
"Currently, the core developers are really reluctant to add new interfaces"
" to the standard library.  This is because as soon as they're published "
"in a release, API design mistakes get locked in due to backward "
"compatibility concerns."
msgstr ""

#: ../../peps/pep-0411.rst:138
msgid ""
"By gating all major API additions through some kind of a provisional "
"mechanism for a full release, we get one full release cycle of community "
"feedback before we lock in the APIs with our standard backward "
"compatibility guarantee."
msgstr ""

#: ../../peps/pep-0411.rst:142
msgid ""
"We can also start integrating provisional packages with the rest of the "
"standard library early, so long as we make it clear to packagers that the"
" provisional packages should not be considered optional.  The only "
"difference between provisional APIs and the rest of the standard library "
"is that provisional APIs are explicitly exempted from the usual backward "
"compatibility guarantees."
msgstr ""

#: ../../peps/pep-0411.rst:149
msgid "Benefits for end users"
msgstr ""

#: ../../peps/pep-0411.rst:151
msgid ""
"For future end users, the broadest benefit lies in a better \"out-of-the-"
"box\" experience - rather than being told \"oh, the standard library "
"tools for task X are horrible, download this 3rd party library instead\","
" those superior tools are more likely to be just be an import away."
msgstr ""

#: ../../peps/pep-0411.rst:156
msgid ""
"For environments where developers are required to conduct due diligence "
"on their upstream dependencies (severely harming the cost-effectiveness "
"of, or even ruling out entirely, much of the material on PyPI), the key "
"benefit lies in ensuring that all packages in the provisional state are "
"clearly under python-dev's aegis from at least the following "
"perspectives:"
msgstr ""

#: ../../peps/pep-0411.rst:162
msgid ""
"Licensing:  Redistributed by the PSF under a Contributor Licensing "
"Agreement."
msgstr ""

#: ../../peps/pep-0411.rst:163
msgid ""
"Documentation: The documentation of the package is published and "
"organized via the standard Python documentation tools (i.e. ReST source, "
"output generated with Sphinx and published on http://docs.python.org)."
msgstr ""

#: ../../peps/pep-0411.rst:166
msgid ""
"Testing: The package test suites are run on the python.org buildbot fleet"
" and results published via http://www.python.org/dev/buildbot."
msgstr ""

#: ../../peps/pep-0411.rst:168
msgid ""
"Issue management: Bugs and feature requests are handled on "
"http://bugs.python.org"
msgstr ""

#: ../../peps/pep-0411.rst:170
msgid ""
"Source control: The master repository for the software is published on "
"http://hg.python.org."
msgstr ""

#: ../../peps/pep-0411.rst:175
msgid "Candidates for provisional inclusion into the standard library"
msgstr ""

#: ../../peps/pep-0411.rst:177
msgid "For Python 3.3, there are a number of clear current candidates:"
msgstr ""

#: ../../peps/pep-0411.rst:179
msgid "``regex`` (http://pypi.python.org/pypi/regex) - approved by Guido [#]_."
msgstr ""

#: ../../peps/pep-0411.rst:180
msgid "``daemon`` (:pep:`3143`)"
msgstr ""

#: ../../peps/pep-0411.rst:181
msgid "``ipaddr`` (:pep:`3144`)"
msgstr ""

#: ../../peps/pep-0411.rst:183
msgid "Other possible future use cases include:"
msgstr ""

#: ../../peps/pep-0411.rst:185
msgid "Improved HTTP modules (e.g. ``requests``)"
msgstr ""

#: ../../peps/pep-0411.rst:186
msgid "HTML 5 parsing support (e.g. ``html5lib``)"
msgstr ""

#: ../../peps/pep-0411.rst:187
msgid "Improved URL/URI/IRI parsing"
msgstr ""

#: ../../peps/pep-0411.rst:188
msgid "A standard image API (:pep:`368`)"
msgstr ""

#: ../../peps/pep-0411.rst:189
msgid "Improved encapsulation of import state (:pep:`406`)"
msgstr ""

#: ../../peps/pep-0411.rst:190
msgid "Standard event loop API (:pep:`3153`)"
msgstr ""

#: ../../peps/pep-0411.rst:191
msgid "A binary version of WSGI for Python 3 (e.g. :pep:`444`)"
msgstr ""

#: ../../peps/pep-0411.rst:192
msgid "Generic function support (e.g. ``simplegeneric``)"
msgstr ""

#: ../../peps/pep-0411.rst:196
msgid "Rejected alternatives and variations"
msgstr ""

#: ../../peps/pep-0411.rst:198
msgid "See :pep:`408`."
msgstr ""

#: ../../peps/pep-0411.rst:202
msgid "References"
msgstr "Referências"

#: ../../peps/pep-0411.rst:204
msgid "https://mail.python.org/pipermail/python-dev/2012-January/115962.html"
msgstr ""

#: ../../peps/pep-0411.rst:207
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0411.rst:209
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid "Nick Coghlan <ncoghlan@gmail.com>, Eli Bendersky <eliben@gmail.com>"
#~ msgstr ""

