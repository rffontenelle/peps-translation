# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0249.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0249.rst:3
msgid "Marc-André Lemburg <mal@lemburg.com>"
msgstr ""

#: ../../peps/pep-0249.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/pep-0249.rst:4
msgid "db-sig@python.org"
msgstr ""

#: ../../peps/pep-0249.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0249.rst:5
msgid "Final"
msgstr ""

#: ../../peps/pep-0249.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0249.rst:6
msgid "Informational"
msgstr ""

#: ../../peps/pep-0249.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0249.rst:8
msgid "12-Apr-1999"
msgstr ""

#: ../../peps/pep-0249.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0249.rst
msgid "Replaces"
msgstr ""

#: ../../peps/pep-0249.rst:10
msgid "248"
msgstr ""

#: ../../peps/pep-0249.rst:14
msgid "Introduction"
msgstr "Introdução"

#: ../../peps/pep-0249.rst:16
msgid ""
"This API has been defined to encourage similarity between the Python "
"modules that are used to access databases.  By doing this, we hope to "
"achieve a consistency leading to more easily understood modules, code "
"that is generally more portable across databases, and a broader reach of "
"database connectivity from Python."
msgstr ""

#: ../../peps/pep-0249.rst:22
msgid ""
"Comments and questions about this specification may be directed to the "
"`SIG for Database Interfacing with Python <db-sig@python.org>`__."
msgstr ""

#: ../../peps/pep-0249.rst:25
msgid ""
"For more information on database interfacing with Python and available "
"packages see the `Database Topic Guide "
"<http://www.python.org/topics/database/>`__."
msgstr ""

#: ../../peps/pep-0249.rst:29
msgid ""
"This document describes the Python Database API Specification 2.0 and a "
"set of common optional extensions.  The previous version 1.0 version is "
"still available as reference, in :PEP:`248`. Package writers are "
"encouraged to use this version of the specification as basis for new "
"interfaces."
msgstr ""

#: ../../peps/pep-0249.rst:37
msgid "Module Interface"
msgstr ""

#: ../../peps/pep-0249.rst:40
msgid "Constructors"
msgstr ""

#: ../../peps/pep-0249.rst:42
msgid ""
"Access to the database is made available through connection objects. The "
"module must provide the following constructor for these:"
msgstr ""

#: ../../peps/pep-0249.rst:52
msgid "`connect`_\\ ( *parameters...* )"
msgstr ""

#: ../../peps/pep-0249.rst:48
msgid "Constructor for creating a connection to the database."
msgstr ""

#: ../../peps/pep-0249.rst:50
msgid ""
"Returns a Connection_ Object. It takes a number of parameters which are "
"database dependent. [1]_"
msgstr ""

#: ../../peps/pep-0249.rst:55
msgid "Globals"
msgstr ""

#: ../../peps/pep-0249.rst:57
msgid "These module globals must be defined:"
msgstr ""

#: ../../peps/pep-0249.rst:66
msgid "`apilevel`_"
msgstr ""

#: ../../peps/pep-0249.rst:62
msgid "String constant stating the supported DB API level."
msgstr ""

#: ../../peps/pep-0249.rst:64
msgid ""
"Currently only the strings \"``1.0``\" and \"``2.0``\" are allowed. If "
"not given, a DB-API 1.0 level interface should be assumed."
msgstr ""

#: ../../peps/pep-0249.rst:89
msgid "`threadsafety`_"
msgstr ""

#: ../../peps/pep-0249.rst:71
msgid ""
"Integer constant stating the level of thread safety the interface "
"supports.  Possible values are:"
msgstr ""

#: ../../peps/pep-0249.rst:75
msgid "threadsafety"
msgstr ""

#: ../../peps/pep-0249.rst:75 ../../peps/pep-0249.rst:98
#: ../../peps/pep-0249.rst:1250
msgid "Meaning"
msgstr ""

#: ../../peps/pep-0249.rst:77
msgid "0"
msgstr ""

#: ../../peps/pep-0249.rst:77
msgid "Threads may not share the module."
msgstr ""

#: ../../peps/pep-0249.rst:78
msgid "1"
msgstr ""

#: ../../peps/pep-0249.rst:78
msgid "Threads may share the module, but not connections."
msgstr ""

#: ../../peps/pep-0249.rst:79
msgid "2"
msgstr ""

#: ../../peps/pep-0249.rst:79
msgid "Threads may share the module and connections."
msgstr ""

#: ../../peps/pep-0249.rst:80
msgid "3"
msgstr ""

#: ../../peps/pep-0249.rst:80
msgid "Threads may share the module, connections and cursors."
msgstr ""

#: ../../peps/pep-0249.rst:83
msgid ""
"Sharing in the above context means that two threads may use a resource "
"without wrapping it using a mutex semaphore to implement resource "
"locking.  Note that you cannot always make external resources thread safe"
" by managing access using a mutex: the resource may rely on global "
"variables or other external sources that are beyond your control."
msgstr ""

#: ../../peps/pep-0249.rst:106
msgid "`paramstyle`_"
msgstr ""

#: ../../peps/pep-0249.rst:94
msgid ""
"String constant stating the type of parameter marker formatting expected "
"by the interface. Possible values are [2]_:"
msgstr ""

#: ../../peps/pep-0249.rst:98
msgid "paramstyle"
msgstr ""

#: ../../peps/pep-0249.rst:100
msgid "``qmark``"
msgstr ""

#: ../../peps/pep-0249.rst:100
msgid "Question mark style, e.g. ``...WHERE name=?``"
msgstr ""

#: ../../peps/pep-0249.rst:101
msgid "``numeric``"
msgstr ""

#: ../../peps/pep-0249.rst:101
msgid "Numeric, positional style, e.g. ``...WHERE name=:1``"
msgstr ""

#: ../../peps/pep-0249.rst:102
msgid "``named``"
msgstr ""

#: ../../peps/pep-0249.rst:102
msgid "Named style, e.g. ``...WHERE name=:name``"
msgstr ""

#: ../../peps/pep-0249.rst:103
msgid "``format``"
msgstr ""

#: ../../peps/pep-0249.rst:103
#, python-format
msgid "ANSI C printf format codes, e.g. ``...WHERE name=%s``"
msgstr ""

#: ../../peps/pep-0249.rst:104
msgid "``pyformat``"
msgstr ""

#: ../../peps/pep-0249.rst:104
#, python-format
msgid "Python extended format codes, e.g.  ``...WHERE name=%(name)s``"
msgstr ""

#: ../../peps/pep-0249.rst:109
msgid "Exceptions"
msgstr ""

#: ../../peps/pep-0249.rst:111
msgid ""
"The module should make all error information available through these "
"exceptions or subclasses thereof:"
msgstr ""

#: ../../peps/pep-0249.rst:120
msgid "`Warning`_"
msgstr ""

#: ../../peps/pep-0249.rst:117
msgid ""
"Exception raised for important warnings like data truncations while "
"inserting, etc. It must be a subclass of the Python ``Exception`` class "
"[10]_ [11]_."
msgstr ""

#: ../../peps/pep-0249.rst:130
msgid "`Error`_"
msgstr ""

#: ../../peps/pep-0249.rst:125
msgid ""
"Exception that is the base class of all other error exceptions. You can "
"use this to catch all errors with one single ``except`` statement. "
"Warnings are not considered errors and thus should not use this class as "
"base. It must be a subclass of the Python ``Exception`` class [10]_."
msgstr ""

#: ../../peps/pep-0249.rst:138
msgid "`InterfaceError`_"
msgstr ""

#: ../../peps/pep-0249.rst:135
msgid ""
"Exception raised for errors that are related to the database interface "
"rather than the database itself.  It must be a subclass of Error_."
msgstr ""

#: ../../peps/pep-0249.rst:145
msgid "`DatabaseError`_"
msgstr ""

#: ../../peps/pep-0249.rst:143
msgid ""
"Exception raised for errors that are related to the database.  It must be"
" a subclass of Error_."
msgstr ""

#: ../../peps/pep-0249.rst:153
msgid "`DataError`_"
msgstr ""

#: ../../peps/pep-0249.rst:150
msgid ""
"Exception raised for errors that are due to problems with the processed "
"data like division by zero, numeric value out of range, etc. It must be a"
" subclass of DatabaseError_."
msgstr ""

#: ../../peps/pep-0249.rst:164
msgid "`OperationalError`_"
msgstr ""

#: ../../peps/pep-0249.rst:158
msgid ""
"Exception raised for errors that are related to the database's operation "
"and not necessarily under the control of the programmer, e.g. an "
"unexpected disconnect occurs, the data source name is not found, a "
"transaction could not be processed, a memory allocation error occurred "
"during processing, etc.  It must be a subclass of DatabaseError_."
msgstr ""

#: ../../peps/pep-0249.rst:172
msgid "`IntegrityError`_"
msgstr ""

#: ../../peps/pep-0249.rst:169
msgid ""
"Exception raised when the relational integrity of the database is "
"affected, e.g. a foreign key check fails.  It must be a subclass of "
"DatabaseError_."
msgstr ""

#: ../../peps/pep-0249.rst:180
msgid "`InternalError`_"
msgstr ""

#: ../../peps/pep-0249.rst:177
msgid ""
"Exception raised when the database encounters an internal error, e.g. the"
" cursor is not valid anymore, the transaction is out of sync, etc.  It "
"must be a subclass of DatabaseError_."
msgstr ""

#: ../../peps/pep-0249.rst:189
msgid "`ProgrammingError`_"
msgstr ""

#: ../../peps/pep-0249.rst:185
msgid ""
"Exception raised for programming errors, e.g. table not found or already "
"exists, syntax error in the SQL statement, wrong number of parameters "
"specified, etc.  It must be a subclass of DatabaseError_."
msgstr ""

#: ../../peps/pep-0249.rst:198
msgid "`NotSupportedError`_"
msgstr ""

#: ../../peps/pep-0249.rst:194
msgid ""
"Exception raised in case a method or database API was used which is not "
"supported by the database, e.g. requesting a `.rollback()`_ on a "
"connection that does not support transaction or has transactions turned "
"off.  It must be a subclass of DatabaseError_."
msgstr ""

#: ../../peps/pep-0249.rst:200
msgid "This is the exception inheritance layout [10]_ [11]_:"
msgstr ""

#: ../../peps/pep-0249.rst:217
msgid ""
"The values of these exceptions are not defined. They should give the user"
" a fairly good idea of what went wrong, though."
msgstr ""

#: ../../peps/pep-0249.rst:224
msgid "Connection Objects"
msgstr ""

#: ../../peps/pep-0249.rst:226
msgid "Connection objects should respond to the following methods."
msgstr ""

#: ../../peps/pep-0249.rst:230
msgid "Connection methods"
msgstr ""

#: ../../peps/pep-0249.rst:245
msgid "`.close() <#Connection.close>`_"
msgstr ""

#: ../../peps/pep-0249.rst:236
msgid "Close the connection now (rather than whenever ``.__del__()`` is called)."
msgstr ""

#: ../../peps/pep-0249.rst:239
msgid ""
"The connection will be unusable from this point forward; an Error_ (or "
"subclass) exception will be raised if any operation is attempted with the"
" connection. The same applies to all cursor objects trying to use the "
"connection.  Note that closing a connection without committing the "
"changes first will cause an implicit rollback to be performed."
msgstr ""

#: ../../peps/pep-0249.rst:258
msgid "`.commit`_\\ ()"
msgstr ""

#: ../../peps/pep-0249.rst:251
msgid "Commit any pending transaction to the database."
msgstr ""

#: ../../peps/pep-0249.rst:253
msgid ""
"Note that if the database supports an auto-commit feature, this must be "
"initially off. An interface method may be provided to turn it back on."
msgstr ""

#: ../../peps/pep-0249.rst:256
msgid ""
"Database modules that do not support transactions should implement this "
"method with void functionality."
msgstr ""

#: ../../peps/pep-0249.rst:271
msgid "`.rollback`_\\ ()"
msgstr ""

#: ../../peps/pep-0249.rst:264
msgid ""
"This method is optional since not all databases provide transaction "
"support. [3]_"
msgstr ""

#: ../../peps/pep-0249.rst:267
msgid ""
"In case a database does provide transactions this method causes the "
"database to roll back to the start of any pending transaction.  Closing a"
" connection without committing the changes first will cause an implicit "
"rollback to be performed."
msgstr ""

#: ../../peps/pep-0249.rst:282
msgid "`.cursor`_\\ ()"
msgstr ""

#: ../../peps/pep-0249.rst:276
msgid "Return a new Cursor_ Object using the connection."
msgstr ""

#: ../../peps/pep-0249.rst:278
msgid ""
"If the database does not provide a direct cursor concept, the module will"
" have to emulate cursors using other means to the extent needed by this "
"specification.  [4]_"
msgstr ""

#: ../../peps/pep-0249.rst:287
msgid "Cursor Objects"
msgstr ""

#: ../../peps/pep-0249.rst:289
msgid ""
"These objects represent a database cursor, which is used to manage the "
"context of a fetch operation. Cursors created from the same connection "
"are not isolated, *i.e.*, any changes done to the database by a cursor "
"are immediately visible by the other cursors.  Cursors created from "
"different connections can or can not be isolated, depending on how the "
"transaction support is implemented (see also the connection's "
"`.rollback`_\\ () and `.commit`_\\ () methods)."
msgstr ""

#: ../../peps/pep-0249.rst:297
msgid "Cursor Objects should respond to the following methods and attributes."
msgstr ""

#: ../../peps/pep-0249.rst:301
msgid "Cursor attributes"
msgstr ""

#: ../../peps/pep-0249.rst:329
msgid "`.description`_"
msgstr ""

#: ../../peps/pep-0249.rst:306
msgid "This read-only attribute is a sequence of 7-item sequences."
msgstr ""

#: ../../peps/pep-0249.rst:308
msgid "Each of these sequences contains information describing one result column:"
msgstr ""

#: ../../peps/pep-0249.rst:311
msgid "``name``"
msgstr ""

#: ../../peps/pep-0249.rst:312
msgid "``type_code``"
msgstr ""

#: ../../peps/pep-0249.rst:313
msgid "``display_size``"
msgstr ""

#: ../../peps/pep-0249.rst:314
msgid "``internal_size``"
msgstr ""

#: ../../peps/pep-0249.rst:315
msgid "``precision``"
msgstr ""

#: ../../peps/pep-0249.rst:316
msgid "``scale``"
msgstr ""

#: ../../peps/pep-0249.rst:317
msgid "``null_ok``"
msgstr ""

#: ../../peps/pep-0249.rst:319
msgid ""
"The first two items (``name`` and ``type_code``) are mandatory, the other"
" five are optional and are set to ``None`` if no meaningful values can be"
" provided."
msgstr ""

#: ../../peps/pep-0249.rst:323
msgid ""
"This attribute will be ``None`` for operations that do not return rows or"
" if the cursor has not had an operation invoked via the `.execute*()`_ "
"method yet."
msgstr ""

#: ../../peps/pep-0249.rst:327
msgid ""
"The ``type_code`` can be interpreted by comparing it to the `Type "
"Objects`_ specified in the section below."
msgstr ""

#: ../../peps/pep-0249.rst:345
msgid "`.rowcount`_"
msgstr ""

#: ../../peps/pep-0249.rst:334
msgid ""
"This read-only attribute specifies the number of rows that the last "
"`.execute*()`_ produced (for DQL statements like ``SELECT``) or affected "
"(for DML statements like ``UPDATE`` or ``INSERT``). [9]_"
msgstr ""

#: ../../peps/pep-0249.rst:338
msgid ""
"The attribute is -1 in case no `.execute*()`_ has been performed on the "
"cursor or the rowcount of the last operation is cannot be determined by "
"the interface. [7]_"
msgstr ""

#: ../../peps/pep-0249.rst:343
msgid ""
"Future versions of the DB API specification could redefine the latter "
"case to have the object return ``None`` instead of -1."
msgstr ""

#: ../../peps/pep-0249.rst:348
msgid "Cursor methods"
msgstr ""

#: ../../peps/pep-0249.rst:366
msgid "`.callproc`_\\ ( *procname* [, *parameters* ] )"
msgstr ""

#: ../../peps/pep-0249.rst:354
msgid ""
"(This method is optional since not all databases provide stored "
"procedures. [3]_)"
msgstr ""

#: ../../peps/pep-0249.rst:357
msgid ""
"Call a stored database procedure with the given name. The sequence of "
"parameters must contain one entry for each argument that the procedure "
"expects. The result of the call is returned as modified copy of the input"
" sequence. Input parameters are left untouched, output and input/output "
"parameters replaced with possibly new values."
msgstr ""

#: ../../peps/pep-0249.rst:364
msgid ""
"The procedure may also provide a result set as output. This must then be "
"made available through the standard `.fetch*()`_ methods."
msgstr ""

#: ../../peps/pep-0249.rst:378
msgid "`.close <#Cursor.close>`_\\ ()"
msgstr ""

#: ../../peps/pep-0249.rst:373
msgid "Close the cursor now (rather than whenever ``__del__`` is called)."
msgstr ""

#: ../../peps/pep-0249.rst:375
msgid ""
"The cursor will be unusable from this point forward; an Error_ (or "
"subclass) exception will be raised if any operation is attempted with the"
" cursor."
msgstr ""

#: ../../peps/pep-0249.rst:411
msgid "`.execute`_\\ (*operation* [, *parameters*])"
msgstr ""

#: ../../peps/pep-0249.rst:387
msgid "Prepare and execute a database operation (query or command)."
msgstr ""

#: ../../peps/pep-0249.rst:389
msgid ""
"Parameters may be provided as sequence or mapping and will be bound to "
"variables in the operation.  Variables are specified in a database-"
"specific notation (see the module's paramstyle_ attribute for details). "
"[5]_"
msgstr ""

#: ../../peps/pep-0249.rst:394
msgid ""
"A reference to the operation will be retained by the cursor.  If the same"
" operation object is passed in again, then the cursor can optimize its "
"behavior.  This is most effective for algorithms where the same operation"
" is used, but different parameters are bound to it (many times)."
msgstr ""

#: ../../peps/pep-0249.rst:400
msgid ""
"For maximum efficiency when reusing an operation, it is best to use the "
"`.setinputsizes()`_ method to specify the parameter types and sizes ahead"
" of time.  It is legal for a parameter to not match the predefined "
"information; the implementation should compensate, possibly with a loss "
"of efficiency."
msgstr ""

#: ../../peps/pep-0249.rst:406
msgid ""
"The parameters may also be specified as list of tuples to e.g. insert "
"multiple rows in a single operation, but this kind of usage is "
"deprecated: `.executemany()`_ should be used instead."
msgstr ""

#: ../../peps/pep-0249.rst:410 ../../peps/pep-0249.rst:434
msgid "Return values are not defined."
msgstr ""

#: ../../peps/pep-0249.rst:435
msgid "`.executemany`_\\ ( *operation*, *seq_of_parameters* )"
msgstr ""

#: ../../peps/pep-0249.rst:417
msgid ""
"Prepare a database operation (query or command) and then execute it "
"against all parameter sequences or mappings found in the sequence "
"*seq_of_parameters*."
msgstr ""

#: ../../peps/pep-0249.rst:421
msgid ""
"Modules are free to implement this method using multiple calls to the "
"`.execute()`_ method or by using array operations to have the database "
"process the sequence as a whole in one call."
msgstr ""

#: ../../peps/pep-0249.rst:425
msgid ""
"Use of this method for an operation which produces one or more result "
"sets constitutes undefined behavior, and the implementation is permitted "
"(but not required) to raise an exception when it detects that a result "
"set has been created by an invocation of the operation."
msgstr ""

#: ../../peps/pep-0249.rst:431
msgid ""
"The same comments as for `.execute()`_ also apply accordingly to this "
"method."
msgstr ""

#: ../../peps/pep-0249.rst:450
msgid "`.fetchone`_\\ ()"
msgstr ""

#: ../../peps/pep-0249.rst:444
msgid ""
"Fetch the next row of a query result set, returning a single sequence, or"
" ``None`` when no more data is available. [6]_"
msgstr ""

#: ../../peps/pep-0249.rst:447 ../../peps/pep-0249.rst:467
#: ../../peps/pep-0249.rst:487 ../../peps/pep-0249.rst:506
msgid ""
"An Error_ (or subclass) exception is raised if the previous call to "
"`.execute*()`_ did not produce any result set or no call was issued yet."
msgstr ""

#: ../../peps/pep-0249.rst:476
msgid "`.fetchmany`_\\ ([*size=cursor.arraysize*])"
msgstr ""

#: ../../peps/pep-0249.rst:456
msgid ""
"Fetch the next set of rows of a query result, returning a sequence of "
"sequences (e.g. a list of tuples). An empty sequence is returned when no "
"more rows are available."
msgstr ""

#: ../../peps/pep-0249.rst:460
msgid ""
"The number of rows to fetch per call is specified by the parameter.  If "
"it is not given, the cursor's arraysize determines the number of rows to "
"be fetched. The method should try to fetch as many rows as indicated by "
"the size parameter. If this is not possible due to the specified number "
"of rows not being available, fewer rows may be returned."
msgstr ""

#: ../../peps/pep-0249.rst:471
msgid ""
"Note there are performance considerations involved with the *size* "
"parameter.  For optimal performance, it is usually best to use the "
"`.arraysize`_ attribute.  If the size parameter is used, then it is best "
"for it to retain the same value from one `.fetchmany()`_ call to the "
"next."
msgstr ""

#: ../../peps/pep-0249.rst:490
msgid "`.fetchall`_\\ ()"
msgstr ""

#: ../../peps/pep-0249.rst:482
msgid ""
"Fetch all (remaining) rows of a query result, returning them as a "
"sequence of sequences (e.g. a list of tuples).  Note that the cursor's "
"arraysize attribute can affect the performance of this operation."
msgstr ""

#: ../../peps/pep-0249.rst:509
msgid "`.nextset`_\\ ()"
msgstr ""

#: ../../peps/pep-0249.rst:496
msgid ""
"(This method is optional since not all databases support multiple result "
"sets. [3]_)"
msgstr ""

#: ../../peps/pep-0249.rst:499
msgid ""
"This method will make the cursor skip to the next available set, "
"discarding any remaining rows from the current set."
msgstr ""

#: ../../peps/pep-0249.rst:502
msgid ""
"If there are no more sets, the method returns ``None``. Otherwise, it "
"returns a true value and subsequent calls to the `.fetch*()`_ methods "
"will return rows from the next result set."
msgstr ""

#: ../../peps/pep-0249.rst:522
msgid "`.arraysize`_"
msgstr ""

#: ../../peps/pep-0249.rst:514
msgid ""
"This read/write attribute specifies the number of rows to fetch at a time"
" with `.fetchmany()`_. It defaults to 1 meaning to fetch a single row at "
"a time."
msgstr ""

#: ../../peps/pep-0249.rst:518
msgid ""
"Implementations must observe this value with respect to the "
"`.fetchmany()`_ method, but are free to interact with the database a "
"single row at a time. It may also be used in the implementation of "
"`.executemany()`_."
msgstr ""

#: ../../peps/pep-0249.rst:544
msgid "`.setinputsizes`_\\ (*sizes*)"
msgstr ""

#: ../../peps/pep-0249.rst:528
msgid ""
"This can be used before a call to `.execute*()`_ to predefine memory "
"areas for the operation's parameters."
msgstr ""

#: ../../peps/pep-0249.rst:531
msgid ""
"*sizes* is specified as a sequence — one item for each input parameter.  "
"The item should be a Type Object that corresponds to the input that will "
"be used, or it should be an integer specifying the maximum length of a "
"string parameter.  If the item is ``None``, then no predefined memory "
"area will be reserved for that column (this is useful to avoid predefined"
" areas for large inputs)."
msgstr ""

#: ../../peps/pep-0249.rst:539 ../../peps/pep-0249.rst:555
msgid "This method would be used before the `.execute*()`_ method is invoked."
msgstr ""

#: ../../peps/pep-0249.rst:542 ../../peps/pep-0249.rst:558
msgid ""
"Implementations are free to have this method do nothing and users are "
"free to not use it."
msgstr ""

#: ../../peps/pep-0249.rst:560
msgid "`.setoutputsize`_\\ (*size* [, *column*])"
msgstr ""

#: ../../peps/pep-0249.rst:550
msgid ""
"Set a column buffer size for fetches of large columns (e.g. ``LONG``\\s, "
"``BLOB``\\s, etc.).  The column is specified as an index into the result "
"sequence.  Not specifying the column will set the default size for all "
"large columns in the cursor."
msgstr ""

#: ../../peps/pep-0249.rst:565
msgid "Type Objects and Constructors"
msgstr ""

#: ../../peps/pep-0249.rst:567
msgid ""
"Many databases need to have the input in a particular format for binding "
"to an operation's input parameters.  For example, if an input is destined"
" for a ``DATE`` column, then it must be bound to the database in a "
"particular string format.  Similar problems exist for \"Row ID\" columns "
"or large binary items (e.g. blobs or ``RAW`` columns).  This presents "
"problems for Python since the parameters to the `.execute*()`_ method are"
" untyped.  When the database module sees a Python string object, it "
"doesn't know if it should be bound as a simple ``CHAR`` column, as a raw "
"``BINARY`` item, or as a ``DATE``."
msgstr ""

#: ../../peps/pep-0249.rst:577
msgid ""
"To overcome this problem, a module must provide the constructors defined "
"below to create objects that can hold special values.  When passed to the"
" cursor methods, the module can then detect the proper type of the input "
"parameter and bind it accordingly."
msgstr ""

#: ../../peps/pep-0249.rst:582
msgid ""
"A Cursor_ Object's description attribute returns information about each "
"of the result columns of a query.  The ``type_code`` must compare equal "
"to one of Type Objects defined below. Type Objects may be equal to more "
"than one type code (e.g. ``DATETIME`` could be equal to the type codes "
"for date, time and timestamp columns; see the `Implementation Hints`_ "
"below for details)."
msgstr ""

#: ../../peps/pep-0249.rst:589
msgid "The module exports the following constructors and singletons:"
msgstr ""

#: ../../peps/pep-0249.rst:595
msgid "`Date`_\\ (*year*, *month*, *day*)"
msgstr ""

#: ../../peps/pep-0249.rst:594
msgid "This function constructs an object holding a date value."
msgstr ""

#: ../../peps/pep-0249.rst:601
msgid "`Time`_\\ (*hour*, *minute*, *second*)"
msgstr ""

#: ../../peps/pep-0249.rst:600
msgid "This function constructs an object holding a time value."
msgstr ""

#: ../../peps/pep-0249.rst:607
msgid "`Timestamp`_\\ (*year*, *month*, *day*, *hour*, *minute*, *second*)"
msgstr ""

#: ../../peps/pep-0249.rst:606
msgid "This function constructs an object holding a time stamp value."
msgstr ""

#: ../../peps/pep-0249.rst:615
msgid "`DateFromTicks`_\\ (*ticks*)"
msgstr ""

#: ../../peps/pep-0249.rst:612
msgid ""
"This function constructs an object holding a date value from the given "
"ticks value (number of seconds since the epoch; see the documentation of "
"`the standard Python time module "
"<http://docs.python.org/library/time.html>`__ for details)."
msgstr ""

#: ../../peps/pep-0249.rst:623
msgid "`TimeFromTicks`_\\ (*ticks*)"
msgstr ""

#: ../../peps/pep-0249.rst:620
msgid ""
"This function constructs an object holding a time value from the given "
"ticks value (number of seconds since the epoch; see the documentation of "
"the standard Python time module for details)."
msgstr ""

#: ../../peps/pep-0249.rst:631
msgid "`TimestampFromTicks`_\\ (*ticks*)"
msgstr ""

#: ../../peps/pep-0249.rst:628
msgid ""
"This function constructs an object holding a time stamp value from the "
"given ticks value (number of seconds since the epoch; see the "
"documentation of the standard Python time module for details)."
msgstr ""

#: ../../peps/pep-0249.rst:638
msgid "`Binary`_\\ (*string*)"
msgstr ""

#: ../../peps/pep-0249.rst:636
msgid ""
"This function constructs an object capable of holding a binary (long) "
"string value."
msgstr ""

#: ../../peps/pep-0249.rst:645
msgid "`STRING`_ type"
msgstr ""

#: ../../peps/pep-0249.rst:643
msgid ""
"This type object is used to describe columns in a database that are "
"string-based (e.g. ``CHAR``)."
msgstr ""

#: ../../peps/pep-0249.rst:652
msgid "`BINARY`_ type"
msgstr ""

#: ../../peps/pep-0249.rst:650
msgid ""
"This type object is used to describe (long) binary columns in a database "
"(e.g. ``LONG``, ``RAW``, ``BLOB``\\s)."
msgstr ""

#: ../../peps/pep-0249.rst:659
msgid "`NUMBER`_ type"
msgstr ""

#: ../../peps/pep-0249.rst:657
msgid "This type object is used to describe numeric columns in a database."
msgstr ""

#: ../../peps/pep-0249.rst:665
msgid "`DATETIME`_ type"
msgstr ""

#: ../../peps/pep-0249.rst:664
msgid "This type object is used to describe date/time columns in a database."
msgstr ""

#: ../../peps/pep-0249.rst:672
msgid "`ROWID`_ type"
msgstr ""

#: ../../peps/pep-0249.rst:670
msgid "This type object is used to describe the \"Row ID\" column in a database."
msgstr ""

#: ../../peps/pep-0249.rst:674
msgid ""
"SQL ``NULL`` values are represented by the Python ``None`` singleton on "
"input and output."
msgstr ""

#: ../../peps/pep-0249.rst:678
msgid ""
"Usage of Unix ticks for database interfacing can cause troubles because "
"of the limited date range they cover."
msgstr ""

#: ../../peps/pep-0249.rst:686
msgid "Implementation Hints for Module Authors"
msgstr ""

#: ../../peps/pep-0249.rst:688
msgid ""
"Date/time objects can be implemented as `Python datetime module "
"<http://docs.python.org/library/datetime.html>`__ objects (available "
"since Python 2.3, with a C API since 2.4) or using the `mxDateTime "
"<http://www.egenix.com/products/python/mxBase/mxDateTime/>`_ package "
"(available for all Python versions since 1.5.2). They both provide all "
"necessary constructors and methods at Python and C level."
msgstr ""

#: ../../peps/pep-0249.rst:695
msgid ""
"Here is a sample implementation of the Unix ticks based constructors for "
"date/time delegating work to the generic constructors::"
msgstr ""

#: ../../peps/pep-0249.rst:709
msgid ""
"The preferred object type for Binary objects are the buffer types "
"available in standard Python starting with version 1.5.2.  Please see the"
" Python documentation for details. For information about the C interface "
"have a look at ``Include/bufferobject.h`` and ``Objects/bufferobject.c`` "
"in the Python source distribution."
msgstr ""

#: ../../peps/pep-0249.rst:715
msgid ""
"This Python class allows implementing the above type objects even though "
"the description type code field yields multiple values for on type "
"object::"
msgstr ""

#: ../../peps/pep-0249.rst:730
msgid ""
"The resulting type object compares equal to all values passed to the "
"constructor."
msgstr ""

#: ../../peps/pep-0249.rst:733
msgid ""
"Here is a snippet of Python code that implements the exception hierarchy "
"defined above [10]_::"
msgstr ""

#: ../../peps/pep-0249.rst:766
msgid ""
"In C you can use the ``PyErr_NewException(fullname, base, NULL)`` API to "
"create the exception objects."
msgstr ""

#: ../../peps/pep-0249.rst:771
msgid "Optional DB API Extensions"
msgstr ""

#: ../../peps/pep-0249.rst:773
msgid ""
"During the lifetime of DB API 2.0, module authors have often extended "
"their implementations beyond what is required by this DB API "
"specification. To enhance compatibility and to provide a clean upgrade "
"path to possible future versions of the specification, this section "
"defines a set of common extensions to the core DB API 2.0 specification."
msgstr ""

#: ../../peps/pep-0249.rst:780
msgid ""
"As with all DB API optional features, the database module authors are "
"free to not implement these additional attributes and methods (using them"
" will then result in an ``AttributeError``) or to raise a "
"NotSupportedError_ in case the availability can only be checked at run-"
"time."
msgstr ""

#: ../../peps/pep-0249.rst:786
msgid ""
"It has been proposed to make usage of these extensions optionally visible"
" to the programmer by issuing Python warnings through the Python warning "
"framework. To make this feature useful, the warning messages must be "
"standardized in order to be able to mask them. These standard messages "
"are referred to below as *Warning Message*."
msgstr ""

#: ../../peps/pep-0249.rst:805
msgid "Cursor\\ `.rownumber`_"
msgstr ""

#: ../../peps/pep-0249.rst:796
msgid ""
"This read-only attribute should provide the current 0-based index of the "
"cursor in the result set or ``None`` if the index cannot be determined."
msgstr ""

#: ../../peps/pep-0249.rst:800
msgid ""
"The index can be seen as index of the cursor in a sequence (the result "
"set). The next fetch operation will fetch the row indexed by "
"`.rownumber`_ in that sequence."
msgstr ""

#: ../../peps/pep-0249.rst:804
msgid "*Warning Message:* \"DB-API extension cursor.rownumber used\""
msgstr ""

#: ../../peps/pep-0249.rst:819
msgid "`Connection.Error`_, `Connection.ProgrammingError`_, etc."
msgstr ""

#: ../../peps/pep-0249.rst:811
msgid ""
"All exception classes defined by the DB API standard should be exposed on"
" the Connection_ objects as attributes (in addition to being available at"
" module scope)."
msgstr ""

#: ../../peps/pep-0249.rst:815
msgid "These attributes simplify error handling in multi-connection environments."
msgstr ""

#: ../../peps/pep-0249.rst:818
msgid "*Warning Message:* \"DB-API extension connection.<exception> used\""
msgstr ""

#: ../../peps/pep-0249.rst:831
msgid "Cursor\\ `.connection`_"
msgstr ""

#: ../../peps/pep-0249.rst:824
msgid ""
"This read-only attribute return a reference to the Connection_ object on "
"which the cursor was created."
msgstr ""

#: ../../peps/pep-0249.rst:827
msgid ""
"The attribute simplifies writing polymorph code in multi-connection "
"environments."
msgstr ""

#: ../../peps/pep-0249.rst:830
msgid "*Warning Message:* \"DB-API extension cursor.connection used\""
msgstr ""

#: ../../peps/pep-0249.rst:856
msgid "Cursor\\ `.scroll`_\\ (*value* [, *mode='relative'* ])"
msgstr ""

#: ../../peps/pep-0249.rst:837
msgid "Scroll the cursor in the result set to a new position according to *mode*."
msgstr ""

#: ../../peps/pep-0249.rst:840
msgid ""
"If mode is ``relative`` (default), value is taken as offset to the "
"current position in the result set, if set to ``absolute``, value states "
"an absolute target position."
msgstr ""

#: ../../peps/pep-0249.rst:844
msgid ""
"An ``IndexError`` should be raised in case a scroll operation would leave"
" the result set. In this case, the cursor position is left undefined "
"(ideal would be to not move the cursor at all)."
msgstr ""

#: ../../peps/pep-0249.rst:849
msgid ""
"This method should use native scrollable cursors, if available, or revert"
" to an emulation for forward-only scrollable cursors. The method may "
"raise NotSupportedError_ to signal that a specific operation is not "
"supported by the database (e.g. backward scrolling)."
msgstr ""

#: ../../peps/pep-0249.rst:855
msgid "*Warning Message:* \"DB-API extension cursor.scroll() used\""
msgstr ""

#: ../../peps/pep-0249.rst:879
msgid "`Cursor.messages`_"
msgstr ""

#: ../../peps/pep-0249.rst:861
msgid ""
"This is a Python list object to which the interface appends tuples "
"(exception class, exception value) for all messages which the interfaces "
"receives from the underlying database for this cursor."
msgstr ""

#: ../../peps/pep-0249.rst:865
msgid ""
"The list is cleared by all standard cursor methods calls (prior to "
"executing the call) except for the `.fetch*()`_ calls automatically to "
"avoid excessive memory usage and can also be cleared by executing ``del "
"cursor.messages[:]``."
msgstr ""

#: ../../peps/pep-0249.rst:870
msgid ""
"All error and warning messages generated by the database are placed into "
"this list, so checking the list allows the user to verify correct "
"operation of the method calls."
msgstr ""

#: ../../peps/pep-0249.rst:874
msgid ""
"The aim of this attribute is to eliminate the need for a Warning "
"exception which often causes problems (some warnings really only have "
"informational character)."
msgstr ""

#: ../../peps/pep-0249.rst:878
msgid "*Warning Message:* \"DB-API extension cursor.messages used\""
msgstr ""

#: ../../peps/pep-0249.rst:893
msgid "`Connection.messages`_"
msgstr ""

#: ../../peps/pep-0249.rst:884
msgid ""
"Same as Cursor.messages_ except that the messages in the list are "
"connection oriented."
msgstr ""

#: ../../peps/pep-0249.rst:887
msgid ""
"The list is cleared automatically by all standard connection methods "
"calls (prior to executing the call) to avoid excessive memory usage and "
"can also be cleared by executing ``del connection.messages[:]``."
msgstr ""

#: ../../peps/pep-0249.rst:892
msgid "*Warning Message:* \"DB-API extension connection.messages used\""
msgstr ""

#: ../../peps/pep-0249.rst:907
msgid "Cursor\\ `.next`_\\ ()"
msgstr ""

#: ../../peps/pep-0249.rst:899
msgid ""
"Return the next row from the currently executing SQL statement using the "
"same semantics as `.fetchone()`_.  A ``StopIteration`` exception is "
"raised when the result set is exhausted for Python versions 2.2 and "
"later.  Previous versions don't have the ``StopIteration`` exception and "
"so the method should raise an ``IndexError`` instead."
msgstr ""

#: ../../peps/pep-0249.rst:906
msgid "*Warning Message:* \"DB-API extension cursor.next() used\""
msgstr ""

#: ../../peps/pep-0249.rst:917
msgid "Cursor\\ `.__iter__`_\\ ()"
msgstr ""

#: ../../peps/pep-0249.rst:913
msgid "Return self to make cursors compatible to the iteration protocol [8]_."
msgstr ""

#: ../../peps/pep-0249.rst:916
msgid "*Warning Message:* \"DB-API extension cursor.__iter__() used\""
msgstr ""

#: ../../peps/pep-0249.rst:933
msgid "Cursor\\ `.lastrowid`_"
msgstr ""

#: ../../peps/pep-0249.rst:922
msgid ""
"This read-only attribute provides the rowid of the last modified row "
"(most databases return a rowid only when a single ``INSERT`` operation is"
" performed). If the operation does not set a rowid or if the database "
"does not support rowids, this attribute should be set to ``None``."
msgstr ""

#: ../../peps/pep-0249.rst:928
msgid ""
"The semantics of ``.lastrowid`` are undefined in case the last executed "
"statement modified more than one row, e.g. when using ``INSERT`` with "
"``.executemany()``."
msgstr ""

#: ../../peps/pep-0249.rst:932
msgid "*Warning Message:* \"DB-API extension cursor.lastrowid used\""
msgstr ""

#: ../../peps/pep-0249.rst:961
msgid "Connection\\ `.autocommit`_"
msgstr ""

#: ../../peps/pep-0249.rst:939
msgid "Attribute to query and set the autocommit mode of the connection."
msgstr ""

#: ../../peps/pep-0249.rst:941
msgid ""
"Return ``True`` if the connection is operating in autocommit (non-"
"transactional) mode. Return ``False`` if the connection is operating in "
"manual commit (transactional) mode."
msgstr ""

#: ../../peps/pep-0249.rst:945
msgid ""
"Setting the attribute to ``True`` or ``False`` adjusts the connection's "
"mode accordingly."
msgstr ""

#: ../../peps/pep-0249.rst:948
msgid ""
"Changing the setting from ``True`` to ``False`` (disabling autocommit) "
"will have the database leave autocommit mode and start a new transaction."
" Changing from ``False`` to ``True`` (enabling autocommit) has database "
"dependent semantics with respect to how pending transactions are handled."
" [12]_"
msgstr ""

#: ../../peps/pep-0249.rst:954
msgid ""
"*Deprecation notice*: Even though several database modules implement both"
" the read and write nature of this attribute, setting the autocommit mode"
" by writing to the attribute is deprecated, since this may result in I/O "
"and related exceptions, making it difficult to implement in an async "
"context. [13]_"
msgstr ""

#: ../../peps/pep-0249.rst:960
msgid "*Warning Message:* \"DB-API extension connection.autocommit used\""
msgstr ""

#: ../../peps/pep-0249.rst:964
msgid "Optional Error Handling Extensions"
msgstr ""

#: ../../peps/pep-0249.rst:966
msgid ""
"The core DB API specification only introduces a set of exceptions which "
"can be raised to report errors to the user. In some cases, exceptions may"
" be too disruptive for the flow of a program or even render execution "
"impossible."
msgstr ""

#: ../../peps/pep-0249.rst:971
msgid ""
"For these cases and in order to simplify error handling when dealing with"
" databases, database module authors may choose to implement user "
"definable error handlers. This section describes a standard way of "
"defining these error handlers."
msgstr ""

#: ../../peps/pep-0249.rst:1004
msgid "`Connection.errorhandler`_, `Cursor.errorhandler`_"
msgstr ""

#: ../../peps/pep-0249.rst:980
msgid ""
"Read/write attribute which references an error handler to call in case an"
" error condition is met."
msgstr ""

#: ../../peps/pep-0249.rst:983
msgid "The handler must be a Python callable taking the following arguments:"
msgstr ""

#: ../../peps/pep-0249.rst:989
msgid ""
"where connection is a reference to the connection on which the cursor "
"operates, cursor a reference to the cursor (or ``None`` in case the error"
" does not apply to a cursor), *errorclass* is an error class which to "
"instantiate using *errorvalue* as construction argument."
msgstr ""

#: ../../peps/pep-0249.rst:995
msgid ""
"The standard error handler should add the error information to the "
"appropriate ``.messages`` attribute (`Connection.messages`_ or "
"`Cursor.messages`_) and raise the exception defined by the given "
"*errorclass* and *errorvalue* parameters."
msgstr ""

#: ../../peps/pep-0249.rst:1000
msgid ""
"If no ``.errorhandler`` is set (the attribute is ``None``), the standard "
"error handling scheme as outlined above, should be applied."
msgstr ""

#: ../../peps/pep-0249.rst:1004
msgid "*Warning Message:* \"DB-API extension .errorhandler used\""
msgstr ""

#: ../../peps/pep-0249.rst:1006
msgid ""
"Cursors should inherit the ``.errorhandler`` setting from their "
"connection objects at cursor creation time."
msgstr ""

#: ../../peps/pep-0249.rst:1011
msgid "Optional Two-Phase Commit Extensions"
msgstr ""

#: ../../peps/pep-0249.rst:1013
msgid ""
"Many databases have support for two-phase commit (TPC) which allows "
"managing transactions across multiple database connections and other "
"resources."
msgstr ""

#: ../../peps/pep-0249.rst:1017
msgid ""
"If a database backend provides support for two-phase commit and the "
"database module author wishes to expose this support, the following API "
"should be implemented. NotSupportedError_ should be raised, if the "
"database backend support for two-phase commit can only be checked at run-"
"time."
msgstr ""

#: ../../peps/pep-0249.rst:1024
msgid "TPC Transaction IDs"
msgstr ""

#: ../../peps/pep-0249.rst:1026
msgid ""
"As many databases follow the XA specification, transaction IDs are formed"
" from three components:"
msgstr ""

#: ../../peps/pep-0249.rst:1029
msgid "a format ID"
msgstr ""

#: ../../peps/pep-0249.rst:1030
msgid "a global transaction ID"
msgstr ""

#: ../../peps/pep-0249.rst:1031
msgid "a branch qualifier"
msgstr ""

#: ../../peps/pep-0249.rst:1033
msgid ""
"For a particular global transaction, the first two components should be "
"the same for all resources.  Each resource in the global transaction "
"should be assigned a different branch qualifier."
msgstr ""

#: ../../peps/pep-0249.rst:1037
msgid "The various components must satisfy the following criteria:"
msgstr ""

#: ../../peps/pep-0249.rst:1039
msgid "format ID: a non-negative 32-bit integer."
msgstr ""

#: ../../peps/pep-0249.rst:1041
msgid ""
"global transaction ID and branch qualifier: byte strings no longer than "
"64 characters."
msgstr ""

#: ../../peps/pep-0249.rst:1044
msgid "Transaction IDs are created with the `.xid()`_ Connection method:"
msgstr ""

#: ../../peps/pep-0249.rst:1061
msgid "`.xid`_\\ (*format_id*, *global_transaction_id*, *branch_qualifier*)"
msgstr ""

#: ../../peps/pep-0249.rst:1051
msgid ""
"Returns a transaction ID object suitable for passing to the `.tpc_*()`_ "
"methods of this connection."
msgstr ""

#: ../../peps/pep-0249.rst:1054 ../../peps/pep-0249.rst:1084
msgid ""
"If the database connection does not support TPC, a NotSupportedError_ is "
"raised."
msgstr ""

#: ../../peps/pep-0249.rst:1057
msgid ""
"The type of the object returned by `.xid()`_ is not defined, but it must "
"provide sequence behaviour, allowing access to the three components.  A "
"conforming database module could choose to represent transaction IDs with"
" tuples rather than a custom object."
msgstr ""

#: ../../peps/pep-0249.rst:1064
msgid "TPC Connection Methods"
msgstr ""

#: ../../peps/pep-0249.rst:1086
msgid "`.tpc_begin`_\\ (*xid*)"
msgstr ""

#: ../../peps/pep-0249.rst:1073
msgid "Begins a TPC transaction with the given transaction ID *xid*."
msgstr ""

#: ../../peps/pep-0249.rst:1075
msgid ""
"This method should be called outside of a transaction (*i.e.* nothing may"
" have executed since the last `.commit()`_ or `.rollback()`_)."
msgstr ""

#: ../../peps/pep-0249.rst:1079
msgid ""
"Furthermore, it is an error to call `.commit()`_ or `.rollback()`_ within"
" the TPC transaction. A ProgrammingError_ is raised, if the application "
"calls `.commit()`_ or `.rollback()`_ during an active TPC transaction."
msgstr ""

#: ../../peps/pep-0249.rst:1098
msgid "`.tpc_prepare`_\\ ()"
msgstr ""

#: ../../peps/pep-0249.rst:1092
msgid ""
"Performs the first phase of a transaction started with `.tpc_begin()`_.  "
"A ProgrammingError_ should be raised if this method outside of a TPC "
"transaction."
msgstr ""

#: ../../peps/pep-0249.rst:1096
msgid ""
"After calling `.tpc_prepare()`_, no statements can be executed until "
"`.tpc_commit()`_ or `.tpc_rollback()`_ have been called."
msgstr ""

#: ../../peps/pep-0249.rst:1118
msgid "`.tpc_commit`_\\ ([ *xid* ])"
msgstr ""

#: ../../peps/pep-0249.rst:1104
msgid ""
"When called with no arguments, `.tpc_commit()`_ commits a TPC transaction"
" previously prepared with `.tpc_prepare()`_."
msgstr ""

#: ../../peps/pep-0249.rst:1107
msgid ""
"If `.tpc_commit()`_ is called prior to `.tpc_prepare()`_, a single phase "
"commit is performed.  A transaction manager may choose to do this if only"
" a single resource is participating in the global transaction."
msgstr ""

#: ../../peps/pep-0249.rst:1112
msgid ""
"When called with a transaction ID *xid*, the database commits the given "
"transaction.  If an invalid transaction ID is provided, a "
"ProgrammingError_ will be raised.  This form should be called outside of "
"a transaction, and is intended for use in recovery."
msgstr ""

#: ../../peps/pep-0249.rst:1117 ../../peps/pep-0249.rst:1132
msgid "On return, the TPC transaction is ended."
msgstr ""

#: ../../peps/pep-0249.rst:1132
msgid "`.tpc_rollback`_\\ ([ *xid* ])"
msgstr ""

#: ../../peps/pep-0249.rst:1124
msgid ""
"When called with no arguments, `.tpc_rollback()`_ rolls back a TPC "
"transaction.  It may be called before or after `.tpc_prepare()`_."
msgstr ""

#: ../../peps/pep-0249.rst:1127
msgid ""
"When called with a transaction ID *xid*, it rolls back the given "
"transaction.  If an invalid transaction ID is provided, a "
"ProgrammingError_ is raised.  This form should be called outside of a "
"transaction, and is intended for use in recovery."
msgstr ""

#: ../../peps/pep-0249.rst:1144
msgid "`.tpc_recover`_\\ ()"
msgstr ""

#: ../../peps/pep-0249.rst:1138
msgid ""
"Returns a list of pending transaction IDs suitable for use with "
"``.tpc_commit(xid)`` or ``.tpc_rollback(xid)``."
msgstr ""

#: ../../peps/pep-0249.rst:1141
msgid ""
"If the database does not support transaction recovery, it may return an "
"empty list or raise NotSupportedError_."
msgstr ""

#: ../../peps/pep-0249.rst:1147
msgid "Frequently Asked Questions"
msgstr ""

#: ../../peps/pep-0249.rst:1149
msgid ""
"The database SIG often sees reoccurring questions about the DB API "
"specification. This section covers some of the issues people sometimes "
"have with the specification."
msgstr ""

#: ../../peps/pep-0249.rst:1153
msgid "**Question:**"
msgstr ""

#: ../../peps/pep-0249.rst:1155
msgid ""
"How can I construct a dictionary out of the tuples returned by "
"`.fetch*()`_:"
msgstr ""

#: ../../peps/pep-0249.rst:1158
msgid "**Answer:**"
msgstr ""

#: ../../peps/pep-0249.rst:1160
msgid ""
"There are several existing tools available which provide helpers for this"
" task. Most of them use the approach of using the column names defined in"
" the cursor attribute `.description`_ as basis for the keys in the row "
"dictionary."
msgstr ""

#: ../../peps/pep-0249.rst:1165
msgid ""
"Note that the reason for not extending the DB API specification to also "
"support dictionary return values for the `.fetch*()`_ methods is that "
"this approach has several drawbacks:"
msgstr ""

#: ../../peps/pep-0249.rst:1169
msgid ""
"Some databases don't support case-sensitive column names or auto-convert "
"them to all lowercase or all uppercase characters."
msgstr ""

#: ../../peps/pep-0249.rst:1172
msgid ""
"Columns in the result set which are generated by the query (e.g. using "
"SQL functions) don't map to table column names and databases usually "
"generate names for these columns in a very database specific way."
msgstr ""

#: ../../peps/pep-0249.rst:1177
msgid ""
"As a result, accessing the columns through dictionary keys varies between"
" databases and makes writing portable code impossible."
msgstr ""

#: ../../peps/pep-0249.rst:1183
msgid "Major Changes from Version 1.0 to Version 2.0"
msgstr ""

#: ../../peps/pep-0249.rst:1185
msgid ""
"The Python Database API 2.0 introduces a few major changes compared to "
"the 1.0 version. Because some of these changes will cause existing DB API"
" 1.0 based scripts to break, the major version number was adjusted to "
"reflect this change."
msgstr ""

#: ../../peps/pep-0249.rst:1190
msgid "These are the most important changes from 1.0 to 2.0:"
msgstr ""

#: ../../peps/pep-0249.rst:1192
msgid ""
"The need for a separate dbi module was dropped and the functionality "
"merged into the module interface itself."
msgstr ""

#: ../../peps/pep-0249.rst:1195
msgid ""
"New constructors and `Type Objects`_ were added for date/time values, the"
" ``RAW`` Type Object was renamed to ``BINARY``. The resulting set should "
"cover all basic data types commonly found in modern SQL databases."
msgstr ""

#: ../../peps/pep-0249.rst:1200
msgid ""
"New constants (apilevel_, threadsafety_, paramstyle_) and methods "
"(`.executemany()`_, `.nextset()`_) were added to provide better database "
"bindings."
msgstr ""

#: ../../peps/pep-0249.rst:1204
msgid ""
"The semantics of `.callproc()`_ needed to call stored procedures are now "
"clearly defined."
msgstr ""

#: ../../peps/pep-0249.rst:1207
msgid ""
"The definition of the `.execute()`_ return value changed. Previously, the"
" return value was based on the SQL statement type (which was hard to "
"implement right) — it is undefined now; use the more flexible "
"`.rowcount`_ attribute instead. Modules are free to return the old style "
"return values, but these are no longer mandated by the specification and "
"should be considered database interface dependent."
msgstr ""

#: ../../peps/pep-0249.rst:1215
msgid ""
"Class based exceptions_ were incorporated into the specification. Module "
"implementors are free to extend the exception layout defined in this "
"specification by subclassing the defined exception classes."
msgstr ""

#: ../../peps/pep-0249.rst:1220
msgid "Post-publishing additions to the DB API 2.0 specification:"
msgstr ""

#: ../../peps/pep-0249.rst:1222
msgid ""
"Additional optional DB API extensions to the set of core functionality "
"were specified."
msgstr ""

#: ../../peps/pep-0249.rst:1227
msgid "Open Issues"
msgstr ""

#: ../../peps/pep-0249.rst:1229
msgid ""
"Although the version 2.0 specification clarifies a lot of questions that "
"were left open in the 1.0 version, there are still some remaining issues "
"which should be addressed in future versions:"
msgstr ""

#: ../../peps/pep-0249.rst:1233
msgid ""
"Define a useful return value for `.nextset()`_ for the case where a new "
"result set is available."
msgstr ""

#: ../../peps/pep-0249.rst:1236
msgid ""
"Integrate the `decimal module "
"<http://docs.python.org/library/decimal.html>`__ ``Decimal`` object for "
"use as loss-less monetary and decimal interchange format."
msgstr ""

#: ../../peps/pep-0249.rst:1243
msgid "Footnotes"
msgstr "Notas de rodapé"

#: ../../peps/pep-0249.rst:1245
msgid ""
"As a guideline the connection constructor parameters should be "
"implemented as keyword parameters for more intuitive use and follow this "
"order of parameters:"
msgstr ""

#: ../../peps/pep-0249.rst:1250
msgid "Parameter"
msgstr ""

#: ../../peps/pep-0249.rst:1252
msgid "``dsn``"
msgstr ""

#: ../../peps/pep-0249.rst:1252
msgid "Data source name as string"
msgstr ""

#: ../../peps/pep-0249.rst:1253
msgid "``user``"
msgstr ""

#: ../../peps/pep-0249.rst:1253
msgid "User name as string (optional)"
msgstr ""

#: ../../peps/pep-0249.rst:1254
msgid "``password``"
msgstr ""

#: ../../peps/pep-0249.rst:1254
msgid "Password as string (optional)"
msgstr ""

#: ../../peps/pep-0249.rst:1255
msgid "``host``"
msgstr ""

#: ../../peps/pep-0249.rst:1255
msgid "Hostname (optional)"
msgstr ""

#: ../../peps/pep-0249.rst:1256
msgid "``database``"
msgstr ""

#: ../../peps/pep-0249.rst:1256
msgid "Database name (optional)"
msgstr ""

#: ../../peps/pep-0249.rst:1259
msgid "E.g. a connect could look like this::"
msgstr ""

#: ../../peps/pep-0249.rst:1263
msgid "Also see [13]_ regarding planned future additions to this list."
msgstr ""

#: ../../peps/pep-0249.rst:1265
msgid ""
"Module implementors should prefer ``numeric``, ``named`` or ``pyformat`` "
"over the other formats because these offer more clarity and flexibility."
msgstr ""

#: ../../peps/pep-0249.rst:1270
msgid ""
"If the database does not support the functionality required by the "
"method, the interface should throw an exception in case the method is "
"used."
msgstr ""

#: ../../peps/pep-0249.rst:1274
msgid ""
"The preferred approach is to not implement the method and thus have "
"Python generate an ``AttributeError`` in case the method is requested. "
"This allows the programmer to check for database capabilities using the "
"standard ``hasattr()`` function."
msgstr ""

#: ../../peps/pep-0249.rst:1279
msgid ""
"For some dynamically configured interfaces it may not be appropriate to "
"require dynamically making the method available. These interfaces should "
"then raise a ``NotSupportedError`` to indicate the non-ability to perform"
" the roll back when the method is invoked."
msgstr ""

#: ../../peps/pep-0249.rst:1285
msgid ""
"A database interface may choose to support named cursors by allowing a "
"string argument to the method. This feature is not part of the "
"specification, since it complicates semantics of the `.fetch*()`_ "
"methods."
msgstr ""

#: ../../peps/pep-0249.rst:1290
msgid ""
"The module will use the ``__getitem__`` method of the parameters object "
"to map either positions (integers) or names (strings) to parameter "
"values.  This allows for both sequences and mappings to be used as input."
msgstr ""

#: ../../peps/pep-0249.rst:1295
msgid ""
"The term *bound* refers to the process of binding an input value to a "
"database execution buffer. In practical terms, this means that the input "
"value is directly used as a value in the operation. The client should not"
" be required to \"escape\" the value so that it can be used — the value "
"should be equal to the actual database value."
msgstr ""

#: ../../peps/pep-0249.rst:1302
msgid ""
"Note that the interface may implement row fetching using arrays and other"
" optimizations. It is not guaranteed that a call to this method will only"
" move the associated cursor forward by one row."
msgstr ""

#: ../../peps/pep-0249.rst:1306
msgid ""
"The ``rowcount`` attribute may be coded in a way that updates its value "
"dynamically. This can be useful for databases that return usable "
"``rowcount`` values only after the first call to a `.fetch*()`_ method."
msgstr ""

#: ../../peps/pep-0249.rst:1311
msgid ""
"Implementation Note: Python C extensions will have to implement the "
"``tp_iter`` slot on the cursor object instead of the ``.__iter__()`` "
"method."
msgstr ""

#: ../../peps/pep-0249.rst:1315
msgid ""
"The term *number of affected rows* generally refers to the number of rows"
" deleted, updated or inserted by the last statement run on the database "
"cursor. Most databases will return the total number of rows that were "
"found by the corresponding ``WHERE`` clause of the statement. Some "
"databases use a different interpretation for ``UPDATE``\\s and only "
"return the number of rows that were changed by the ``UPDATE``, even "
"though the ``WHERE`` clause of the statement may have found more matching"
" rows. Database module authors should try to implement the more common "
"interpretation of returning the total number of rows found by the "
"``WHERE`` clause, or clearly document a different interpretation of the "
"``.rowcount`` attribute."
msgstr ""

#: ../../peps/pep-0249.rst:1328
msgid ""
"In Python 2 and earlier versions of this PEP, ``StandardError`` was used "
"as the base class for all DB-API exceptions. Since ``StandardError`` was "
"removed in Python 3, database modules targeting Python 3 should use "
"``Exception`` as base class instead. The PEP was updated to use "
"``Exception`` throughout the text, to avoid confusion. The change should "
"not affect existing modules or uses of those modules, since all DB-API "
"error exception classes are still rooted at the ``Error`` or ``Warning`` "
"classes."
msgstr ""

#: ../../peps/pep-0249.rst:1337
msgid ""
"In a future revision of the DB-API, the base class for ``Warning`` will "
"likely change to the builtin ``Warning`` class. At the time of writing of"
" the DB-API 2.0 in 1999, the warning framework in Python did not yet "
"exist."
msgstr ""

#: ../../peps/pep-0249.rst:1342
msgid ""
"Many database modules implementing the autocommit attribute will "
"automatically commit any pending transaction and then enter autocommit "
"mode. It is generally recommended to explicitly `.commit()`_ or "
"`.rollback()`_ transactions prior to changing the autocommit setting, "
"since this is portable across database modules."
msgstr ""

#: ../../peps/pep-0249.rst:1348
msgid ""
"In a future revision of the DB-API, we are going to introduce a new "
"method ``.setautocommit(value)``, which will allow setting the autocommit"
" mode, and make ``.autocommit`` a read-only attribute. Additionally, we "
"are considering to add a new standard keyword parameter ``autocommit`` to"
" the Connection constructor. Modules authors are encouraged to add these "
"changes in preparation for this change."
msgstr ""

#: ../../peps/pep-0249.rst:1357
msgid "Acknowledgements"
msgstr ""

#: ../../peps/pep-0249.rst:1359
msgid ""
"Many thanks go to Andrew Kuchling who converted the Python Database API "
"Specification 2.0 from the original HTML format into the PEP format in "
"2001."
msgstr ""

#: ../../peps/pep-0249.rst:1363
msgid ""
"Many thanks to James Henstridge for leading the discussion which led to "
"the standardization of the two-phase commit API extensions in 2008."
msgstr ""

#: ../../peps/pep-0249.rst:1366
msgid ""
"Many thanks to Daniele Varrazzo for converting the specification from "
"text PEP format to ReST PEP format, which allows linking to various parts"
" in 2012."
msgstr ""

#: ../../peps/pep-0249.rst:1371
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0249.rst:1373
msgid "This document has been placed in the Public Domain."
msgstr ""

#~ msgid ""
#~ "Return ``True`` if the connection is "
#~ "operating in autocommit (non- transactional)"
#~ " mode. Return ``False`` if the "
#~ "connection is operating in manual commit"
#~ " (transactional) mode."
#~ msgstr ""

