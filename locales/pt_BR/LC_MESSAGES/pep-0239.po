# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-14 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../peps/peps/pep-0239.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/peps/pep-0239.rst:3
msgid ""
"Christopher A. Craig <python-pep@ccraig.org>, Moshe Zadka <moshez@zadka.site."
"co.il>"
msgstr ""

#: ../../peps/peps/pep-0239.rst
msgid "Status"
msgstr "Status"

#: ../../peps/peps/pep-0239.rst:4
msgid "Rejected"
msgstr ""

#: ../../peps/peps/pep-0239.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/peps/pep-0239.rst:5
msgid "Standards Track"
msgstr ""

#: ../../peps/peps/pep-0239.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/peps/pep-0239.rst:6
msgid "11-Mar-2001"
msgstr ""

#: ../../peps/peps/pep-0239.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/peps/pep-0239.rst:7
msgid "2.2"
msgstr ""

#: ../../peps/peps/pep-0239.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/peps/pep-0239.rst:8
msgid "16-Mar-2001"
msgstr ""

#: ../../peps/peps/pep-0239.rst:12
msgid ""
"The needs outlined in the rationale section have been addressed to some "
"extent by the acceptance of :pep:`327` for decimal arithmetic.  Guido also "
"noted, \"Rational arithmetic was the default 'exact' arithmetic in ABC and "
"it did not work out as expected\".  See the python-dev discussion on 17 June "
"2005 [1]_."
msgstr ""

#: ../../peps/peps/pep-0239.rst:18
msgid ""
"*Postscript:* With the acceptance of :pep:`3141`, \"A Type Hierarchy for "
"Numbers\", a 'Rational' numeric abstract base class was added with a "
"concrete implementation in the 'fractions' module."
msgstr ""

#: ../../peps/peps/pep-0239.rst:25
msgid "Abstract"
msgstr ""

#: ../../peps/peps/pep-0239.rst:27
msgid ""
"Python has no numeric type with the semantics of an unboundedly precise "
"rational number.  This proposal explains the semantics of such a type, and "
"suggests builtin functions and literals to support such a type.  This PEP "
"suggests no literals for rational numbers; that is left for :pep:`another "
"PEP <240>`."
msgstr ""

#: ../../peps/peps/pep-0239.rst:35
msgid "Rationale"
msgstr ""

#: ../../peps/peps/pep-0239.rst:37
msgid ""
"While sometimes slower and more memory intensive (in general, unboundedly "
"so) rational arithmetic captures more closely the mathematical ideal of "
"numbers, and tends to have behavior which is less surprising to newbies.  "
"Though many Python implementations of rational numbers have been written, "
"none of these exist in the core, or are documented in any way.  This has "
"made them much less accessible to people who are less Python-savvy."
msgstr ""

#: ../../peps/peps/pep-0239.rst:47
msgid "RationalType"
msgstr ""

#: ../../peps/peps/pep-0239.rst:49
msgid ""
"There will be a new numeric type added called ``RationalType``.  Its unary "
"operators will do the obvious thing.  Binary operators will coerce integers "
"and long integers to rationals, and rationals to floats and complexes."
msgstr ""

#: ../../peps/peps/pep-0239.rst:54
msgid ""
"The following attributes will be supported: ``.numerator`` and ``."
"denominator``.  The language definition will promise that::"
msgstr ""

#: ../../peps/peps/pep-0239.rst:59
msgid ""
"that the GCD of the numerator and the denominator is 1 and that the "
"denominator is positive."
msgstr ""

#: ../../peps/peps/pep-0239.rst:62
msgid ""
"The method ``r.trim(max_denominator)`` will return the closest rational "
"``s`` to ``r`` such that ``abs(s.denominator) <= max_denominator``."
msgstr ""

#: ../../peps/peps/pep-0239.rst:67
msgid "The rational() Builtin"
msgstr ""

#: ../../peps/peps/pep-0239.rst:69
msgid ""
"This function will have the signature ``rational(n, d=1)``.  ``n`` and ``d`` "
"must both be integers, long integers or rationals.  A guarantee is made "
"that::"
msgstr ""

#: ../../peps/peps/pep-0239.rst:77
msgid "Open Issues"
msgstr ""

#: ../../peps/peps/pep-0239.rst:79
msgid ""
"Maybe the type should be called rat instead of rational. Somebody proposed "
"that we have \"abstract\" pure mathematical types named complex, real, "
"rational, integer, and \"concrete\" representation types with names like "
"float, rat, long, int."
msgstr ""

#: ../../peps/peps/pep-0239.rst:84
msgid ""
"Should a rational number with an integer value be allowed as a sequence "
"index?  For example, should ``s[5/3 - 2/3]`` be equivalent to ``s[1]``?"
msgstr ""

#: ../../peps/peps/pep-0239.rst:88
msgid ""
"Should ``shift`` and ``mask`` operators be allowed for rational numbers? For "
"rational numbers with integer values?"
msgstr ""

#: ../../peps/peps/pep-0239.rst:91
msgid ""
"Marcin 'Qrczak' Kowalczyk summarized the arguments for and against unifying "
"ints with rationals nicely on c.l.py"
msgstr ""

#: ../../peps/peps/pep-0239.rst:94
msgid "Arguments for unifying ints with rationals:"
msgstr ""

#: ../../peps/peps/pep-0239.rst:96
msgid ""
"Since ``2 == 2/1`` and maybe ``str(2/1) == '2'``, it reduces surprises where "
"objects seem equal but behave differently."
msgstr ""

#: ../../peps/peps/pep-0239.rst:99
msgid ""
"``/`` can be freely used for integer division when I *know* that there is no "
"remainder (if I am wrong and there is a remainder, there will probably be "
"some exception later)."
msgstr ""

#: ../../peps/peps/pep-0239.rst:103
msgid "Arguments against:"
msgstr ""

#: ../../peps/peps/pep-0239.rst:105
msgid ""
"When I use the result of ``/`` as a sequence index, it's usually an error "
"which should not be hidden by making the program working for some data, "
"since it will break for other data."
msgstr ""

#: ../../peps/peps/pep-0239.rst:109
msgid ""
"(this assumes that after unification int and rational would be different "
"types:) Types should rarely depend on values. It's easier to reason when the "
"type of a variable is known: I know how I can use it. I can determine that "
"something is an int and expect that other objects used in this place will be "
"ints too."
msgstr ""

#: ../../peps/peps/pep-0239.rst:115
msgid ""
"(this assumes the same type for them:) Int is a good type in itself, not to "
"be mixed with rationals.  The fact that something is an integer should be "
"expressible as a statement about its type. Many operations require ints and "
"don't accept rationals. It's natural to think about them as about different "
"types."
msgstr ""

#: ../../peps/peps/pep-0239.rst:124
msgid "References"
msgstr "Referências"

#: ../../peps/peps/pep-0239.rst:126
msgid ""
"Raymond Hettinger, Propose rejection of PEPs 239 and 240 -- a builtin "
"rational type and rational literals https://mail.python.org/pipermail/python-"
"dev/2005-June/054281.html"
msgstr ""

#: ../../peps/peps/pep-0239.rst:131
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/peps/pep-0239.rst:133
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."
