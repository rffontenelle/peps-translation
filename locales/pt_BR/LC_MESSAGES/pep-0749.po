# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-14 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: pt_BR\n"
"Language-Team: pt_BR <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../peps/peps/pep-0749.rst
msgid "Author"
msgstr ""

#: ../../peps/peps/pep-0749.rst:3
msgid "Jelle Zijlstra <jelle.zijlstra@gmail.com>"
msgstr ""

#: ../../peps/peps/pep-0749.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/peps/pep-0749.rst:4
msgid "https://discuss.python.org/t/pep-749-implementing-pep-649/54974"
msgstr ""

#: ../../peps/peps/pep-0749.rst
msgid "Status"
msgstr ""

#: ../../peps/peps/pep-0749.rst:5
msgid "Draft"
msgstr ""

#: ../../peps/peps/pep-0749.rst
msgid "Type"
msgstr ""

#: ../../peps/peps/pep-0749.rst:6
msgid "Standards Track"
msgstr ""

#: ../../peps/peps/pep-0749.rst
msgid "Topic"
msgstr ""

#: ../../peps/peps/pep-0749.rst:7
msgid "Typing"
msgstr ""

#: ../../peps/peps/pep-0749.rst
msgid "Requires"
msgstr ""

#: ../../peps/peps/pep-0749.rst:8
msgid "649"
msgstr ""

#: ../../peps/peps/pep-0749.rst
msgid "Created"
msgstr ""

#: ../../peps/peps/pep-0749.rst:9
msgid "28-May-2024"
msgstr ""

#: ../../peps/peps/pep-0749.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/peps/pep-0749.rst:10
msgid "3.14"
msgstr ""

#: ../../peps/peps/pep-0749.rst
msgid "Post-History"
msgstr ""

#: ../../peps/peps/pep-0749.rst:11
msgid ""
"`04-Jun-2024 <https://discuss.python.org/t/pep-749-implementing-"
"pep-649/54974>`__"
msgstr ""

#: ../../peps/peps/pep-0749.rst:15
msgid "Abstract"
msgstr ""

#: ../../peps/peps/pep-0749.rst:17
msgid ""
"This PEP supplements :pep:`649` by providing various tweaks and additions to "
"its specification:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:20
msgid ""
"``from __future__ import annotations`` (:pep:`563`) will continue to exist "
"with its current behavior at least until Python 3.13 reaches its end-of-"
"life. Subsequently, it will be deprecated and eventually removed."
msgstr ""

#: ../../peps/peps/pep-0749.rst:23
msgid ""
"A new standard library module, ``annotationlib``, is added to provide "
"tooling for annotations. It will include the ``get_annotations()`` function, "
"an enum for annotation formats, a ``ForwardRef`` class, and a helper "
"function for calling ``__annotate__`` functions."
msgstr ""

#: ../../peps/peps/pep-0749.rst:26
msgid ""
"Annotations in the REPL are lazily evaluated, just like other module-level "
"annotations."
msgstr ""

#: ../../peps/peps/pep-0749.rst:27
msgid ""
"We specify the behavior of wrapper objects that provide annotations, such "
"as :py:func:`classmethod` and code that uses :py:func:`functools.wraps`."
msgstr ""

#: ../../peps/peps/pep-0749.rst:29
msgid ""
"There will not be a code flag for marking ``__annotate__`` functions that "
"can be run in a \"fake globals\" environment."
msgstr ""

#: ../../peps/peps/pep-0749.rst:31
msgid ""
"Setting the ``__annotations__`` attribute directly will not affect the "
"``__annotate__`` attribute."
msgstr ""

#: ../../peps/peps/pep-0749.rst:32
msgid ""
"We add functionality to allow evaluating type alias values and type "
"parameter bounds and defaults (which were added by :pep:`695` and :pep:"
"`696`) using PEP 649-like semantics."
msgstr ""

#: ../../peps/peps/pep-0749.rst:36
msgid "Motivation"
msgstr ""

#: ../../peps/peps/pep-0749.rst:38
msgid ""
":pep:`649` provides an excellent framework for creating better semantics for "
"annotations in Python. It solves a common pain point for users of "
"annotations, including those using static type hints as well as those using "
"runtime typing, and it makes the language more elegant and powerful. The PEP "
"was originally proposed in 2021 for Python 3.10, and it was accepted in "
"2023. However, the implementation took longer than anticipated, and now the "
"PEP is expected to be implemented in Python 3.14."
msgstr ""

#: ../../peps/peps/pep-0749.rst:46
msgid ""
"I have started working on the implementation of the PEP in CPython. I found "
"that the PEP leaves some areas underspecified, and some of its decisions in "
"corner cases are questionable. This new PEP proposes several changes and "
"additions to the specification to address these issues."
msgstr ""

#: ../../peps/peps/pep-0749.rst:51
msgid ""
"This PEP supplements rather than supersedes PEP 649. The changes proposed "
"here should make the overall user experience better, but they do not change "
"the general framework of the earlier PEP."
msgstr ""

#: ../../peps/peps/pep-0749.rst:57
msgid "The future of ``from __future__ import annotations``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:59
msgid ""
":pep:`563` previously introduced the future import ``from __future__ import "
"annotations``, which changes all annotations to strings. :pep:`649` proposes "
"an alternative approach that does not require this future import, and states:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:63
msgid ""
"If this PEP is accepted, PEP 563 will be deprecated and eventually removed."
msgstr ""

#: ../../peps/peps/pep-0749.rst:65
msgid "However, the PEP does not provide a detailed plan for this deprecation."
msgstr ""

#: ../../peps/peps/pep-0749.rst:67
msgid ""
"There is some previous discussion of this topic `on Discourse <https://"
"discuss.python.org/t/pep-649-deferred-evaluation-of-annotations-tentatively-"
"accepted/21331/44>`__ (note that in the linked post I proposed something "
"different from what is proposed here)."
msgstr ""

#: ../../peps/peps/pep-0749.rst:71 ../../peps/peps/pep-0749.rst:174
#: ../../peps/peps/pep-0749.rst:320 ../../peps/peps/pep-0749.rst:367
#: ../../peps/peps/pep-0749.rst:426 ../../peps/peps/pep-0749.rst:457
#: ../../peps/peps/pep-0749.rst:482
msgid "Specification"
msgstr ""

#: ../../peps/peps/pep-0749.rst:73
msgid "We suggest the following deprecation plan:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:75
msgid ""
"In Python 3.14, ``from __future__ import annotations`` will continue to work "
"as it did before, converting annotations into strings."
msgstr ""

#: ../../peps/peps/pep-0749.rst:77
msgid ""
"Sometime after the last release that did not support :pep:`649` semantics "
"(expected to be 3.13) reaches its end-of-life, ``from __future__ import "
"annotations`` is deprecated. Compiling any code that uses the future import "
"will emit a :py:exc:`DeprecationWarning`. This will happen no sooner than "
"the first release after Python 3.13 reaches its end-of-life, but the "
"community may decide to wait longer."
msgstr ""

#: ../../peps/peps/pep-0749.rst:82
msgid ""
"After at least two releases, the future import is removed, and annotations "
"are always evaluated as per :pep:`649`. Code that continues to use the "
"future import will raise a :py:exc:`SyntaxError`, similar to any other "
"undefined future import."
msgstr ""

#: ../../peps/peps/pep-0749.rst:87 ../../peps/peps/pep-0749.rst:253
msgid "Rejected alternatives"
msgstr ""

#: ../../peps/peps/pep-0749.rst:89
msgid ""
"*Immediately make the future import a no-op*: We considered applying :pep:"
"`649` semantics to all code in Python 3.14, making the future import a no-"
"op. However, this would break code that works in 3.13 under the following "
"set of conditions:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:93
msgid "``__future__ import annotations`` is active"
msgstr ""

#: ../../peps/peps/pep-0749.rst:94
msgid "There are annotations that rely on forward references"
msgstr ""

#: ../../peps/peps/pep-0749.rst:95
msgid ""
"Annotations are eagerly evaluated at import time, for example by a metaclass "
"or class or function decorator. For example, this currently applies to the "
"released version of ``typing_extensions.TypedDict``."
msgstr ""

#: ../../peps/peps/pep-0749.rst:99
msgid ""
"This is expected to be a common pattern, so we cannot afford to break such "
"code during the upgrade from 3.13 to 3.14."
msgstr ""

#: ../../peps/peps/pep-0749.rst:102
msgid ""
"Such code would still break when the future import is eventually removed. "
"However, this is many years in the future, giving affected decorators plenty "
"of time to update their code."
msgstr ""

#: ../../peps/peps/pep-0749.rst:105
msgid ""
"*Immediately deprecate the future import*: Instead of waiting until Python "
"3.13 reaches its end-of-life, we could immediately start emitting warnings "
"when the future import is used. However, many libraries are already using "
"``from __future__ import annotations`` as an elegant way to enable "
"unrestricted forward references in their annotations. If we deprecate the "
"future import immediately, it would be impossible for these libraries to use "
"unrestricted forward references on all supported Python versions while "
"avoiding deprecation warnings: unlike other features deprecated from the "
"standard library, a ``__future__`` import must be the first statement in a "
"given module, meaning it would be impossible to only conditionally import "
"``__future__.annotations`` on Python 3.13 and lower. (The necessary ``sys."
"version_info`` check would count as a statement preceding the ``__future__`` "
"import.)"
msgstr ""

#: ../../peps/peps/pep-0749.rst:116
msgid ""
"*Keep the future import around forever*: We could also decide to keep the "
"future import indefinitely. However, this would permanently bifurcate the "
"behavior of the Python language. This is undesirable; the language should "
"have only a single set of semantics, not two permanently different modes."
msgstr ""

#: ../../peps/peps/pep-0749.rst:121
msgid ""
"*Make the future import a no-op in the future*: Instead of eventually making "
"``from __future__ import annotations`` a ``SyntaxError``, we could make it "
"do nothing instead at some point after Python 3.13 reaches its end-of-life. "
"This still has some of the same issues outlined above around making it a no-"
"op now, although the ecosystem would have had much longer to adapt. It is "
"better to have users explicitly remove the future import from their code in "
"the future once they have confirmed they do not rely on stringized "
"annotations."
msgstr ""

#: ../../peps/peps/pep-0749.rst:130
msgid "New ``annotationlib`` module"
msgstr ""

#: ../../peps/peps/pep-0749.rst:132
msgid ""
":pep:`649` proposes to add tooling related to annotations to the :py:mod:"
"`inspect` module. However, that module is rather large, has direct or "
"indirect dependencies on at least 35 other standard library modules, and is "
"so slow to import that other standard library modules are often discouraged "
"from importing it. Furthermore, we anticipate adding more tools in addition "
"to the :py:func:`inspect.get_annotations` function and the ``VALUE``, "
"``FORWARDREF``, and ``SOURCE`` formats."
msgstr ""

#: ../../peps/peps/pep-0749.rst:139
msgid ""
"A new standard library module provides a logical home for this functionality "
"and also enables us to add more tooling that is useful for consumers of "
"annotations."
msgstr ""

#: ../../peps/peps/pep-0749.rst:143
msgid "Rationale"
msgstr ""

#: ../../peps/peps/pep-0749.rst:145
msgid ""
":pep:`649` indicates that :py:class:`!typing.ForwardRef` should be used to "
"implement the ``FORWARDREF`` format in :py:func:`inspect.get_annotations`. "
"However, the existing implementation of :py:class:`!typing.ForwardRef` is "
"intertwined with the rest of the :py:mod:`!typing` module, and it would not "
"make sense to add :py:mod:`!typing`-specific behavior to the generic "
"``get_annotations()`` function. Furthermore, :py:class:`!typing.ForwardRef` "
"is a problematic class: it is public and documented, but the documentation "
"lists no attributes or methods for it. Nonetheless, third-party libraries "
"make use of some of its undocumented attributes. For instance, `Pydantic "
"<https://github.com/pydantic/pydantic/"
"blob/00ff77ed37589d924d3c10e0d5a48a7ef679a0d7/pydantic/v1/typing.py#L66>`__ "
"and `Typeguard <https://github.com/agronholm/typeguard/"
"blob/016f8139f5a0a63147d68df9558cc5584cd2c49a/src/typeguard/_utils."
"py#L44>`__ use the ``_evaluate`` method; `beartype <https://github.com/"
"beartype/beartype/blob/0b4453f83c7ed4be054d8733aab8075e1478e166/beartype/"
"_util/hint/pep/proposal/pep484585/utilpep484585ref.py#L210>`__ and "
"`pyanalyze <https://github.com/quora/pyanalyze/"
"blob/9e401724f9d035cf138b72612834b6d5a00eb8e8/pyanalyze/annotations."
"py#L509>`__ use the ``__forward_arg__`` attribute."
msgstr ""

#: ../../peps/peps/pep-0749.rst:158
msgid ""
"We replace the existing but poorly specified :py:class:`!typing.ForwardRef` "
"with a new class, ``annotationlib.ForwardRef``. It is designed to be mostly "
"compatible with existing uses of the :py:class:`!typing.ForwardRef` class, "
"but without the behaviors specific to the :py:mod:`!typing` module. For "
"compatibility with existing users, we keep the private ``_evaluate`` method, "
"but mark it as deprecated. It delegates to a new public function in the :py:"
"mod:`!typing` module, ``typing.evaluate_forward_ref``, that is designed to "
"evaluate forward references in a way that is specific to type hints."
msgstr ""

#: ../../peps/peps/pep-0749.rst:166
msgid ""
"We add a function ``annotationlib.call_annotate_function`` as a helper for "
"calling ``__annotate__`` functions. This is a useful building block when "
"implementing functionality that needs to partially evaluate annotations "
"while a class is being constructed. For example, the implementation of :py:"
"class:`typing.NamedTuple` needs to retrieve the annotations from a class "
"namespace dictionary before the namedtuple class itself can be constructed, "
"because the annotations determine what fields exist on the namedtuple."
msgstr ""

#: ../../peps/peps/pep-0749.rst:176
msgid ""
"A new module, ``annotationlib``, is added to the standard library. Its aim "
"is to provide tooling for introspecting and wrapping annotations."
msgstr ""

#: ../../peps/peps/pep-0749.rst:179
msgid ""
"The exact contents of the module are not yet specified. We will add support "
"for :pep:`649` semantics to standard library functionality that uses "
"annotations, such as :py:mod:`dataclasses` and :py:class:`typing.TypedDict`, "
"and use the experience to inform the design of the new module."
msgstr ""

#: ../../peps/peps/pep-0749.rst:184
msgid "The module will contain the following functionality:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:186
msgid ""
"``get_annotations()``: A function that returns the annotations of a "
"function, module, or class. This will replace :py:func:`inspect."
"get_annotations`. The latter will delegate to the new function. It may "
"eventually be deprecated, but to minimize disruption, we do not propose an "
"immediate deprecation."
msgstr ""

#: ../../peps/peps/pep-0749.rst:190
msgid ""
"``Format``: an enum that contains the possible formats of annotations. This "
"will replace the ``VALUE``, ``FORWARDREF``, and ``SOURCE`` formats in :pep:"
"`649`. PEP 649 proposed to make these values global members of the :py:mod:"
"`inspect` module; we prefer to place them within an enum."
msgstr ""

#: ../../peps/peps/pep-0749.rst:194
msgid ""
"``ForwardRef``: a class representing a forward reference; it may be returned "
"by ``get_annotations()`` when the format is ``FORWARDREF``. The existing "
"class :py:class:`typing.ForwardRef` will become an alias of this class. Its "
"members include:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:198
msgid "``__forward_arg__``: the string argument of the forward reference"
msgstr ""

#: ../../peps/peps/pep-0749.rst:199
msgid ""
"``evaluate(globals=None, locals=None, type_params=None, owner=None)``: a "
"method that attempts to evaluate the forward reference. The ``ForwardRef`` "
"object may hold a reference to the globals and other namespaces of the "
"object that it originated from. If so, these namespaces may be used to "
"evaluate the forward reference. The *owner* argument may be the object that "
"holds the original annotation, such as the class or module object; it is "
"used to extract the globals and locals namespaces if these are not provided."
msgstr ""

#: ../../peps/peps/pep-0749.rst:206
msgid ""
"``_evaluate()``, with the same interface as the existing ``ForwardRef."
"_evaluate`` method. It will be undocumented and immediately deprecated. It "
"is provided for compatibility with existing users of ``typing.ForwardRef``."
msgstr ""

#: ../../peps/peps/pep-0749.rst:210
msgid ""
"``call_annotate_function(func: Callable, format: Format)``: a helper for "
"calling an ``__annotate__`` function with a given format. If the function "
"does not support this format, ``call_annotate_function()`` will set up a "
"\"fake globals\" environment, as described in :pep:`649`, and use that "
"environment to return the desired annotations format."
msgstr ""

#: ../../peps/peps/pep-0749.rst:215
msgid ""
"``call_evaluate_function(func: Callable | None, format: Format)``: similar "
"to ``call_annotate_function``, but does not rely on the function returning "
"an annotations dictionary. This is intended to be used for evaluating "
"deferred attributes introduced by :pep:`695` and :pep:`696`; see below for "
"details. *func* may be ``None`` for convenience; if ``None`` is passed, the "
"function also returns ``None``."
msgstr ""

#: ../../peps/peps/pep-0749.rst:221
msgid ""
"A new function is also added to the :py:mod:`!typing` module, ``typing."
"evaluate_forward_ref``. This function is a wrapper around the ``ForwardRef."
"evaluate`` method, but it performs additional work that is specific to type "
"hints. For example, it recurses into complex types and evaluates additional "
"forward references within these types."
msgstr ""

#: ../../peps/peps/pep-0749.rst:226
msgid ""
"Contrary to :pep:`649`, the annotation formats (``VALUE``, ``FORWARDREF``, "
"and ``SOURCE``) will not be added as global members of the :py:mod:`inspect` "
"module. The only recommended way to refer to these constants will be as "
"``annotationlib.Format.VALUE``."
msgstr ""

#: ../../peps/peps/pep-0749.rst:231
msgid "Open issues"
msgstr ""

#: ../../peps/peps/pep-0749.rst:233
msgid "What should this module be called? Some ideas:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:235
msgid ""
"``annotations``: The most obvious name, but it may cause confusion with the "
"existing ``from __future__ import annotations``, because users may have both "
"``import annotations`` and ``from __future__ import annotations`` in the "
"same module. The use of a common word as the name will make the module "
"harder to search for. There is a PyPI package :pypi:`annotations`, but it "
"had only a single release in 2015 and looks abandoned."
msgstr ""

#: ../../peps/peps/pep-0749.rst:240
msgid ""
"``annotools``: Analogous to :py:mod:`itertools` and :py:mod:`functools`, but "
"\"anno\" is a less obvious abbreviation than \"iter\" or \"func\". As of "
"this writing, there is no PyPI package with this name."
msgstr ""

#: ../../peps/peps/pep-0749.rst:243
msgid ""
"``annotationtools``: A more explicit version. There is a PyPI package :pypi:"
"`annotationtools`, which had a release in 2023."
msgstr ""

#: ../../peps/peps/pep-0749.rst:245
msgid ""
"``annotation_tools``: A variation of the above but without a PyPI conflict. "
"However, no other public standard library module has an underscore in its "
"name."
msgstr ""

#: ../../peps/peps/pep-0749.rst:247
msgid ""
"``annotationslib``: Analogous to :py:mod:`tomllib`, :py:mod:`pathlib`, and :"
"py:mod:`importlib`. There is no PyPI package with this name."
msgstr ""

#: ../../peps/peps/pep-0749.rst:249
msgid ""
"``annotationlib``: Similar to the above, but one character shorter and "
"subjectively reads better. Also not taken on PyPI."
msgstr ""

#: ../../peps/peps/pep-0749.rst:255
msgid ""
"*Add the functionality to the inspect module*: As described above, the :py:"
"mod:`inspect` module is already quite large, and its import time is "
"prohibitive for some use cases."
msgstr ""

#: ../../peps/peps/pep-0749.rst:259
msgid ""
"*Add the functionality to the typing module*: While annotations are mostly "
"used for typing, they may also be used for other purposes. We prefer to keep "
"a clean separation between functionality for introspecting annotations and "
"functionality that is exclusively meant for type hints."
msgstr ""

#: ../../peps/peps/pep-0749.rst:264
msgid ""
"*Add the functionality to the types module*: The :py:mod:`types` module is "
"meant for functionality related to *types*, and annotations can exist on "
"functions and modules, not only on types."
msgstr ""

#: ../../peps/peps/pep-0749.rst:268
msgid ""
"*Develop this functionality in a third-party package*: The functionality in "
"this new module will be pure Python code, and it is possible to implement a "
"third-party package that provides the same functionality by interacting "
"directly with ``__annotate__`` functions generated by the interpreter. "
"However, the functionality of the proposed new module will certainly be "
"useful in the standard library itself (e.g., for implementing :py:mod:"
"`dataclasses` and :py:class:`typing.NamedTuple`), so it makes sense to "
"include it in the standard library."
msgstr ""

#: ../../peps/peps/pep-0749.rst:276
msgid ""
"*Add this functionality to a private module*: It would be possible to "
"initially develop the module in a private standard library module (e.g., "
"``_annotations``), and publicize it only after we have gained more "
"experience with the API. However, we already know that we will need parts of "
"this module for the standard library itself (e.g., for implementing :py:mod:"
"`!dataclasses` and :py:class:`!typing.NamedTuple`). Even if we make it "
"private, the module will inevitably get used by third-party users. It is "
"preferable to start with a clear, documented API from the beginning, to "
"enable third-party users to support :pep:`649` semantics as thoroughly as "
"the standard library. The module will immediately be used in other parts of "
"the standard library, ensuring that it covers a reasonable set of use cases."
msgstr ""

#: ../../peps/peps/pep-0749.rst:288
msgid "Behavior of the REPL"
msgstr ""

#: ../../peps/peps/pep-0749.rst:290
msgid ":pep:`649` specifies the following behavior of the interactive REPL:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:292
msgid ""
"For the sake of simplicity, in this case we forego delayed evaluation. "
"Module-level annotations in the REPL shell will continue to work exactly as "
"they do with “stock semantics”, evaluating immediately and setting the "
"result directly inside the ``__annotations__`` dict."
msgstr ""

#: ../../peps/peps/pep-0749.rst:297
msgid ""
"There are several problems with this proposed behavior. It makes the REPL "
"the only context where annotations are still evaluated immediately, which is "
"confusing for users and complicates the language."
msgstr ""

#: ../../peps/peps/pep-0749.rst:301
msgid ""
"It also makes the implementation of the REPL more complex, as it needs to "
"ensure that all statements are compiled in \"interactive\" mode, even if "
"their output does not need to be displayed. (This matters if there are "
"multiple statements in a single line evaluated by the REPL.)"
msgstr ""

#: ../../peps/peps/pep-0749.rst:306
msgid ""
"Most importantly, this breaks some plausible use cases that inexperienced "
"users could run into. A user might write the following in a file::"
msgstr ""

#: ../../peps/peps/pep-0749.rst:312
msgid ""
"Under :pep:`649` this would work fine: ``X`` is not yet defined when it is "
"used in the annotation for ``a``, but the annotation is lazily evaluated. "
"However, if a user were to paste this same code into the REPL and execute it "
"line by line, it would throw a ``NameError``, because the name ``X`` is not "
"yet defined."
msgstr ""

#: ../../peps/peps/pep-0749.rst:317
msgid ""
"This topic was previously discussed `on Discourse <https://discuss.python."
"org/t/pep-649-behavior-of-the-repl/54109>`__."
msgstr ""

#: ../../peps/peps/pep-0749.rst:322
msgid ""
"We propose to treat the interactive console like any other module-level "
"code, and make annotations lazily evaluated. This makes the language more "
"consistent and avoids subtle behavior changes between modules and the REPL."
msgstr ""

#: ../../peps/peps/pep-0749.rst:326
msgid ""
"Because the REPL is evaluated line by line, we would generate a new "
"``__annotate__`` function for every evaluated statement in the global scope "
"that contains annotations. Whenever a line containing annotations is "
"evaluated, the previous ``__annotate__`` function is lost:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:350
msgid ""
"There will be no ``__annotations__`` key in the global namespace of the "
"REPL. In module namespaces, this key is created lazily when the "
"``__annotations__`` descriptor of the module object is accessed, but in the "
"REPL there is no such module object."
msgstr ""

#: ../../peps/peps/pep-0749.rst:355
msgid ""
"Classes and functions defined within the REPL will also work like any other "
"classes, so evaluation of their annotations will be deferred. It is possible "
"to access the ``__annotations__`` and ``__annotate__`` attributes or use the "
"``annotationlib`` module to introspect the annotations."
msgstr ""

#: ../../peps/peps/pep-0749.rst:361
msgid "Wrappers that provide ``__annotations__``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:363
msgid ""
"Several objects in the standard library and elsewhere provide annotations "
"for their wrapped object. :pep:`649` does not specify how such wrappers "
"should behave."
msgstr ""

#: ../../peps/peps/pep-0749.rst:369
msgid ""
"Wrappers that provide annotations should be designed with the following "
"goals in mind:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:372
msgid ""
"Evaluation of ``__annotations__`` should be deferred for as long as "
"possible, consistent with the behavior of built-in functions, classes, and "
"modules."
msgstr ""

#: ../../peps/peps/pep-0749.rst:374
msgid ""
"Backward compatibility with the behavior prior to the implementation of :pep:"
"`649` should be preserved."
msgstr ""

#: ../../peps/peps/pep-0749.rst:376
msgid ""
"The ``__annotate__`` and ``__annotations__`` attributes should both be "
"supplied with semantics consistent to those of the wrapped object."
msgstr ""

#: ../../peps/peps/pep-0749.rst:379
msgid "More specifically:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:381
msgid ""
":py:func:`functools.update_wrapper` (and therefore :py:func:`functools."
"wraps`) will copy only the ``__annotate__`` attribute from the wrapped "
"object to the wrapper. The ``__annotations__`` descriptor on the wrapper "
"function will use the copied ``__annotate__``."
msgstr ""

#: ../../peps/peps/pep-0749.rst:385
msgid ""
"The constructors for :py:func:`classmethod` and :py:func:`staticmethod` "
"currently copy the ``__annotations__`` attribute from the wrapped object to "
"the wrapper. They will instead have writable attributes for ``__annotate__`` "
"and ``__annotations__``. Reading these attributes will retrieve the "
"corresponding attribute from the underlying callable and cache it in the "
"wrapper's ``__dict__``. Writing to these attributes will directly update the "
"``__dict__``, without affecting the wrapped callable."
msgstr ""

#: ../../peps/peps/pep-0749.rst:394
msgid "Remove code flag for marking ``__annotate__`` functions"
msgstr ""

#: ../../peps/peps/pep-0749.rst:396 ../../peps/peps/pep-0749.rst:440
#: ../../peps/peps/pep-0749.rst:520
msgid ":pep:`649` specifies:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:398
msgid ""
"This PEP assumes that third-party libraries may implement their own "
"``__annotate__`` methods, and those functions would almost certainly work "
"incorrectly when run in this \"fake globals\" environment. For that reason, "
"this PEP allocates a flag on code objects, one of the unused bits in "
"``co_flags``, to mean \"This code object can be run in a 'fake globals' "
"environment.\"  This makes the \"fake globals\" environment strictly opt-in, "
"and it's expected that only ``__annotate__`` methods generated by the Python "
"compiler will set it."
msgstr ""

#: ../../peps/peps/pep-0749.rst:409
msgid ""
"We have not found a need for this mechanism during our work to add :pep:"
"`649` support to the standard library. While it is true that custom "
"``__annotate__`` functions may not work well with the \"fake globals\" "
"environment, this technique is used only when the ``__annotate__`` function "
"raises :py:exc:`NotImplementedError` to signal that it does not support the "
"requested format. However, manually implemented ``__annotate__`` functions "
"are likely to support all three annotation formats; often, they will consist "
"of a call to ``annotationlib.call_annotate_function`` plus some "
"transformation of the result."
msgstr ""

#: ../../peps/peps/pep-0749.rst:420
msgid ""
"In addition, the proposed mechanism couples the implementation with low-"
"level details of the code object. The code object flags are CPython-specific "
"and the documentation :py:ref:`explicitly warns <inspect-module-co-flags>` "
"against relying on the values."
msgstr ""

#: ../../peps/peps/pep-0749.rst:428
msgid ""
"The standard library will use the \"fake globals\" technique on any "
"``__annotate__`` function that raises :py:exc:`NotImplementedError` when the "
"requested format is not supported."
msgstr ""

#: ../../peps/peps/pep-0749.rst:432
msgid ""
"Third-party code that implements ``__annotate__`` functions should either "
"support all three annotation formats, or be prepared to handle the \"fake "
"globals\" environment. This should be mentioned in the data model "
"documentation for ``__annotate__``."
msgstr ""

#: ../../peps/peps/pep-0749.rst:438
msgid "Effect of setting ``__annotations__``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:442
msgid ""
"Setting ``o.__annotations__`` to a legal value automatically sets ``o."
"__annotate__`` to ``None``."
msgstr ""

#: ../../peps/peps/pep-0749.rst:445
msgid ""
"We would prefer to keep ``__annotate__`` unchanged when ``__annotations__`` "
"is written to. Conceptually, ``__annotate__`` provides the ground truth and "
"``__annotations__`` is merely a cache, and we shouldn't throw away the "
"ground truth if the cache is modified."
msgstr ""

#: ../../peps/peps/pep-0749.rst:450
msgid ""
"The motivation for :pep:`649`'s behavior is to keep the two attributes in "
"sync. However, this is impossible in general; if the ``__annotations__`` "
"dictionary is modified in place, this will not be reflected in the "
"``__annotate__`` attribute. The overall mental model for this area will be "
"simpler if setting ``__annotations__`` has no effect on ``__annotate__``."
msgstr ""

#: ../../peps/peps/pep-0749.rst:459
msgid ""
"The value of ``__annotate__`` is not changed when ``__annotations__`` is set."
msgstr ""

#: ../../peps/peps/pep-0749.rst:462
msgid "Deferred evaluation of PEP 695 and 696 objects"
msgstr ""

#: ../../peps/peps/pep-0749.rst:464
msgid ""
"Since :pep:`649` was written, Python 3.12 and 3.13 gained support for "
"several new features that also use deferred evaluation, similar to the "
"behavior this PEP proposes for annotations:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:468
msgid ""
"The value of type aliases created through the :py:keyword:`type` statement (:"
"pep:`695`)"
msgstr ""

#: ../../peps/peps/pep-0749.rst:470
msgid ""
"The bound and constraints of :py:class:`typing.TypeVar` objects created "
"through the syntax for generics (:pep:`695`)"
msgstr ""

#: ../../peps/peps/pep-0749.rst:472
msgid ""
"The default value of :py:class:`typing.TypeVar`, :py:class:`ParamSpec`, and :"
"py:class:`typing.TypeVarTuple` objects (:pep:`696`)"
msgstr ""

#: ../../peps/peps/pep-0749.rst:475
msgid ""
"Currently, these objects use deferred evaluation, but there is no direct "
"access to the function object used for deferred evaluation. To enable the "
"same kind of introspection that is now possible for annotations, we propose "
"to expose the internal function objects, allowing users to evaluate them "
"using the FORWARDREF and SOURCE formats."
msgstr ""

#: ../../peps/peps/pep-0749.rst:484
msgid "We will add the following new attributes:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:486
msgid "``evaluate_value`` on :py:class:`typing.TypeAliasType`"
msgstr ""

#: ../../peps/peps/pep-0749.rst:487
msgid ""
"``evaluate_bound``, ``evaluate_constraints``, and ``evaluate_default`` on :"
"py:class:`typing.TypeVar`"
msgstr ""

#: ../../peps/peps/pep-0749.rst:488
msgid "``evaluate_default`` on :py:class:`typing.ParamSpec`"
msgstr ""

#: ../../peps/peps/pep-0749.rst:489
msgid "``evaluate_default`` on :py:class:`typing.TypeVarTuple`"
msgstr ""

#: ../../peps/peps/pep-0749.rst:491
msgid ""
"Except for ``evaluate_value``, these attributes may be ``None`` if the "
"object does not have a bound, constraints, or default. Otherwise, the "
"attribute is a callable, similar to an ``__annotate__`` function, that takes "
"a single integer argument and returns the evaluated value. Unlike "
"``__annotate__`` functions, these callables return a single value, not a "
"dictionary of annotations. These attributes are read-only."
msgstr ""

#: ../../peps/peps/pep-0749.rst:498
msgid ""
"Usually, users would use these attributes in combinations with "
"``annotationlib.call_evaluate_function``. For example, to get a "
"``TypeVar``'s bound in SOURCE format, one could write ``annotationlib."
"call_evaluate_function(T.evaluate_bound, annotationlib.Format.SOURCE)``."
msgstr ""

#: ../../peps/peps/pep-0749.rst:504
msgid "Miscellaneous implementation details"
msgstr ""

#: ../../peps/peps/pep-0749.rst:506
msgid ""
":pep:`649` goes into considerable detail on some aspects of the "
"implementation. To avoid confusion, we describe a few aspects where the "
"current implementation differs from that described in the PEP. However, "
"these details are not guaranteed to hold in the future, and they may change "
"without notice in the future, unless they are documented in the language "
"reference."
msgstr ""

#: ../../peps/peps/pep-0749.rst:513
msgid "Supported operations on ``ForwardRef`` objects"
msgstr ""

#: ../../peps/peps/pep-0749.rst:515
msgid ""
"The ``SOURCE`` format is implemented by the \"stringizer\" technique, where "
"the globals dictionary of a function is augmented so that every lookup "
"results in a special object that can be used to reconstruct the operations "
"that are performed on the object."
msgstr ""

#: ../../peps/peps/pep-0749.rst:522
msgid ""
"In practice, the \"stringizer\" functionality will be implemented in the "
"``ForwardRef`` object currently defined in the ``typing`` module.  "
"``ForwardRef`` will be extended to implement all stringizer functionality; "
"it will also be extended to support evaluating the string it contains, to "
"produce the real value (assuming all symbols referenced are defined)."
msgstr ""

#: ../../peps/peps/pep-0749.rst:530
msgid ""
"However, this is likely to lead to confusion in practice. An object that "
"implements stringizer functionality must implement almost all special "
"methods, including ``__getattr__`` and ``__eq__``, to return a new "
"stringizer. Such an object is confusing to work with: all operations "
"succeed, but they are likely to return different objects than the user "
"expects."
msgstr ""

#: ../../peps/peps/pep-0749.rst:537
msgid ""
"The current implementation instead implements only a few useful methods on "
"the ``ForwardRef`` class. During the evaluation of annotations, an instance "
"of a private stringizer class is used instead of ``ForwardRef``. After "
"evaluation completes, the implementation of the FORWARDREF format converts "
"these internal objects into ``ForwardRef`` objects."
msgstr ""

#: ../../peps/peps/pep-0749.rst:544
msgid "Signature of ``__annotate__`` functions"
msgstr ""

#: ../../peps/peps/pep-0749.rst:546
msgid ":pep:`649` specifies the signature of ``__annotate__`` functions as:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:548
msgid "``__annotate__(format: int) -> dict``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:550
msgid ""
"However, using ``format`` as a parameter name could lead to collisions if an "
"annotation uses a class named ``format``. The parameter should be positional-"
"only and have a name that cannot be a legal identifier in order to avoid "
"this problem."
msgstr ""

#: ../../peps/peps/pep-0749.rst:555
msgid ""
"The current implementation uses the name ``.format`` with a leading dot, but "
"the exact name should be considered an implementation detail and cannot be "
"relied upon."
msgstr ""

#: ../../peps/peps/pep-0749.rst:559
msgid "The documentation may still use the name ``format`` for simplicity."
msgstr ""

#: ../../peps/peps/pep-0749.rst:562
msgid "Backwards Compatibility"
msgstr ""

#: ../../peps/peps/pep-0749.rst:564
msgid ""
":pep:`649` provides a thorough discussion of the backwards compatibility "
"implications on existing code that uses either stock or :pep:`563` semantics."
msgstr ""

#: ../../peps/peps/pep-0749.rst:567
msgid ""
"However, there is another set of compatibility problems: new code that is "
"written assuming :pep:`649` semantics, but uses existing tools that eagerly "
"evaluate annotations. For example, consider a ``dataclass``-like class "
"decorator ``@annotator`` that retrieves the annotated fields in the class it "
"decorates, either by accessing ``__annotations__`` directly or by calling :"
"py:func:`inspect.get_annotations`."
msgstr ""

#: ../../peps/peps/pep-0749.rst:573
msgid "Once :pep:`649` is implemented, code like this will work fine::"
msgstr ""

#: ../../peps/peps/pep-0749.rst:580
msgid ""
"But this will not, unless ``@annotator`` is changed to use the new "
"``FORWARDREF`` format::"
msgstr ""

#: ../../peps/peps/pep-0749.rst:589
msgid ""
"This is not strictly a backwards compatibility issue, since no previously "
"working code would break; before :pep:`649`, this code would have raised "
"``NameError`` at runtime. In a sense, it is no different from any other new "
"Python feature that needs to be supported by third-party libraries. "
"Nevertheless, it is a serious issue for libraries that perform "
"introspection, and it is important that we make it as easy as possible for "
"libraries to support the new semantics in a straightforward, user-friendly "
"way."
msgstr ""

#: ../../peps/peps/pep-0749.rst:596
msgid ""
"We will update those parts of the standard library that are affected by this "
"problem, and we propose to add commonly useful functionality to the new "
"``annotationlib`` module, so third-party tools can use the same set of tools."
msgstr ""

#: ../../peps/peps/pep-0749.rst:602
msgid "Security Implications"
msgstr ""

#: ../../peps/peps/pep-0749.rst:604
msgid "None."
msgstr ""

#: ../../peps/peps/pep-0749.rst:608
msgid "How to Teach This"
msgstr ""

#: ../../peps/peps/pep-0749.rst:610
msgid ""
"The semantics of :pep:`649`, as modified by this PEP, should largely be "
"intuitive for users who add annotations to their code. We eliminate the need "
"for manually adding quotes around annotations that require forward "
"references, a major source of confusion for users."
msgstr ""

#: ../../peps/peps/pep-0749.rst:615
msgid ""
"For advanced users who need to introspect annotations, the story becomes "
"more complex. The documentation of the new ``annotationlib`` module will "
"serve as a reference for users who need to interact programmatically with "
"annotations."
msgstr ""

#: ../../peps/peps/pep-0749.rst:621
msgid "Reference Implementation"
msgstr ""

#: ../../peps/peps/pep-0749.rst:623
msgid ""
"The in-progress PR `#119891 <https://github.com/python/cpython/"
"pull/119891>`__ implements much of this PEP."
msgstr ""

#: ../../peps/peps/pep-0749.rst:627
msgid "Open Issues"
msgstr ""

#: ../../peps/peps/pep-0749.rst:629
msgid ""
"We may discover additional areas where :pep:`649` needs clarification or "
"amendment as we make progress on implementing it. Readers are encouraged to "
"follow the `CPython issue <https://github.com/python/cpython/"
"issues/119180>`__ tracking the implementation of the PEP and try out the "
"draft implementation. Any feedback may be incorporated into future versions "
"of this PEP."
msgstr ""

#: ../../peps/peps/pep-0749.rst:636
msgid "Should dataclass field types use deferred evaluation?"
msgstr ""

#: ../../peps/peps/pep-0749.rst:638
msgid ""
"The current draft implementation already supports deferred evaluation in "
"dataclasses, so this works:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:649
msgid ""
"However, the ``FORWARDREF`` format leaks into the field types of the "
"dataclass:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:656
msgid ""
"We could instead add deferred evaluation for the field type, similar to that "
"outlined above for type alias values."
msgstr ""

#: ../../peps/peps/pep-0749.rst:659
msgid "Accessing ``.type`` might throw an error:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:679
msgid ""
"But users could use ``annotationlib.call_evaluate_function`` to get the type "
"in other formats:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:688
msgid ""
"Other variations are possible. For example, we could leave the ``type`` "
"attribute unchanged, and only add the ``evaluate_type`` method. This avoids "
"unpleasant surprises where accessing ``.type`` may throw an exception."
msgstr ""

#: ../../peps/peps/pep-0749.rst:693
msgid "Acknowledgments"
msgstr ""

#: ../../peps/peps/pep-0749.rst:695
msgid ""
"First of all, I thank Larry Hastings for writing :pep:`649`. This PEP "
"modifies some of his initial decisions, but the overall design is still his."
msgstr ""

#: ../../peps/peps/pep-0749.rst:698
msgid ""
"I thank Carl Meyer and Alex Waygood for feedback on early drafts of this PEP."
msgstr ""

#: ../../peps/peps/pep-0749.rst:701
msgid "Appendix"
msgstr ""

#: ../../peps/peps/pep-0749.rst:704
msgid "Which expressions can be stringified?"
msgstr ""

#: ../../peps/peps/pep-0749.rst:706
msgid ""
":pep:`649` acknowledges that the stringifier cannot handle all expressions. "
"Now that we have a draft implementation, we can be more precise about the "
"expressions that can and cannot be handled. Below is a list of all "
"expressions in the Python AST that can and cannot be recovered by the "
"stringifier. The full list should probably not be added to the "
"documentation, but creating it is a useful exercise."
msgstr ""

#: ../../peps/peps/pep-0749.rst:712
msgid ""
"First, the stringifier of course cannot recover any information that is not "
"present in the compiled code, including comments, whitespace, "
"parenthesization, and operations that get simplified by the AST optimizer."
msgstr ""

#: ../../peps/peps/pep-0749.rst:716
msgid ""
"Second, the stringifier can intercept almost all operations that involve "
"names looked up in some scope, but it cannot intercept operations that "
"operate fully on constants. As a corollary, this also means it is not safe "
"to request the ``SOURCE`` format on untrusted code: Python is powerful "
"enough that it is possible to achieve arbitrary code execution even with no "
"access to any globals or builtins. For example:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:730
msgid ""
"(This particular example worked for me on the current implementation of a "
"draft of this PEP; the exact code may not keep working in the future.)"
msgstr ""

#: ../../peps/peps/pep-0749.rst:733
msgid "The following are supported (sometimes with caveats):"
msgstr ""

#: ../../peps/peps/pep-0749.rst:735
msgid "``BinOp``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:736
msgid "``UnaryOp``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:738
msgid ""
"``Invert`` (``~``), ``UAdd`` (``+``), and ``USub`` (``-``) are supported"
msgstr ""

#: ../../peps/peps/pep-0749.rst:739
msgid "``Not`` (``not``) is not supported"
msgstr ""

#: ../../peps/peps/pep-0749.rst:741
msgid "``Dict`` (except when using ``**`` unpacking)"
msgstr ""

#: ../../peps/peps/pep-0749.rst:742
msgid "``Set``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:743
msgid "``Compare``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:745
msgid "``Eq`` and ``NotEq`` are supported"
msgstr ""

#: ../../peps/peps/pep-0749.rst:746
msgid ""
"``Lt``, ``LtE``, ``Gt``, and ``GtE`` are supported, but the operand may be "
"flipped"
msgstr ""

#: ../../peps/peps/pep-0749.rst:747
msgid "``Is``, ``IsNot``, ``In``, and ``NotIn`` are not supported"
msgstr ""

#: ../../peps/peps/pep-0749.rst:749
msgid "``Call`` (except when using ``**`` unpacking)"
msgstr ""

#: ../../peps/peps/pep-0749.rst:750
msgid ""
"``Constant`` (though not the exact representation of the constant; for "
"example, escape sequences in strings are lost; hexadecimal numbers are "
"converted to decimal)"
msgstr ""

#: ../../peps/peps/pep-0749.rst:752
msgid "``Attribute`` (assuming the value is not a constant)"
msgstr ""

#: ../../peps/peps/pep-0749.rst:753
msgid "``Subscript`` (assuming the value is not a constant)"
msgstr ""

#: ../../peps/peps/pep-0749.rst:754
msgid "``Starred`` (``*`` unpacking)"
msgstr ""

#: ../../peps/peps/pep-0749.rst:755
msgid "``Name``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:756
msgid "``List``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:757
msgid "``Tuple``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:758
msgid "``Slice``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:760
msgid ""
"The following are unsupported, but throw an informative error when "
"encountered by the stringifier:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:763
msgid ""
"``FormattedValue`` (f-strings; error is not detected if conversion "
"specifiers like ``!r`` are used)"
msgstr ""

#: ../../peps/peps/pep-0749.rst:765
msgid "``JoinedStr`` (f-strings)"
msgstr ""

#: ../../peps/peps/pep-0749.rst:767
msgid "The following are unsupported and result in incorrect output:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:769
msgid "``BoolOp`` (``and`` and ``or``)"
msgstr ""

#: ../../peps/peps/pep-0749.rst:770
msgid "``IfExp``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:771
msgid "``Lambda``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:772
msgid "``ListComp``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:773
msgid "``SetComp``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:774
msgid "``DictComp``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:775
msgid "``GeneratorExp``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:777
msgid ""
"The following are disallowed in annotation scopes and therefore not relevant:"
msgstr ""

#: ../../peps/peps/pep-0749.rst:779
msgid "``NamedExpr`` (``:=``)"
msgstr ""

#: ../../peps/peps/pep-0749.rst:780
msgid "``Await``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:781
msgid "``Yield``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:782
msgid "``YieldFrom``"
msgstr ""

#: ../../peps/peps/pep-0749.rst:786
msgid "Copyright"
msgstr ""

#: ../../peps/peps/pep-0749.rst:788
msgid ""
"This document is placed in the public domain or under the CC0-1.0-Universal "
"license, whichever is more permissive."
msgstr ""
