# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0432.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0432.rst:5
msgid ""
"Alyssa Coghlan <ncoghlan@gmail.com>, Victor Stinner "
"<vstinner@python.org>, Eric Snow <ericsnowcurrently@gmail.com>"
msgstr ""

#: ../../peps/pep-0432.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/pep-0432.rst:8
msgid "capi-sig@python.org"
msgstr ""

#: ../../peps/pep-0432.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0432.rst:9
msgid "Withdrawn"
msgstr ""

#: ../../peps/pep-0432.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0432.rst:10
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0432.rst
msgid "Requires"
msgstr ""

#: ../../peps/pep-0432.rst:12
msgid "587"
msgstr ""

#: ../../peps/pep-0432.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0432.rst:13
msgid "28-Dec-2012"
msgstr ""

#: ../../peps/pep-0432.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0432.rst:14
msgid "28-Dec-2012, 02-Jan-2013, 30-Mar-2019, 28-Jun-2020"
msgstr ""

#: ../../peps/pep-0432.rst:19
msgid "PEP Withdrawal"
msgstr ""

#: ../../peps/pep-0432.rst:21
msgid ""
"From late 2012 to mid 2020, this PEP provided general background and "
"specific concrete proposals for making the CPython startup sequence "
"easier to maintain and the CPython runtime easier to embed as part of a "
"larger application."
msgstr ""

#: ../../peps/pep-0432.rst:25
msgid ""
"For most of that time, the changes were maintained either in a separate "
"feature branch, or else as underscore-prefixed private APIs in the main "
"CPython repo."
msgstr ""

#: ../../peps/pep-0432.rst:28
msgid ""
"In 2019, :pep:`587` migrated a subset of those API changes to the public "
"CPython API for Python 3.8+ (specifically, the PEP updated the "
"interpreter runtime to offer an explicitly multi-stage struct-based "
"configuration interface)."
msgstr ""

#: ../../peps/pep-0432.rst:32
msgid ""
"In June 2020, in response to a query from the Steering Council, the PEP "
"authors decided that it made sense to withdraw the original PEP, as "
"enough has changed since :pep:`432` was first written that we think any "
"further changes to the startup sequence and embedding API would be best "
"formulated as a new PEP (or PEPs) that take into account not only the "
"not-yet-implemented ideas from :pep:`432` that weren't considered "
"sufficiently well validated to make their way into :pep:`587`, but also "
"any feedback on the public :pep:`587` API, and any other lessons that "
"have been learned while adjusting the CPython implementation to be more "
"embedding and subinterpreter friendly."
msgstr ""

#: ../../peps/pep-0432.rst:42
msgid ""
"In particular, PEPs proposing the following changes, and any further "
"infrastructure changes needed to enable them, would likely still be worth"
" exploring:"
msgstr ""

#: ../../peps/pep-0432.rst:46
msgid ""
"shipping an alternate Python executable that ignores all user level "
"settings and runs in isolated mode by default, and would hence be more "
"suitable for execution of system level Python applications than the "
"default interpreter"
msgstr ""

#: ../../peps/pep-0432.rst:50
msgid ""
"enhancing the zipapp module to support the creation of single-file "
"executables from pure Python scripts (and potentially even Python "
"extension modules, given the introduction of multi-phase extension module"
" initialisation)"
msgstr ""

#: ../../peps/pep-0432.rst:53
msgid ""
"migrating the complex sys.path initialisation logic from C to Python in "
"order to improve test suite coverage and the general maintainability of "
"that code"
msgstr ""

#: ../../peps/pep-0432.rst:58
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0432.rst:60
msgid ""
"This PEP proposes a mechanism for restructuring the startup sequence for "
"CPython, making it easier to modify the initialization behaviour of the "
"reference interpreter executable, as well as making it easier to control "
"CPython's startup behaviour when creating an alternate executable or "
"embedding it as a Python execution engine inside a larger application."
msgstr ""

#: ../../peps/pep-0432.rst:66
msgid ""
"When implementation of this proposal is completed, interpreter startup "
"will consist of three clearly distinct and independently configurable "
"phases:"
msgstr ""

#: ../../peps/pep-0432.rst:69
msgid "Python core runtime preinitialization"
msgstr ""

#: ../../peps/pep-0432.rst:71
msgid "setting up memory management"
msgstr ""

#: ../../peps/pep-0432.rst:72
msgid ""
"determining the encodings used for system interfaces (including settings "
"passed in for later configuration phase)"
msgstr ""

#: ../../peps/pep-0432.rst:75
msgid "Python core runtime initialization"
msgstr ""

#: ../../peps/pep-0432.rst:77
msgid "ensuring C API is ready for use"
msgstr ""

#: ../../peps/pep-0432.rst:78
msgid "ensuring builtin and frozen modules are accessible"
msgstr ""

#: ../../peps/pep-0432.rst:80
msgid "Main interpreter configuration"
msgstr ""

#: ../../peps/pep-0432.rst:82
msgid "ensuring external modules are accessible"
msgstr ""

#: ../../peps/pep-0432.rst:83
msgid "(Note: the name of this phase is quite likely to change)"
msgstr ""

#: ../../peps/pep-0432.rst:85
msgid ""
"Changes are also proposed that impact main module execution and "
"subinterpreter initialization."
msgstr ""

#: ../../peps/pep-0432.rst:88
msgid ""
"Note: TBC = To Be Confirmed, TBD = To Be Determined. The appropriate "
"resolution for most of these should become clearer as the reference "
"implementation is developed."
msgstr ""

#: ../../peps/pep-0432.rst:94
msgid "Proposal"
msgstr ""

#: ../../peps/pep-0432.rst:96
msgid ""
"This PEP proposes that initialization of the CPython runtime be split "
"into three clearly distinct phases:"
msgstr ""

#: ../../peps/pep-0432.rst:99
msgid "core runtime preinitialization"
msgstr ""

#: ../../peps/pep-0432.rst:100
msgid "core runtime initialization"
msgstr ""

#: ../../peps/pep-0432.rst:101
msgid "main interpreter configuration"
msgstr ""

#: ../../peps/pep-0432.rst:103
msgid ""
"(Earlier versions proposed only two phases, but experience with "
"attempting to implement the PEP as an internal CPython refactoring showed"
" that at least 3 phases are needed to get clear separation of concerns)"
msgstr ""

#: ../../peps/pep-0432.rst:107
msgid "The proposed design also has significant implications for:"
msgstr ""

#: ../../peps/pep-0432.rst:109
msgid "main module execution"
msgstr ""

#: ../../peps/pep-0432.rst:110
msgid "subinterpreter initialization"
msgstr ""

#: ../../peps/pep-0432.rst:112
msgid ""
"In the new design, the interpreter will move through the following well-"
"defined phases during the initialization sequence:"
msgstr ""

#: ../../peps/pep-0432.rst:115
msgid "Uninitialized - haven't even started the pre-initialization phase yet"
msgstr ""

#: ../../peps/pep-0432.rst:116
msgid "Pre-Initialization - no interpreter available"
msgstr ""

#: ../../peps/pep-0432.rst:117
msgid ""
"Runtime Initialized - main interpreter partially available, "
"subinterpreter creation not yet available"
msgstr ""

#: ../../peps/pep-0432.rst:119
msgid ""
"Initialized - main interpreter fully available, subinterpreter creation "
"available"
msgstr ""

#: ../../peps/pep-0432.rst:122
msgid ""
":pep:`587` is a more detailed proposal that covers separating out the "
"Pre-Initialization phase from the last two phases, but doesn't allow "
"embedding applications to run arbitrary code while in the \"Runtime "
"Initialized\" state (instead, initializing the core runtime will also "
"always fully initialize the main interpreter, as that's the way the "
"native CPython CLI still works in Python 3.8)."
msgstr ""

#: ../../peps/pep-0432.rst:129
msgid ""
"As a concrete use case to help guide any design changes, and to solve a "
"known problem where the appropriate defaults for system utilities differ "
"from those for running user scripts, this PEP proposes the creation and "
"distribution of a separate system Python (``system-python``) executable "
"which, by default, operates in \"isolated mode\" (as selected by the "
"CPython ``-I`` switch), as well as the creation of an example stub binary"
" that just runs an appended zip archive (permitting single-file pure "
"Python executables) rather than going through the normal CPython startup "
"sequence."
msgstr ""

#: ../../peps/pep-0432.rst:138
msgid ""
"To keep the implementation complexity under control, this PEP does *not* "
"propose wholesale changes to the way the interpreter state is accessed at"
" runtime. Changing the order in which the existing initialization steps "
"occur in order to make the startup sequence easier to maintain is already"
" a substantial change, and attempting to make those other changes at the "
"same time will make the change significantly more invasive and much "
"harder to review. However, such proposals may be suitable topics for "
"follow-on PEPs or patches - one key benefit of this PEP and its related "
"subproposals is decreasing the coupling between the internal storage "
"model and the configuration interface, so such changes should be easier "
"once this PEP has been implemented."
msgstr ""

#: ../../peps/pep-0432.rst:151
msgid "Background"
msgstr ""

#: ../../peps/pep-0432.rst:153
msgid ""
"Over time, CPython's initialization sequence has become progressively "
"more complicated, offering more options, as well as performing more "
"complex tasks (such as configuring the Unicode settings for OS interfaces"
" in Python 3 [10]_, bootstrapping a pure Python implementation of the "
"import system, and implementing an isolated mode more suitable for system"
" applications that run with elevated privileges [6]_)."
msgstr ""

#: ../../peps/pep-0432.rst:160
msgid ""
"Much of this complexity is formally accessible only through the "
"``Py_Main`` and ``Py_Initialize`` APIs, offering embedding applications "
"little opportunity for customisation. This creeping complexity also makes"
" life difficult for maintainers, as much of the configuration needs to "
"take place prior to the ``Py_Initialize`` call, meaning much of the "
"Python C API cannot be used safely."
msgstr ""

#: ../../peps/pep-0432.rst:167
msgid ""
"A number of proposals are on the table for even *more* sophisticated "
"startup behaviour, such as better control over ``sys.path`` "
"initialization (e.g. easily adding additional directories on the command "
"line in a cross-platform fashion [7]_, controlling the configuration of "
"``sys.path[0]`` [8]_), easier configuration of utilities like coverage "
"tracing when launching Python subprocesses [9]_)."
msgstr ""

#: ../../peps/pep-0432.rst:174
msgid ""
"Rather than continuing to bolt such behaviour onto an already complicated"
" system indefinitely, this PEP proposes to start simplifying the status "
"quo by introducing a more structured startup sequence, with the aim of "
"making these further feature requests easier to implement."
msgstr ""

#: ../../peps/pep-0432.rst:179
msgid ""
"Originally the entire proposal was maintained in this one PEP, but that "
"proved impractical, so as parts of the proposed design stabilised, they "
"are now split out into their own PEPs, allowing progress to be made, even"
" while the details of the overall design are still evolving."
msgstr ""

#: ../../peps/pep-0432.rst:186
msgid "Key Concerns"
msgstr ""

#: ../../peps/pep-0432.rst:188
msgid ""
"There are a few key concerns that any change to the startup sequence "
"needs to take into account."
msgstr ""

#: ../../peps/pep-0432.rst:193
msgid "Maintainability"
msgstr ""

#: ../../peps/pep-0432.rst:195
msgid ""
"The CPython startup sequence as of Python 3.6 was difficult to "
"understand, and even more difficult to modify. It was not clear what "
"state the interpreter was in while much of the initialization code "
"executed, leading to behaviour such as lists, dictionaries and Unicode "
"values being created prior to the call to ``Py_Initialize`` when the "
"``-X`` or ``-W`` options are used [1]_."
msgstr ""

#: ../../peps/pep-0432.rst:201
msgid ""
"By moving to an explicitly multi-phase startup sequence, developers "
"should only need to understand:"
msgstr ""

#: ../../peps/pep-0432.rst:204
msgid ""
"which APIs and features are available prior to pre-configuration "
"(essentially none, except for the pre-configuration API itself)"
msgstr ""

#: ../../peps/pep-0432.rst:206
msgid ""
"which APIs and features are available prior to core runtime "
"configuration, and will implicitly run the pre-configuration with default"
" settings that match the behaviour of Python 3.6 if the pre-configuration"
" hasn't been run explicitly"
msgstr ""

#: ../../peps/pep-0432.rst:209
msgid ""
"which APIs and features are only available after the main interpreter has"
" been fully configured (which will hopefully be a relatively small subset"
" of the full C API)"
msgstr ""

#: ../../peps/pep-0432.rst:213
msgid ""
"The first two aspects of that are covered by :pep:`587`, while the "
"details of the latter distinction are still being considered."
msgstr ""

#: ../../peps/pep-0432.rst:216
msgid ""
"By basing the new design on a combination of C structures and Python data"
" types, it should also be easier to modify the system in the future to "
"add new configuration options."
msgstr ""

#: ../../peps/pep-0432.rst:222
msgid "Testability"
msgstr ""

#: ../../peps/pep-0432.rst:224
msgid ""
"One of the problems with the complexity of the CPython startup sequence "
"is the combinatorial explosion of possible interactions between different"
" configuration settings."
msgstr ""

#: ../../peps/pep-0432.rst:228
msgid ""
"This concern impacts both the design of the new initialisation system, "
"and the proposed approach for getting there."
msgstr ""

#: ../../peps/pep-0432.rst:233
msgid "Performance"
msgstr ""

#: ../../peps/pep-0432.rst:235
msgid ""
"CPython is used heavily to run short scripts where the runtime is "
"dominated by the interpreter initialization time. Any changes to the "
"startup sequence should minimise their impact on the startup overhead."
msgstr ""

#: ../../peps/pep-0432.rst:239
msgid ""
"Experience with the importlib migration suggests that the startup time is"
" dominated by IO operations. However, to monitor the impact of any "
"changes, a simple benchmark can be used to check how long it takes to "
"start and then tear down the interpreter:"
msgstr ""

#: ../../peps/pep-0432.rst:248
msgid ""
"Current numbers on my system for Python 3.7 (as built by the Fedora "
"project):"
msgstr ""

#: ../../peps/pep-0432.rst:255
msgid "(TODO: run this microbenchmark with perf rather than the stdlib timeit)"
msgstr ""

#: ../../peps/pep-0432.rst:257
msgid ""
"This PEP is not expected to have any significant effect on the startup "
"time, as it is aimed primarily at *reordering* the existing "
"initialization sequence, without making substantial changes to the "
"individual steps."
msgstr ""

#: ../../peps/pep-0432.rst:261
msgid ""
"However, if this simple check suggests that the proposed changes to the "
"initialization sequence may pose a performance problem, then a more "
"sophisticated microbenchmark will be developed to assist in "
"investigation."
msgstr ""

#: ../../peps/pep-0432.rst:267
msgid "Required Configuration Settings"
msgstr ""

#: ../../peps/pep-0432.rst:269
msgid ""
"See :pep:`587` for a detailed listing of CPython interpreter "
"configuration settings and the various means available for setting them."
msgstr ""

#: ../../peps/pep-0432.rst:274
msgid "Implementation Strategy"
msgstr ""

#: ../../peps/pep-0432.rst:276
msgid ""
"An initial attempt was made at implementing an earlier version of this "
"PEP for Python 3.4 [2]_, with one of the significant problems encountered"
" being merge conflicts after the initial structural changes were put in "
"place to start the refactoring process. Unlike some other previous major "
"changes, such as the switch to an AST-based compiler in Python 2.5, or "
"the switch to the importlib implementation of the import system in Python"
" 3.3, there is no clear way to structure a draft implementation that "
"won't be prone to the kinds of merge conflicts that afflicted the "
"original attempt."
msgstr ""

#: ../../peps/pep-0432.rst:285
msgid ""
"Accordingly, the implementation strategy was revised to instead first "
"implement this refactoring as a private API for CPython 3.7, and then "
"review the viability of exposing the new functions and structures as "
"public API elements in CPython 3.8."
msgstr ""

#: ../../peps/pep-0432.rst:290
msgid ""
"After the initial merge, Victor Stinner then proceeded to actually "
"migrate settings to the new structure in order to successfully implement "
"the :pep:`540` UTF-8 mode changes (which required the ability to track "
"all settings that had previously been decoded with the locale encoding, "
"and decode them again using UTF-8 instead). Eric Snow also migrated a "
"number of internal subsystems over as part of making the subinterpreter "
"feature more robust."
msgstr ""

#: ../../peps/pep-0432.rst:297
msgid ""
"That work showed that the detailed design originally proposed in this PEP"
" had a range of practical issues, so Victor designed and implemented an "
"improved private API (inspired by an earlier iteration of this PEP), "
"which :pep:`587` proposes to promote to a public API in Python 3.8."
msgstr ""

#: ../../peps/pep-0432.rst:304
msgid "Design Details"
msgstr ""

#: ../../peps/pep-0432.rst:308
msgid ""
"The API details here are still very much in flux. The header files that "
"show the current state of the private API are mainly:"
msgstr ""

#: ../../peps/pep-0432.rst:311
msgid "https://github.com/python/cpython/blob/master/Include/cpython/coreconfig.h"
msgstr ""

#: ../../peps/pep-0432.rst:312
msgid "https://github.com/python/cpython/blob/master/Include/cpython/pystate.h"
msgstr ""

#: ../../peps/pep-0432.rst:313
msgid "https://github.com/python/cpython/blob/master/Include/cpython/pylifecycle.h"
msgstr ""

#: ../../peps/pep-0432.rst:315
msgid ""
":pep:`587` covers the aspects of the API that are considered potentially "
"stable enough to make public. Where a proposed API is covered by that "
"PEP, \"(see PEP 587)\" is added to the text below."
msgstr ""

#: ../../peps/pep-0432.rst:319
msgid ""
"The main theme of this proposal is to initialize the core language "
"runtime and create a partially initialized interpreter state for the main"
" interpreter *much* earlier in the startup process. This will allow most "
"of the CPython API to be used during the remainder of the initialization "
"process, potentially simplifying a number of operations that currently "
"need to rely on basic C functionality rather than being able to use the "
"richer data structures provided by the CPython C API."
msgstr ""

#: ../../peps/pep-0432.rst:327
msgid ""
":pep:`587` covers a subset of that task, which is splitting out the "
"components that even the existing \"May be called before "
"``Py_Initialize``\" interfaces need (like memory allocators and operating"
" system interface encoding details) into a separate pre-configuration "
"step."
msgstr ""

#: ../../peps/pep-0432.rst:332
msgid ""
"In the following, the term \"embedding application\" also covers the "
"standard CPython command line application."
msgstr ""

#: ../../peps/pep-0432.rst:337
msgid "Interpreter Initialization Phases"
msgstr ""

#: ../../peps/pep-0432.rst:339
msgid "The following distinct interpreter initialisation phases are proposed:"
msgstr ""

#: ../../peps/pep-0432.rst:341
msgid "Uninitialized:"
msgstr ""

#: ../../peps/pep-0432.rst:343
msgid "Not really a phase, but the absence of a phase"
msgstr ""

#: ../../peps/pep-0432.rst:344 ../../peps/pep-0432.rst:384
msgid "``Py_IsInitializing()`` returns ``0``"
msgstr ""

#: ../../peps/pep-0432.rst:345 ../../peps/pep-0432.rst:357
msgid "``Py_IsRuntimeInitialized()`` returns ``0``"
msgstr ""

#: ../../peps/pep-0432.rst:346 ../../peps/pep-0432.rst:358
#: ../../peps/pep-0432.rst:372
msgid "``Py_IsInitialized()`` returns ``0``"
msgstr ""

#: ../../peps/pep-0432.rst:347
msgid ""
"The embedding application determines which memory allocator to use, and "
"which encoding to use to access operating system interfaces (or chooses "
"to delegate those decisions to the Python runtime)"
msgstr ""

#: ../../peps/pep-0432.rst:350
msgid ""
"Application starts the initialization process by calling one of the "
"``Py_PreInitialize`` APIs (see :pep:`587`)"
msgstr ""

#: ../../peps/pep-0432.rst:353
msgid "Runtime Pre-Initialization:"
msgstr ""

#: ../../peps/pep-0432.rst:355
msgid "no interpreter is available"
msgstr ""

#: ../../peps/pep-0432.rst:356 ../../peps/pep-0432.rst:370
msgid "``Py_IsInitializing()`` returns ``1``"
msgstr ""

#: ../../peps/pep-0432.rst:359
msgid ""
"The embedding application determines the settings required to initialize "
"the core CPython runtime and create the main interpreter and moves to the"
" next phase by calling ``Py_InitializeRuntime``"
msgstr ""

#: ../../peps/pep-0432.rst:362
msgid ""
"Note: as of :pep:`587`, the embedding application instead calls "
"``Py_Main()``, ``Py_UnixMain``, or one of the ``Py_Initialize`` APIs, and"
" hence jumps directly to the Initialized state."
msgstr ""

#: ../../peps/pep-0432.rst:366
msgid "Main Interpreter Initialization:"
msgstr ""

#: ../../peps/pep-0432.rst:368
msgid "the builtin data types and other core runtime services are available"
msgstr ""

#: ../../peps/pep-0432.rst:369
msgid "the main interpreter is available, but only partially configured"
msgstr ""

#: ../../peps/pep-0432.rst:371 ../../peps/pep-0432.rst:385
msgid "``Py_IsRuntimeInitialized()`` returns ``1``"
msgstr ""

#: ../../peps/pep-0432.rst:373
msgid ""
"The embedding application determines and applies the settings required to"
" complete the initialization process by calling "
"``Py_InitializeMainInterpreter``"
msgstr ""

#: ../../peps/pep-0432.rst:376
msgid ""
"Note: as of :pep:`587`, this state is not reachable via any public API, "
"it only exists as an implicit internal state while one of the "
"``Py_Initialize`` functions is running"
msgstr ""

#: ../../peps/pep-0432.rst:380
msgid "Initialized:"
msgstr ""

#: ../../peps/pep-0432.rst:382
msgid ""
"the main interpreter is available and fully operational, but ``__main__``"
" related metadata is incomplete"
msgstr ""

#: ../../peps/pep-0432.rst:386
msgid "``Py_IsInitialized()`` returns ``1``"
msgstr ""

#: ../../peps/pep-0432.rst:390
msgid "Invocation of Phases"
msgstr ""

#: ../../peps/pep-0432.rst:392
msgid ""
"All listed phases will be used by the standard CPython interpreter and "
"the proposed System Python interpreter."
msgstr ""

#: ../../peps/pep-0432.rst:395
msgid ""
"An embedding application may still continue to leave initialization "
"almost entirely under CPython's control by using the existing "
"``Py_Initialize`` or ``Py_Main()`` APIs - backwards compatibility will be"
" preserved."
msgstr ""

#: ../../peps/pep-0432.rst:399
msgid ""
"Alternatively, if an embedding application wants greater control over "
"CPython's initial state, it will be able to use the new, finer grained "
"API, which allows the embedding application greater control over the "
"initialization process."
msgstr ""

#: ../../peps/pep-0432.rst:404
msgid ""
":pep:`587` covers an initial iteration of that API, separating out the "
"pre-initialization phase without attempting to separate core runtime "
"initialization from main interpreter initialization."
msgstr ""

#: ../../peps/pep-0432.rst:410
msgid "Uninitialized State"
msgstr ""

#: ../../peps/pep-0432.rst:412
msgid ""
"The uninitialized state is where an embedding application determines the "
"settings which are required in order to be able to correctly pass "
"configurations settings to the embedded Python runtime."
msgstr ""

#: ../../peps/pep-0432.rst:416
msgid ""
"This covers telling Python which memory allocator to use, as well as "
"which text encoding to use when processing provided settings."
msgstr ""

#: ../../peps/pep-0432.rst:419
msgid ""
":pep:`587` defines the settings needed to exit this state in its "
"``PyPreConfig`` struct."
msgstr ""

#: ../../peps/pep-0432.rst:422
msgid ""
"A new query API will allow code to determine if the interpreter hasn't "
"even started the initialization process::"
msgstr ""

#: ../../peps/pep-0432.rst:427
msgid ""
"The query for a completely uninitialized environment would then be "
"``!(Py_Initialized() || Py_Initializing())``."
msgstr ""

#: ../../peps/pep-0432.rst:432
msgid "Runtime Pre-Initialization Phase"
msgstr ""

#: ../../peps/pep-0432.rst:434
msgid ""
"In :pep:`587`, the settings for this phase are not yet separated out, and"
" are instead only available through the combined ``PyConfig`` struct"
msgstr ""

#: ../../peps/pep-0432.rst:437
msgid ""
"The pre-initialization phase is where an embedding application determines"
" the settings which are absolutely required before the CPython runtime "
"can be initialized at all. Currently, the primary configuration settings "
"in this category are those related to the randomised hash algorithm - the"
" hash algorithms must be consistent for the lifetime of the process, and "
"so they must be in place before the core interpreter is created."
msgstr ""

#: ../../peps/pep-0432.rst:444
msgid ""
"The essential settings needed are a flag indicating whether or not to use"
" a specific seed value for the randomised hashes, and if so, the specific"
" value for the seed (a seed value of zero disables randomised hashing). "
"In addition, due to the possible use of ``PYTHONHASHSEED`` in configuring"
" the hash randomisation, the question of whether or not to consider "
"environment variables must also be addressed early. Finally, to support "
"the CPython build process, an option is offered to completely disable the"
" import system."
msgstr ""

#: ../../peps/pep-0432.rst:453
msgid "The proposed APIs for this step in the startup sequence are::"
msgstr ""

#: ../../peps/pep-0432.rst:467
msgid ""
"If ``Py_IsInitializing()`` is false, the ``Py_InitializeRuntime`` "
"functions will implicitly call the corresponding ``Py_PreInitialize`` "
"function. The ``use_environment`` setting will be passed down, while "
"other settings will be processed according to their defaults, as "
"described in :pep:`587`."
msgstr ""

#: ../../peps/pep-0432.rst:472
msgid ""
"The ``PyInitError`` return type is defined in :pep:`587`, and allows an "
"embedding application to gracefully handle Python runtime initialization "
"failures, rather than having the entire process abruptly terminated by "
"``Py_FatalError``."
msgstr ""

#: ../../peps/pep-0432.rst:476
msgid ""
"The new ``PyRuntimeConfig`` struct holds the settings required for "
"preliminary configuration of the core runtime and creation of the main "
"interpreter::"
msgstr ""

#: ../../peps/pep-0432.rst:491
msgid ""
"The core configuration settings pointer may be ``NULL``, in which case "
"the default values are as specified in ``PyRuntimeConfig_INIT``."
msgstr ""

#: ../../peps/pep-0432.rst:494
msgid ""
"The ``PyRuntimeConfig_INIT`` macro is designed to allow easy "
"initialization of a struct instance with sensible defaults::"
msgstr ""

#: ../../peps/pep-0432.rst:499
msgid ""
"``use_environment`` controls the processing of all Python related "
"environment variables. If the flag is true, then ``PYTHONHASHSEED`` is "
"processed normally. Otherwise, all Python-specific environment variables "
"are considered undefined (exceptions may be made for some OS specific "
"environment variables, such as those used on Mac OS X to communicate "
"between the App bundle and the main Python binary)."
msgstr ""

#: ../../peps/pep-0432.rst:506
msgid ""
"``use_hash_seed`` controls the configuration of the randomised hash "
"algorithm. If it is zero, then randomised hashes with a random seed will "
"be used. It is positive, then the value in ``hash_seed`` will be used to "
"seed the random number generator. If the ``hash_seed`` is zero in this "
"case, then the randomised hashing is disabled completely."
msgstr ""

#: ../../peps/pep-0432.rst:512
msgid ""
"If ``use_hash_seed`` is negative (and ``use_environment`` is true), then "
"CPython will inspect the ``PYTHONHASHSEED`` environment variable. If the "
"environment variable is not set, is set to the empty string, or to the "
"value ``\"random\"``, then randomised hashes with a random seed will be "
"used. If the environment variable is set to the string ``\"0\"`` the "
"randomised hashing will be disabled. Otherwise, the hash seed is expected"
" to be a string representation of an integer in the range ``[0; "
"4294967295]``."
msgstr ""

#: ../../peps/pep-0432.rst:520
msgid ""
"To make it easier for embedding applications to use the "
"``PYTHONHASHSEED`` processing with a different data source, the following"
" helper function will be added to the C API::"
msgstr ""

#: ../../peps/pep-0432.rst:528
msgid ""
"This function accepts a seed string in ``seed_text`` and converts it to "
"the appropriate flag and seed values. If ``seed_text`` is ``NULL``, the "
"empty string or the value ``\"random\"``, both ``use_hash_seed`` and "
"``hash_seed`` will be set to zero. Otherwise, ``use_hash_seed`` will be "
"set to ``1`` and the seed text will be interpreted as an integer and "
"reported as ``hash_seed``. On success the function will return zero. A "
"non-zero return value indicates an error (most likely in the conversion "
"to an integer)."
msgstr ""

#: ../../peps/pep-0432.rst:536
msgid ""
"The ``_install_importlib`` setting is used as part of the CPython build "
"process to create an interpreter with no import capability at all. It is "
"considered private to the CPython development team (hence the leading "
"underscore), as the only currently supported use case is to permit "
"compiler changes that invalidate the previously frozen bytecode for "
"``importlib._bootstrap`` without breaking the build process."
msgstr ""

#: ../../peps/pep-0432.rst:543
msgid ""
"The aim is to keep this initial level of configuration as small as "
"possible in order to keep the bootstrapping environment consistent across"
" different embedding applications. If we can create a valid interpreter "
"state without the setting, then the setting should appear solely in the "
"comprehensive ``PyConfig`` struct rather than in the core runtime "
"configuration."
msgstr ""

#: ../../peps/pep-0432.rst:549
msgid ""
"A new query API will allow code to determine if the interpreter is in the"
" bootstrapping state between the core runtime initialization and the "
"creation of the main interpreter state and the completion of the bulk of "
"the main interpreter initialization process::"
msgstr ""

#: ../../peps/pep-0432.rst:556
msgid ""
"Attempting to call ``Py_InitializeRuntime()`` again when "
"``Py_IsRuntimeInitialized()`` is already true is reported as a user "
"configuration error. (TBC, as existing public initialisation APIs support"
" being called multiple times without error, and simply ignore changes to "
"any write-once settings. It may make sense to keep that behaviour rather "
"than trying to make the new API stricter than the old one)"
msgstr ""

#: ../../peps/pep-0432.rst:563
msgid ""
"As frozen bytecode may now be legitimately run in an interpreter which is"
" not yet fully initialized, ``sys.flags`` will gain a new ``initialized``"
" flag."
msgstr ""

#: ../../peps/pep-0432.rst:566
msgid ""
"With the core runtime initialised, the main interpreter and most of the "
"CPython C API should be fully functional except that:"
msgstr ""

#: ../../peps/pep-0432.rst:569
msgid ""
"compilation is not allowed (as the parser and compiler are not yet "
"configured properly)"
msgstr ""

#: ../../peps/pep-0432.rst:571
msgid "creation of subinterpreters is not allowed"
msgstr ""

#: ../../peps/pep-0432.rst:572
msgid "creation of additional thread states is not allowed"
msgstr ""

#: ../../peps/pep-0432.rst:573
msgid ""
"The following attributes in the ``sys`` module are all either missing or "
"``None``: * ``sys.path`` * ``sys.argv`` * ``sys.executable`` * "
"``sys.base_exec_prefix`` * ``sys.base_prefix`` * ``sys.exec_prefix`` * "
"``sys.prefix`` * ``sys.warnoptions`` * ``sys.dont_write_bytecode`` * "
"``sys.stdin`` * ``sys.stdout``"
msgstr ""

#: ../../peps/pep-0432.rst:586
msgid "The filesystem encoding is not yet defined"
msgstr ""

#: ../../peps/pep-0432.rst:587
msgid "The IO encoding is not yet defined"
msgstr ""

#: ../../peps/pep-0432.rst:588
msgid "CPython signal handlers are not yet installed"
msgstr ""

#: ../../peps/pep-0432.rst:589
msgid "Only builtin and frozen modules may be imported (due to above limitations)"
msgstr ""

#: ../../peps/pep-0432.rst:590
msgid ""
"``sys.stderr`` is set to a temporary IO object using unbuffered binary "
"mode"
msgstr ""

#: ../../peps/pep-0432.rst:592
msgid ""
"The ``sys.flags`` attribute exists, but the individual flags may not yet "
"have their final values."
msgstr ""

#: ../../peps/pep-0432.rst:594
msgid "The ``sys.flags.initialized`` attribute is set to ``0``"
msgstr ""

#: ../../peps/pep-0432.rst:595
msgid "The ``warnings`` module is not yet initialized"
msgstr ""

#: ../../peps/pep-0432.rst:596
msgid "The ``__main__`` module does not yet exist"
msgstr ""

#: ../../peps/pep-0432.rst:598
msgid "<TBD: identify any other notable missing functionality>"
msgstr ""

#: ../../peps/pep-0432.rst:600
msgid ""
"The main things made available by this step will be the core Python data "
"types, in particular dictionaries, lists and strings. This allows them to"
" be used safely for all of the remaining configuration steps (unlike the "
"status quo)."
msgstr ""

#: ../../peps/pep-0432.rst:605
msgid ""
"In addition, the current thread will possess a valid Python thread state,"
" allowing any further configuration data to be stored on the main "
"interpreter object rather than in C process globals."
msgstr ""

#: ../../peps/pep-0432.rst:609
msgid ""
"Any call to ``Py_InitializeRuntime()`` must have a matching call to "
"``Py_Finalize()``. It is acceptable to skip calling "
"``Py_InitializeMainInterpreter()`` in between (e.g. if attempting to "
"build the main interpreter configuration settings fails)."
msgstr ""

#: ../../peps/pep-0432.rst:616
msgid "Determining the remaining configuration settings"
msgstr ""

#: ../../peps/pep-0432.rst:618
msgid ""
"The next step in the initialization sequence is to determine the "
"remaining settings needed to complete the process. No changes are made to"
" the interpreter state at this point. The core APIs for this step are::"
msgstr ""

#: ../../peps/pep-0432.rst:634
msgid ""
"The ``py_config`` argument should be a pointer to a PyConfigAsObjects "
"struct (which may be a temporary one stored on the C stack). For any "
"already configured value (i.e. any non-NULL pointer), CPython will sanity"
" check the supplied value, but otherwise accept it as correct."
msgstr ""

#: ../../peps/pep-0432.rst:639
msgid ""
"A struct is used rather than a Python dictionary as the struct is easier "
"to work with from C, the list of supported fields is fixed for a given "
"CPython version and only a read-only view needs to be exposed to Python "
"code (which is relatively straightforward, thanks to the infrastructure "
"already put in place to expose ``sys.implementation``)."
msgstr ""

#: ../../peps/pep-0432.rst:645
msgid ""
"Unlike ``Py_InitializeRuntime``, this call will raise a Python exception "
"and report an error return rather than returning a Python initialization "
"specific C struct if a problem is found with the config data."
msgstr ""

#: ../../peps/pep-0432.rst:649
msgid ""
"Any supported configuration setting which is not already set will be "
"populated appropriately in the supplied configuration struct. The default"
" configuration can be overridden entirely by setting the value *before* "
"calling ``Py_BuildPythonConfig``. The provided value will then also be "
"used in calculating any other settings derived from that value."
msgstr ""

#: ../../peps/pep-0432.rst:655
msgid ""
"Alternatively, settings may be overridden *after* the "
"``Py_BuildPythonConfig`` call (this can be useful if an embedding "
"application wants to adjust a setting rather than replace it completely, "
"such as removing ``sys.path[0]``)."
msgstr ""

#: ../../peps/pep-0432.rst:660
msgid ""
"The ``c_config`` argument is an optional pointer to a ``PyConfig`` "
"structure, as defined in :pep:`587`. If provided, it is used in "
"preference to reading settings directly from the environment or process "
"global state."
msgstr ""

#: ../../peps/pep-0432.rst:664
msgid ""
"Merely reading the configuration has no effect on the interpreter state: "
"it only modifies the passed in configuration struct. The settings are not"
" applied to the running interpreter until the "
"``Py_InitializeMainInterpreter`` call (see below)."
msgstr ""

#: ../../peps/pep-0432.rst:671
msgid "Supported configuration settings"
msgstr ""

#: ../../peps/pep-0432.rst:673
msgid ""
"The interpreter configuration is split into two parts: settings which are"
" either relevant only to the main interpreter or must be identical across"
" the main interpreter and all subinterpreters, and settings which may "
"vary across subinterpreters."
msgstr ""

#: ../../peps/pep-0432.rst:678
msgid ""
"NOTE: For initial implementation purposes, only the flag indicating "
"whether or not the interpreter is the main interpreter will be configured"
" on a per interpreter basis. Other fields will be reviewed for whether or"
" not they can feasibly be made interpreter specific over the course of "
"the implementation."
msgstr ""

#: ../../peps/pep-0432.rst:683
msgid ""
"The list of config fields below is currently out of sync with :pep:`587`."
" Where they differ, :pep:`587` takes precedence."
msgstr ""

#: ../../peps/pep-0432.rst:686
msgid ""
"The ``PyConfigAsObjects`` struct mirrors the ``PyConfig`` struct from "
":pep:`587`, but uses full Python objects to store values, rather than C "
"level data types. It adds ``raw_argv`` and ``argv`` list fields, so later"
" initialisation steps don't need to accept those separately."
msgstr ""

#: ../../peps/pep-0432.rst:691
msgid ""
"Fields are always pointers to Python data types, with unset values "
"indicated by ``NULL``::"
msgstr ""

#: ../../peps/pep-0432.rst:768
msgid ""
"The ``PyInterpreterConfig`` struct holds the settings that may vary "
"between the main interpreter and subinterpreters. For the main "
"interpreter, these settings are automatically populated by "
"``Py_InitializeMainInterpreter()``."
msgstr ""

#: ../../peps/pep-0432.rst:778
msgid ""
"As these structs consist solely of object pointers, no explicit "
"initializer definitions are needed - C99's default initialization of "
"struct memory to zero is sufficient."
msgstr ""

#: ../../peps/pep-0432.rst:784
msgid "Completing the main interpreter initialization"
msgstr ""

#: ../../peps/pep-0432.rst:786
msgid ""
"The final step in the initialization process is to actually put the "
"configuration settings into effect and finish bootstrapping the main "
"interpreter up to full operation::"
msgstr ""

#: ../../peps/pep-0432.rst:792
msgid ""
"Like ``Py_BuildPythonConfig``, this call will raise an exception and "
"report an error return rather than exhibiting fatal errors if a problem "
"is found with the config data. (TBC, as existing public initialisation "
"APIs support being called multiple times without error, and simply ignore"
" changes to any write-once settings. It may make sense to keep that "
"behaviour rather than trying to make the new API stricter than the old "
"one)"
msgstr ""

#: ../../peps/pep-0432.rst:799
msgid ""
"All configuration settings are required - the configuration struct should"
" always be passed through ``Py_BuildPythonConfig`` to ensure it is fully "
"populated."
msgstr ""

#: ../../peps/pep-0432.rst:803
msgid ""
"After a successful call ``Py_IsInitialized()`` will become true and "
"``Py_IsInitializing()`` will become false. The caveats described above "
"for the interpreter during the phase where only the core runtime is "
"initialized will no longer hold."
msgstr ""

#: ../../peps/pep-0432.rst:808
msgid ""
"Attempting to call ``Py_InitializeMainInterpreter()`` again when "
"``Py_IsInitialized()`` is true is an error."
msgstr ""

#: ../../peps/pep-0432.rst:811
msgid ""
"However, some metadata related to the ``__main__`` module may still be "
"incomplete:"
msgstr ""

#: ../../peps/pep-0432.rst:814
msgid "``sys.argv[0]`` may not yet have its final value"
msgstr ""

#: ../../peps/pep-0432.rst:816
msgid "it will be ``-m`` when executing a module or package with CPython"
msgstr ""

#: ../../peps/pep-0432.rst:817
msgid ""
"it will be the same as ``sys.path[0]`` rather than the location of the "
"``__main__`` module when executing a valid ``sys.path`` entry (typically "
"a zipfile or directory)"
msgstr ""

#: ../../peps/pep-0432.rst:820
msgid "otherwise, it will be accurate:"
msgstr ""

#: ../../peps/pep-0432.rst:822
msgid "the script name if running an ordinary script"
msgstr ""

#: ../../peps/pep-0432.rst:823
msgid "``-c`` if executing a supplied string"
msgstr ""

#: ../../peps/pep-0432.rst:824
msgid "``-`` or the empty string if running from stdin"
msgstr ""

#: ../../peps/pep-0432.rst:826
msgid ""
"the metadata in the ``__main__`` module will still indicate it is a "
"builtin module"
msgstr ""

#: ../../peps/pep-0432.rst:829
msgid ""
"This function will normally implicitly import site as its final operation"
" (after ``Py_IsInitialized()`` is already set). Setting the "
"\"enable_site_config\" flag to ``Py_False`` in the configuration settings"
" will disable this behaviour, as well as eliminating any side effects on "
"global state if ``import site`` is later explicitly executed in the "
"process."
msgstr ""

#: ../../peps/pep-0432.rst:837
msgid "Preparing the main module"
msgstr ""

#: ../../peps/pep-0432.rst:839 ../../peps/pep-0432.rst:910
msgid ""
"In :pep:`587`, ``PyRun_PrepareMain`` and ``PyRun_ExecMain`` are not "
"exposed separately, and are instead accessed through a ``Py_RunMain`` API"
" that both prepares and executes main, and then finalizes the Python "
"interpreter."
msgstr ""

#: ../../peps/pep-0432.rst:844
msgid ""
"This subphase completes the population of the ``__main__`` module related"
" metadata, without actually starting execution of the ``__main__`` module"
" code."
msgstr ""

#: ../../peps/pep-0432.rst:848 ../../peps/pep-0432.rst:918
msgid "It is handled by calling the following API::"
msgstr ""

#: ../../peps/pep-0432.rst:852 ../../peps/pep-0432.rst:922
msgid ""
"This operation is only permitted for the main interpreter, and will raise"
" ``RuntimeError`` when invoked from a thread where the current thread "
"state belongs to a subinterpreter."
msgstr ""

#: ../../peps/pep-0432.rst:856 ../../peps/pep-0432.rst:926
msgid ""
"The actual processing is driven by the main related settings stored in "
"the interpreter state as part of the configuration struct."
msgstr ""

#: ../../peps/pep-0432.rst:859
msgid "If ``prepare_main`` is zero, this call does nothing."
msgstr ""

#: ../../peps/pep-0432.rst:861
msgid ""
"If all of ``main_source``, ``main_path``, ``main_module``, "
"``main_stream`` and ``main_code`` are NULL, this call does nothing."
msgstr ""

#: ../../peps/pep-0432.rst:864
msgid ""
"If more than one of ``main_source``, ``main_path``, ``main_module``, "
"``main_stream`` or ``main_code`` are set, ``RuntimeError`` will be "
"reported."
msgstr ""

#: ../../peps/pep-0432.rst:867
msgid "If ``main_code`` is already set, then this call does nothing."
msgstr ""

#: ../../peps/pep-0432.rst:869
msgid ""
"If ``main_stream`` is set, and ``run_implicit_code`` is also set, then "
"the file identified in ``startup_file`` will be read, compiled and "
"executed in the ``__main__`` namespace."
msgstr ""

#: ../../peps/pep-0432.rst:873
msgid ""
"If ``main_source``, ``main_path`` or ``main_module`` are set, then this "
"call will take whatever steps are needed to populate ``main_code``:"
msgstr ""

#: ../../peps/pep-0432.rst:876
msgid ""
"For ``main_source``, the supplied string will be compiled and saved to "
"``main_code``."
msgstr ""

#: ../../peps/pep-0432.rst:879
msgid "For ``main_path``:"
msgstr ""

#: ../../peps/pep-0432.rst:881
msgid ""
"if the supplied path is recognised as a valid ``sys.path`` entry, it is "
"inserted as ``sys.path[0]``, ``main_module`` is set to ``__main__`` and "
"processing continues as for ``main_module`` below."
msgstr ""

#: ../../peps/pep-0432.rst:884
msgid "otherwise, path is read as a CPython bytecode file"
msgstr ""

#: ../../peps/pep-0432.rst:885
msgid "if that fails, it is read as a Python source file and compiled"
msgstr ""

#: ../../peps/pep-0432.rst:886
msgid ""
"in the latter two cases, the code object is saved to ``main_code`` and "
"``__main__.__file__`` is set appropriately"
msgstr ""

#: ../../peps/pep-0432.rst:889
msgid "For ``main_module``:"
msgstr ""

#: ../../peps/pep-0432.rst:891
msgid "any parent package is imported"
msgstr ""

#: ../../peps/pep-0432.rst:892
msgid "the loader for the module is determined"
msgstr ""

#: ../../peps/pep-0432.rst:893
msgid ""
"if the loader indicates the module is a package, add ``.__main__`` to the"
" end of ``main_module`` and try again (if the final name segment is "
"already ``.__main__`` then fail immediately)"
msgstr ""

#: ../../peps/pep-0432.rst:896
msgid ""
"once the module source code is located, save the compiled module code as "
"``main_code`` and populate the following attributes in ``__main__`` "
"appropriately: ``__name__``, ``__loader__``, ``__file__``, "
"``__cached__``, ``__package__``."
msgstr ""

#: ../../peps/pep-0432.rst:902
msgid ""
"(Note: the behaviour described in this section isn't new, it's a write-up"
" of the current behaviour of the CPython interpreter adjusted for the new"
" configuration system)"
msgstr ""

#: ../../peps/pep-0432.rst:908
msgid "Executing the main module"
msgstr ""

#: ../../peps/pep-0432.rst:916
msgid "This subphase covers the execution of the actual ``__main__`` module code."
msgstr ""

#: ../../peps/pep-0432.rst:929
msgid ""
"If both ``main_stream`` and ``main_code`` are NULL, this call does "
"nothing."
msgstr ""

#: ../../peps/pep-0432.rst:931
msgid ""
"If both ``main_stream`` and ``main_code`` are set, ``RuntimeError`` will "
"be reported."
msgstr ""

#: ../../peps/pep-0432.rst:934
msgid ""
"If ``main_stream`` and ``prompt_stream`` are both set, main execution "
"will be delegated to a new internal API::"
msgstr ""

#: ../../peps/pep-0432.rst:939
msgid ""
"If ``main_stream`` is set and ``prompt_stream`` is NULL, main execution "
"will be delegated to a new internal API::"
msgstr ""

#: ../../peps/pep-0432.rst:944
msgid ""
"If ``main_code`` is set, main execution will be delegated to a new "
"internal API::"
msgstr ""

#: ../../peps/pep-0432.rst:949
msgid ""
"After execution of main completes, if ``inspect_main`` is set, or the "
"``PYTHONINSPECT`` environment variable has been set, then "
"``PyRun_ExecMain`` will invoke ``_PyRun_InteractiveMain(sys.__stdin__, "
"sys.__stdout__)``."
msgstr ""

#: ../../peps/pep-0432.rst:956
msgid "Internal Storage of Configuration Data"
msgstr ""

#: ../../peps/pep-0432.rst:958
msgid ""
"The interpreter state will be updated to include details of the "
"configuration settings supplied during initialization by extending the "
"interpreter state object with at least an embedded copy of the "
"``PyConfigAsObjects`` and ``PyInterpreterConfig`` structs."
msgstr ""

#: ../../peps/pep-0432.rst:963
msgid ""
"For debugging purposes, the configuration settings will be exposed as a "
"``sys._configuration`` simple namespace (similar to ``sys.flags`` and "
"``sys.implementation``. The attributes will be themselves by simple "
"namespaces corresponding to the two levels of configuration setting:"
msgstr ""

#: ../../peps/pep-0432.rst:968
msgid "``all_interpreters``"
msgstr ""

#: ../../peps/pep-0432.rst:969
msgid "``active_interpreter``"
msgstr ""

#: ../../peps/pep-0432.rst:971
msgid ""
"Field names will match those in the configuration structs, except for "
"``hash_seed``, which will be deliberately excluded."
msgstr ""

#: ../../peps/pep-0432.rst:974
msgid ""
"An underscored attribute is chosen deliberately, as these configuration "
"settings are part of the CPython implementation, rather than part of the "
"Python language definition. If new settings are needed to support cross-"
"implementation compatibility in the standard library, then those should "
"be agreed with the other implementations and exposed as new required "
"attributes on ``sys.implementation``, as described in :pep:`421`."
msgstr ""

#: ../../peps/pep-0432.rst:981
msgid ""
"These are *snapshots* of the initial configuration settings. They are not"
" modified by the interpreter during runtime (except as noted above)."
msgstr ""

#: ../../peps/pep-0432.rst:986
msgid "Creating and Configuring Subinterpreters"
msgstr ""

#: ../../peps/pep-0432.rst:988
msgid ""
"As the new configuration settings are stored in the interpreter state, "
"they need to be initialised when a new subinterpreter is created. This "
"turns out to be trickier than one might expect due to "
"``PyThreadState_Swap(NULL);`` (which is fortunately exercised by "
"CPython's own embedding tests, allowing this problem to be detected "
"during development)."
msgstr ""

#: ../../peps/pep-0432.rst:994
msgid ""
"To provide a straightforward solution for this case, the PEP proposes to "
"add a new API::"
msgstr ""

#: ../../peps/pep-0432.rst:999
msgid ""
"This will be a counterpart to ``Py_InterpreterState_Head()``, only "
"reporting the oldest currently existing interpreter rather than the "
"newest. If ``Py_NewInterpreter()`` is called from a thread with an "
"existing thread state, then the interpreter configuration for that thread"
" will be used when initialising the new subinterpreter. If there is no "
"current thread state, the configuration from "
"``Py_InterpreterState_Main()`` will be used."
msgstr ""

#: ../../peps/pep-0432.rst:1007
msgid ""
"While the existing ``Py_InterpreterState_Head()`` API could be used "
"instead, that reference changes as subinterpreters are created and "
"destroyed, while ``PyInterpreterState_Main()`` will always refer to the "
"initial interpreter state created in ``Py_InitializeRuntime()``."
msgstr ""

#: ../../peps/pep-0432.rst:1012
msgid ""
"A new constraint is also added to the embedding API: attempting to delete"
" the main interpreter while subinterpreters still exist will now be a "
"fatal error."
msgstr ""

#: ../../peps/pep-0432.rst:1018
msgid "Stable ABI"
msgstr ""

#: ../../peps/pep-0432.rst:1020
msgid ""
"Most of the APIs proposed in this PEP are excluded from the stable ABI, "
"as embedding a Python interpreter involves a much higher degree of "
"coupling than merely writing an extension module."
msgstr ""

#: ../../peps/pep-0432.rst:1024
msgid ""
"The only newly exposed APIs that will be part of the stable ABI are the "
"``Py_IsInitializing()`` and ``Py_IsRuntimeInitialized()`` queries."
msgstr ""

#: ../../peps/pep-0432.rst:1029
msgid "Build time configuration"
msgstr ""

#: ../../peps/pep-0432.rst:1031
msgid ""
"This PEP makes no changes to the handling of build time configuration "
"settings, and thus has no effect on the contents of "
"``sys.implementation`` or the result of ``sysconfig.get_config_vars()``."
msgstr ""

#: ../../peps/pep-0432.rst:1037
msgid "Backwards Compatibility"
msgstr ""

#: ../../peps/pep-0432.rst:1039
msgid ""
"Backwards compatibility will be preserved primarily by ensuring that "
"``Py_BuildPythonConfig()`` interrogates all the previously defined "
"configuration settings stored in global variables and environment "
"variables, and that ``Py_InitializeMainInterpreter()`` writes affected "
"settings back to the relevant locations."
msgstr ""

#: ../../peps/pep-0432.rst:1045
msgid ""
"One acknowledged incompatibility is that some environment variables which"
" are currently read lazily may instead be read once during interpreter "
"initialization. As the reference implementation matures, these will be "
"discussed in more detail on a case-by-case basis. The environment "
"variables which are currently known to be looked up dynamically are:"
msgstr ""

#: ../../peps/pep-0432.rst:1051
msgid ""
"``PYTHONCASEOK``: writing to ``os.environ['PYTHONCASEOK']`` will no "
"longer dynamically alter the interpreter's handling of filename case "
"differences on import (TBC)"
msgstr ""

#: ../../peps/pep-0432.rst:1054
msgid ""
"``PYTHONINSPECT``: ``os.environ['PYTHONINSPECT']`` will still be checked "
"after execution of the ``__main__`` module terminates"
msgstr ""

#: ../../peps/pep-0432.rst:1057
msgid ""
"The ``Py_Initialize()`` style of initialization will continue to be "
"supported. It will use (at least some elements of) the new API "
"internally, but will continue to exhibit the same behaviour as it does "
"today, ensuring that ``sys.argv`` is not populated until a subsequent "
"``PySys_SetArgv`` call (TBC). All APIs that currently support being "
"called prior to ``Py_Initialize()`` will continue to do so, and will also"
" support being called prior to ``Py_InitializeRuntime()``."
msgstr ""

#: ../../peps/pep-0432.rst:1068
msgid "A System Python Executable"
msgstr ""

#: ../../peps/pep-0432.rst:1070
msgid ""
"When executing system utilities with administrative access to a system, "
"many of the default behaviours of CPython are undesirable, as they may "
"allow untrusted code to execute with elevated privileges. The most "
"problematic aspects are the fact that user site directories are enabled, "
"environment variables are trusted and that the directory containing the "
"executed file is placed at the beginning of the import path."
msgstr ""

#: ../../peps/pep-0432.rst:1077
msgid ""
"Issue 16499 [6]_ added a ``-I`` option to change the behaviour of the "
"normal CPython executable, but this is a hard to discover solution (and "
"adds yet another option to an already complex CLI). This PEP proposes to "
"instead add a separate ``system-python`` executable"
msgstr ""

#: ../../peps/pep-0432.rst:1082
msgid ""
"Currently, providing a separate executable with different default "
"behaviour would be prohibitively hard to maintain. One of the goals of "
"this PEP is to make it possible to replace much of the hard to maintain "
"bootstrapping code with more normal CPython code, as well as making it "
"easier for a separate application to make use of key components of "
"``Py_Main``. Including this change in the PEP is designed to help avoid "
"acceptance of a design that sounds good in theory but proves to be "
"problematic in practice."
msgstr ""

#: ../../peps/pep-0432.rst:1090
msgid ""
"Cleanly supporting this kind of \"alternate CLI\" is the main reason for "
"the proposed changes to better expose the core logic for deciding between"
" the different execution modes supported by CPython:"
msgstr ""

#: ../../peps/pep-0432.rst:1094
msgid "script execution"
msgstr ""

#: ../../peps/pep-0432.rst:1095
msgid "directory/zipfile execution"
msgstr ""

#: ../../peps/pep-0432.rst:1096
msgid "command execution (\"-c\" switch)"
msgstr ""

#: ../../peps/pep-0432.rst:1097
msgid "module or package execution (\"-m\" switch)"
msgstr ""

#: ../../peps/pep-0432.rst:1098
msgid "execution from stdin (non-interactive)"
msgstr ""

#: ../../peps/pep-0432.rst:1099
msgid "interactive stdin"
msgstr ""

#: ../../peps/pep-0432.rst:1101
msgid ""
"Actually implementing this may also reveal the need for some better "
"argument parsing infrastructure for use during the initializing phase."
msgstr ""

#: ../../peps/pep-0432.rst:1106
msgid "Open Questions"
msgstr ""

#: ../../peps/pep-0432.rst:1108
msgid ""
"Error details for ``Py_BuildPythonConfig`` and "
"``Py_InitializeMainInterpreter`` (these should become clearer as the "
"implementation progresses)"
msgstr ""

#: ../../peps/pep-0432.rst:1114
msgid "Implementation"
msgstr ""

#: ../../peps/pep-0432.rst:1116
msgid ""
"The reference implementation is being developed as a private API "
"refactoring within the CPython reference interpreter (as attempting to "
"maintain it as an independent project proved impractical)."
msgstr ""

#: ../../peps/pep-0432.rst:1120
msgid ""
":pep:`587` extracts a subset of the proposal that is considered "
"sufficiently stable to be worth proposing as a public API for Python 3.8."
msgstr ""

#: ../../peps/pep-0432.rst:1125
msgid "The Status Quo (as of Python 3.6)"
msgstr ""

#: ../../peps/pep-0432.rst:1127
msgid ""
"The current mechanisms for configuring the interpreter have accumulated "
"in a fairly ad hoc fashion over the past 20+ years, leading to a rather "
"inconsistent interface with varying levels of documentation."
msgstr ""

#: ../../peps/pep-0432.rst:1131
msgid ""
"Also see :pep:`587` for further discussion of the existing settings and "
"their handling."
msgstr ""

#: ../../peps/pep-0432.rst:1134
msgid ""
"(Note: some of the info below could probably be cleaned up and added to "
"the C API documentation for 3.x - it's all CPython specific, so it "
"doesn't belong in the language reference)"
msgstr ""

#: ../../peps/pep-0432.rst:1140
msgid "Ignoring Environment Variables"
msgstr ""

#: ../../peps/pep-0432.rst:1142
msgid ""
"The ``-E`` command line option allows all environment variables to be "
"ignored when initializing the Python interpreter. An embedding "
"application can enable this behaviour by setting "
"``Py_IgnoreEnvironmentFlag`` before calling ``Py_Initialize()``."
msgstr ""

#: ../../peps/pep-0432.rst:1147
msgid ""
"In the CPython source code, the ``Py_GETENV`` macro implicitly checks "
"this flag, and always produces ``NULL`` if it is set."
msgstr ""

#: ../../peps/pep-0432.rst:1150
msgid ""
"<TBD: I believe PYTHONCASEOK is checked regardless of this setting > "
"<TBD: Does -E also ignore Windows registry keys? >"
msgstr ""

#: ../../peps/pep-0432.rst:1155
msgid "Randomised Hashing"
msgstr ""

#: ../../peps/pep-0432.rst:1157
msgid ""
"The randomised hashing is controlled via the ``-R`` command line option "
"(in releases prior to 3.3), as well as the ``PYTHONHASHSEED`` environment"
" variable."
msgstr ""

#: ../../peps/pep-0432.rst:1161
msgid ""
"In Python 3.3, only the environment variable remains relevant. It can be "
"used to disable randomised hashing (by using a seed value of 0) or else "
"to force a specific hash value (e.g. for repeatability of testing, or to "
"share hash values between processes)"
msgstr ""

#: ../../peps/pep-0432.rst:1166
msgid ""
"However, embedding applications must use the ``Py_HashRandomizationFlag``"
" to explicitly request hash randomisation (CPython sets it in "
"``Py_Main()`` rather than in ``Py_Initialize()``)."
msgstr ""

#: ../../peps/pep-0432.rst:1170
msgid ""
"The new configuration API should make it straightforward for an embedding"
" application to reuse the ``PYTHONHASHSEED`` processing with a text based"
" configuration setting provided by other means (e.g. a config file or "
"separate environment variable)."
msgstr ""

#: ../../peps/pep-0432.rst:1177
msgid "Locating Python and the standard library"
msgstr ""

#: ../../peps/pep-0432.rst:1179
msgid ""
"The location of the Python binary and the standard library is influenced "
"by several elements. The algorithm used to perform the calculation is not"
" documented anywhere other than in the source code [3]_, [4]_. Even that "
"description is incomplete, as it failed to be updated for the virtual "
"environment support added in Python 3.3 (detailed in :pep:`405`)."
msgstr ""

#: ../../peps/pep-0432.rst:1185
msgid ""
"These calculations are affected by the following function calls (made "
"prior to calling ``Py_Initialize()``) and environment variables:"
msgstr ""

#: ../../peps/pep-0432.rst:1188
msgid "``Py_SetProgramName()``"
msgstr ""

#: ../../peps/pep-0432.rst:1189
msgid "``Py_SetPythonHome()``"
msgstr ""

#: ../../peps/pep-0432.rst:1190
msgid "``PYTHONHOME``"
msgstr ""

#: ../../peps/pep-0432.rst:1192
msgid ""
"The filesystem is also inspected for ``pyvenv.cfg`` files (see "
":pep:`405`) or, failing that, a ``lib/os.py`` (Windows) or "
"``lib/python$VERSION/os.py`` file."
msgstr ""

#: ../../peps/pep-0432.rst:1196
msgid ""
"The build time settings for ``PREFIX`` and ``EXEC_PREFIX`` are also "
"relevant, as are some registry settings on Windows. The hardcoded "
"fallbacks are based on the layout of the CPython source tree and build "
"output when working in a source checkout."
msgstr ""

#: ../../peps/pep-0432.rst:1203
msgid "Configuring ``sys.path``"
msgstr ""

#: ../../peps/pep-0432.rst:1205
msgid ""
"An embedding application may call ``Py_SetPath()`` prior to "
"``Py_Initialize()`` to completely override the calculation of "
"``sys.path``. It is not straightforward to only allow *some* of the "
"calculations, as modifying ``sys.path`` after initialization is already "
"complete means those modifications will not be in effect when standard "
"library modules are imported during the startup sequence."
msgstr ""

#: ../../peps/pep-0432.rst:1212
msgid ""
"If ``Py_SetPath()`` is not used prior to the first call to "
"``Py_GetPath()`` (implicit in ``Py_Initialize()``), then it builds on the"
" location data calculations above to calculate suitable path entries, "
"along with the ``PYTHONPATH`` environment variable."
msgstr ""

#: ../../peps/pep-0432.rst:1217
msgid "<TBD: On Windows, there's also a bunch of stuff to do with the registry>"
msgstr ""

#: ../../peps/pep-0432.rst:1219
msgid ""
"The ``site`` module, which is implicitly imported at startup (unless "
"disabled via the ``-S`` option) adds additional paths to this initial set"
" of paths, as described in its documentation [5]_."
msgstr ""

#: ../../peps/pep-0432.rst:1223
msgid ""
"The ``-s`` command line option can be used to exclude the user site "
"directory from the list of directories added. Embedding applications can "
"control this by setting the ``Py_NoUserSiteDirectory`` global variable."
msgstr ""

#: ../../peps/pep-0432.rst:1227
msgid ""
"The following commands can be used to check the default path "
"configurations for a given Python executable on a given system:"
msgstr ""

#: ../../peps/pep-0432.rst:1230
msgid ""
"``./python -c \"import sys, pprint; pprint.pprint(sys.path)\"`` - "
"standard configuration"
msgstr ""

#: ../../peps/pep-0432.rst:1232
msgid ""
"``./python -s -c \"import sys, pprint; pprint.pprint(sys.path)\"`` - user"
" site directory disabled"
msgstr ""

#: ../../peps/pep-0432.rst:1234
msgid ""
"``./python -S -c \"import sys, pprint; pprint.pprint(sys.path)\"`` - all "
"site path modifications disabled"
msgstr ""

#: ../../peps/pep-0432.rst:1237
msgid ""
"(Note: you can see similar information using ``-m site`` instead of "
"``-c``, but this is slightly misleading as it calls ``os.abspath`` on all"
" of the path entries, making relative path entries look absolute. Using "
"the ``site`` module also causes problems in the last case, as on Python "
"versions prior to 3.3, explicitly importing site will carry out the path "
"modifications ``-S`` avoids, while on 3.3+ combining ``-m site`` with "
"``-S`` currently fails)"
msgstr ""

#: ../../peps/pep-0432.rst:1244
msgid "The calculation of ``sys.path[0]`` is comparatively straightforward:"
msgstr ""

#: ../../peps/pep-0432.rst:1246
msgid ""
"For an ordinary script (Python source or compiled bytecode), "
"``sys.path[0]`` will be the directory containing the script."
msgstr ""

#: ../../peps/pep-0432.rst:1248
msgid ""
"For a valid ``sys.path`` entry (typically a zipfile or directory), "
"``sys.path[0]`` will be that path"
msgstr ""

#: ../../peps/pep-0432.rst:1250
msgid ""
"For an interactive session, running from stdin or when using the ``-c`` "
"or ``-m`` switches, ``sys.path[0]`` will be the empty string, which the "
"import system interprets as allowing imports from the current directory"
msgstr ""

#: ../../peps/pep-0432.rst:1256
msgid "Configuring ``sys.argv``"
msgstr ""

#: ../../peps/pep-0432.rst:1258
msgid ""
"Unlike most other settings discussed in this PEP, ``sys.argv`` is not set"
" implicitly by ``Py_Initialize()``. Instead, it must be set via an "
"explicitly call to ``Py_SetArgv()``."
msgstr ""

#: ../../peps/pep-0432.rst:1262
msgid ""
"CPython calls this in ``Py_Main()`` after calling ``Py_Initialize()``. "
"The calculation of ``sys.argv[1:]`` is straightforward: they're the "
"command line arguments passed after the script name or the argument to "
"the ``-c`` or ``-m`` options."
msgstr ""

#: ../../peps/pep-0432.rst:1267
msgid "The calculation of ``sys.argv[0]`` is a little more complicated:"
msgstr ""

#: ../../peps/pep-0432.rst:1269
msgid "For an ordinary script (source or bytecode), it will be the script name"
msgstr ""

#: ../../peps/pep-0432.rst:1270
msgid ""
"For a ``sys.path`` entry (typically a zipfile or directory) it will "
"initially be the zipfile or directory name, but will later be changed by "
"the ``runpy`` module to the full path to the imported ``__main__`` "
"module."
msgstr ""

#: ../../peps/pep-0432.rst:1273
msgid ""
"For a module specified with the ``-m`` switch, it will initially be the "
"string ``\"-m\"``, but will later be changed by the ``runpy`` module to "
"the full path to the executed module."
msgstr ""

#: ../../peps/pep-0432.rst:1276
msgid ""
"For a package specified with the ``-m`` switch, it will initially be the "
"string ``\"-m\"``, but will later be changed by the ``runpy`` module to "
"the full path to the executed ``__main__`` submodule of the package."
msgstr ""

#: ../../peps/pep-0432.rst:1279
msgid "For a command executed with ``-c``, it will be the string ``\"-c\"``"
msgstr ""

#: ../../peps/pep-0432.rst:1280
msgid "For explicitly requested input from stdin, it will be the string ``\"-\"``"
msgstr ""

#: ../../peps/pep-0432.rst:1281
msgid "Otherwise, it will be the empty string"
msgstr ""

#: ../../peps/pep-0432.rst:1283
msgid ""
"Embedding applications must call Py_SetArgv themselves. The CPython logic"
" for doing so is part of ``Py_Main()`` and is not exposed separately. "
"However, the ``runpy`` module does provide roughly equivalent logic in "
"``runpy.run_module`` and ``runpy.run_path``."
msgstr ""

#: ../../peps/pep-0432.rst:1291
msgid "Other configuration settings"
msgstr ""

#: ../../peps/pep-0432.rst:1293
msgid "TBD: Cover the initialization of the following in more detail:"
msgstr ""

#: ../../peps/pep-0432.rst:1295
msgid "Completely disabling the import system"
msgstr ""

#: ../../peps/pep-0432.rst:1296
msgid "The initial warning system state:"
msgstr ""

#: ../../peps/pep-0432.rst:1298
msgid "``sys.warnoptions``"
msgstr ""

#: ../../peps/pep-0432.rst:1299
msgid "(-W option, PYTHONWARNINGS)"
msgstr ""

#: ../../peps/pep-0432.rst:1301
msgid ""
"Arbitrary extended options (e.g. to automatically enable "
"``faulthandler``):"
msgstr ""

#: ../../peps/pep-0432.rst:1303
msgid "``sys._xoptions``"
msgstr ""

#: ../../peps/pep-0432.rst:1304
msgid "(-X option)"
msgstr ""

#: ../../peps/pep-0432.rst:1306
msgid "The filesystem encoding used by:"
msgstr ""

#: ../../peps/pep-0432.rst:1308
msgid "``sys.getfsencoding``"
msgstr ""

#: ../../peps/pep-0432.rst:1309
msgid "``os.fsencode``"
msgstr ""

#: ../../peps/pep-0432.rst:1310
msgid "``os.fsdecode``"
msgstr ""

#: ../../peps/pep-0432.rst:1312
msgid "The IO encoding and buffering used by:"
msgstr ""

#: ../../peps/pep-0432.rst:1314
msgid "``sys.stdin``"
msgstr ""

#: ../../peps/pep-0432.rst:1315
msgid "``sys.stdout``"
msgstr ""

#: ../../peps/pep-0432.rst:1316
msgid "``sys.stderr``"
msgstr ""

#: ../../peps/pep-0432.rst:1317
msgid "(-u option, PYTHONIOENCODING, PYTHONUNBUFFEREDIO)"
msgstr ""

#: ../../peps/pep-0432.rst:1319
msgid "Whether or not to implicitly cache bytecode files:"
msgstr ""

#: ../../peps/pep-0432.rst:1321
msgid "``sys.dont_write_bytecode``"
msgstr ""

#: ../../peps/pep-0432.rst:1322
msgid "(-B option, PYTHONDONTWRITEBYTECODE)"
msgstr ""

#: ../../peps/pep-0432.rst:1324
msgid ""
"Whether or not to enforce correct case in filenames on case-insensitive "
"platforms"
msgstr ""

#: ../../peps/pep-0432.rst:1327
msgid "``os.environ[\"PYTHONCASEOK\"]``"
msgstr ""

#: ../../peps/pep-0432.rst:1329
msgid "The other settings exposed to Python code in ``sys.flags``:"
msgstr ""

#: ../../peps/pep-0432.rst:1331
msgid "``debug`` (Enable debugging output in the pgen parser)"
msgstr ""

#: ../../peps/pep-0432.rst:1332
msgid "``inspect`` (Enter interactive interpreter after __main__ terminates)"
msgstr ""

#: ../../peps/pep-0432.rst:1333
msgid "``interactive`` (Treat stdin as a tty)"
msgstr ""

#: ../../peps/pep-0432.rst:1334
msgid "``optimize`` (__debug__ status, write .pyc or .pyo, strip doc strings)"
msgstr ""

#: ../../peps/pep-0432.rst:1335
msgid "``no_user_site`` (don't add the user site directory to sys.path)"
msgstr ""

#: ../../peps/pep-0432.rst:1336
msgid "``no_site`` (don't implicitly import site during startup)"
msgstr ""

#: ../../peps/pep-0432.rst:1337
msgid "``ignore_environment`` (whether environment vars are used during config)"
msgstr ""

#: ../../peps/pep-0432.rst:1338
msgid "``verbose`` (enable all sorts of random output)"
msgstr ""

#: ../../peps/pep-0432.rst:1339
msgid "``bytes_warning`` (warnings/errors for implicit str/bytes interaction)"
msgstr ""

#: ../../peps/pep-0432.rst:1340
msgid ""
"``quiet`` (disable banner output even if verbose is also enabled or stdin"
" is a tty and the interpreter is launched in interactive mode)"
msgstr ""

#: ../../peps/pep-0432.rst:1343
msgid "Whether or not CPython's signal handlers should be installed"
msgstr ""

#: ../../peps/pep-0432.rst:1345
msgid ""
"Much of the configuration of CPython is currently handled through C level"
" global variables::"
msgstr ""

#: ../../peps/pep-0432.rst:1359
msgid ""
"For the above variables, the conversion of command line options and "
"environment variables to C global variables is handled by ``Py_Main``, so"
" each embedding application must set those appropriately in order to "
"change them from their defaults."
msgstr ""

#: ../../peps/pep-0432.rst:1364
msgid ""
"Some configuration can only be provided as OS level environment "
"variables::"
msgstr ""

#: ../../peps/pep-0432.rst:1370
msgid ""
"The ``Py_InitializeEx()`` API also accepts a boolean flag to indicate "
"whether or not CPython's signal handlers should be installed."
msgstr ""

#: ../../peps/pep-0432.rst:1373
msgid ""
"Finally, some interactive behaviour (such as printing the introductory "
"banner) is triggered only when standard input is reported as a terminal "
"connection by the operating system."
msgstr ""

#: ../../peps/pep-0432.rst:1377
msgid ""
"TBD: Document how the \"-x\" option is handled (skips processing of the "
"first comment line in the main script)"
msgstr ""

#: ../../peps/pep-0432.rst:1380
msgid "Also see detailed sequence of operations notes at [1]_."
msgstr ""

#: ../../peps/pep-0432.rst:1384
msgid "References"
msgstr "Referências"

#: ../../peps/pep-0432.rst:1386
msgid ""
"CPython interpreter initialization notes "
"(http://wiki.python.org/moin/CPythonInterpreterInitialization)"
msgstr ""

#: ../../peps/pep-0432.rst:1389
msgid ""
"BitBucket Sandbox "
"(https://bitbucket.org/ncoghlan/cpython_sandbox/compare/pep432_modular_bootstrap..default#commits)"
msgstr ""

#: ../../peps/pep-0432.rst:1392
msgid ""
"\\*nix getpath implementation "
"(http://hg.python.org/cpython/file/default/Modules/getpath.c)"
msgstr ""

#: ../../peps/pep-0432.rst:1395
msgid ""
"Windows getpath implementation "
"(http://hg.python.org/cpython/file/default/PC/getpathp.c)"
msgstr ""

#: ../../peps/pep-0432.rst:1398
msgid "Site module documentation (http://docs.python.org/3/library/site.html)"
msgstr ""

#: ../../peps/pep-0432.rst:1401
msgid "Proposed CLI option for isolated mode (http://bugs.python.org/issue16499)"
msgstr ""

#: ../../peps/pep-0432.rst:1404
msgid ""
"Adding to sys.path on the command line (https://mail.python.org/pipermail"
"/python-ideas/2010-October/008299.html) "
"(https://mail.python.org/pipermail/python-"
"ideas/2012-September/016128.html)"
msgstr ""

#: ../../peps/pep-0432.rst:1408
msgid "Control sys.path[0] initialisation (http://bugs.python.org/issue13475)"
msgstr ""

#: ../../peps/pep-0432.rst:1411
msgid ""
"Enabling code coverage in subprocesses when testing "
"(http://bugs.python.org/issue14803)"
msgstr ""

#: ../../peps/pep-0432.rst:1414
msgid ""
"Problems with PYTHONIOENCODING in Blender "
"(http://bugs.python.org/issue16129)"
msgstr ""

#: ../../peps/pep-0432.rst:1420
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0432.rst:1421
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid ""
#~ "Nick Coghlan <ncoghlan@gmail.com>, Victor "
#~ "Stinner <vstinner@python.org>, Eric Snow "
#~ "<ericsnowcurrently@gmail.com>"
#~ msgstr ""

