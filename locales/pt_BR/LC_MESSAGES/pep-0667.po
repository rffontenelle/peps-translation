# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-14 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../peps/peps/pep-0667.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/peps/pep-0667.rst:3
msgid "Mark Shannon <mark@hotpy.org>, Tian Gao <gaogaotiantian@hotmail.com>"
msgstr ""

#: ../../peps/peps/pep-0667.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/peps/pep-0667.rst:5
msgid "https://discuss.python.org/t/46631"
msgstr ""

#: ../../peps/peps/pep-0667.rst
msgid "Status"
msgstr "Status"

#: ../../peps/peps/pep-0667.rst:6
#, fuzzy
msgid "Accepted"
msgstr "Criada em"

#: ../../peps/peps/pep-0667.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/peps/pep-0667.rst:7
msgid "Standards Track"
msgstr ""

#: ../../peps/peps/pep-0667.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/peps/pep-0667.rst:8
msgid "30-Jul-2021"
msgstr ""

#: ../../peps/peps/pep-0667.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/peps/pep-0667.rst:9
msgid "3.13"
msgstr ""

#: ../../peps/peps/pep-0667.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/peps/pep-0667.rst:10
msgid "20-Aug-2021"
msgstr ""

#: ../../peps/peps/pep-0667.rst
msgid "Resolution"
msgstr ""

#: ../../peps/peps/pep-0667.rst:11
msgid ""
"https://discuss.python.org/t/pep-667-consistent-views-of-namespaces/46631/25"
msgstr ""

#: ../../peps/peps/pep-0667.rst:15
msgid "Abstract"
msgstr ""

#: ../../peps/peps/pep-0667.rst:17
msgid ""
"In early versions of Python all namespaces, whether in functions, classes or "
"modules, were all implemented the same way: as a dictionary."
msgstr ""

#: ../../peps/peps/pep-0667.rst:20
msgid ""
"For performance reasons, the implementation of function namespaces was "
"changed. Unfortunately this meant that accessing these namespaces through "
"``locals()`` and ``frame.f_locals`` ceased to be consistent and some odd "
"bugs crept in over the years as threads, generators and coroutines were "
"added."
msgstr ""

#: ../../peps/peps/pep-0667.rst:26
msgid ""
"This PEP proposes making these namespaces consistent once more. "
"Modifications to ``frame.f_locals`` will always be visible in the underlying "
"variables. Modifications to local variables will immediately be visible in "
"``frame.f_locals``, and they will be consistent regardless of threading or "
"coroutines."
msgstr ""

#: ../../peps/peps/pep-0667.rst:32
msgid ""
"The ``locals()`` function will act the same as it does now for class and "
"modules scopes. For function scopes it will return an instantaneous snapshot "
"of the underlying ``frame.f_locals``."
msgstr ""

#: ../../peps/peps/pep-0667.rst:37
msgid "Motivation"
msgstr ""

#: ../../peps/peps/pep-0667.rst:39
msgid ""
"The current implementation of ``locals()`` and ``frame.f_locals`` is slow, "
"inconsistent and buggy. We want to make it faster, consistent, and most "
"importantly fix the bugs."
msgstr ""

#: ../../peps/peps/pep-0667.rst:43 ../../peps/peps/pep-0667.rst:110
msgid "For example::"
msgstr ""

#: ../../peps/peps/pep-0667.rst:50
msgid "prints ``2``"
msgstr ""

#: ../../peps/peps/pep-0667.rst:52
msgid "but::"
msgstr ""

#: ../../peps/peps/pep-0667.rst:60
msgid "prints ``1``"
msgstr ""

#: ../../peps/peps/pep-0667.rst:62
msgid ""
"This is inconsistent, and confusing. With this PEP both examples would print "
"``2``."
msgstr ""

#: ../../peps/peps/pep-0667.rst:65
msgid ""
"Worse than that, the current behavior can result in strange `bugs <https://"
"github.com/python/cpython/issues/74929>`__."
msgstr ""

#: ../../peps/peps/pep-0667.rst:68
msgid ""
"There are no compensating advantages for the current behavior; it is "
"unreliable and slow."
msgstr ""

#: ../../peps/peps/pep-0667.rst:72
msgid "Rationale"
msgstr ""

#: ../../peps/peps/pep-0667.rst:74
msgid ""
"The current implementation of ``frame.f_locals`` returns a dictionary that "
"is created on the fly from the array of local variables. This can result in "
"the array and dictionary getting out of sync with each other. Writes to the "
"``f_locals`` may not show up as modifications to local variables. Writes to "
"local variables can get lost."
msgstr ""

#: ../../peps/peps/pep-0667.rst:80
msgid ""
"By making ``frame.f_locals`` return a view on the underlying frame, these "
"problems go away. ``frame.f_locals`` is always in sync with the frame "
"because it is a view of it, not a copy of it."
msgstr ""

#: ../../peps/peps/pep-0667.rst:85
msgid "Specification"
msgstr ""

#: ../../peps/peps/pep-0667.rst:88 ../../peps/peps/pep-0667.rst:195
msgid "Python"
msgstr ""

#: ../../peps/peps/pep-0667.rst:90
msgid ""
"``frame.f_locals`` will return a view object on the frame that implements "
"the ``collections.abc.Mapping`` interface."
msgstr ""

#: ../../peps/peps/pep-0667.rst:93
msgid ""
"For module and class scopes ``frame.f_locals`` will be a dictionary, for "
"function scopes it will be a custom class."
msgstr ""

#: ../../peps/peps/pep-0667.rst:96
msgid "``locals()`` will be defined as::"
msgstr ""

#: ../../peps/peps/pep-0667.rst:105
msgid ""
"All writes to the ``f_locals`` mapping will be immediately visible in the "
"underlying variables. All changes to the underlying variables will be "
"immediately visible in the mapping. The ``f_locals`` object will be a full "
"mapping, and can have arbitrary key-value pairs added to it."
msgstr ""

#: ../../peps/peps/pep-0667.rst:125
msgid "``test()`` will print ``{'x': 2, 'y': 4, 'z': 5} 2``."
msgstr ""

#: ../../peps/peps/pep-0667.rst:127
msgid ""
"In Python 3.10, the above will fail with an ``UnboundLocalError``, as the "
"definition of ``y`` by ``l()['y'] = 4`` is lost."
msgstr ""

#: ../../peps/peps/pep-0667.rst:130
msgid ""
"If the second-to-last line were changed from ``y`` to ``z``, this would be a "
"``NameError``, as it is today. Keys added to ``frame.f_locals`` that are not "
"lexically local variables remain visible in ``frame.f_locals``, but do not "
"dynamically become local variables."
msgstr ""

#: ../../peps/peps/pep-0667.rst:136 ../../peps/peps/pep-0667.rst:205
msgid "C-API"
msgstr ""

#: ../../peps/peps/pep-0667.rst:139
msgid "Extensions to the API"
msgstr ""

#: ../../peps/peps/pep-0667.rst:141
msgid "Three new C-API functions will be added::"
msgstr ""

#: ../../peps/peps/pep-0667.rst:147
msgid ""
"``PyEval_GetFrameLocals()`` is equivalent to: ``locals()``. "
"``PyEval_GetFrameGlobals()`` is equivalent to: ``globals()``."
msgstr ""

#: ../../peps/peps/pep-0667.rst:150
msgid "All these functions will return a new reference."
msgstr ""

#: ../../peps/peps/pep-0667.rst:153
msgid "Changes to existing APIs"
msgstr ""

#: ../../peps/peps/pep-0667.rst:155
msgid ""
"``PyFrame_GetLocals(f)`` is equivalent to ``f.f_locals``, and hence its "
"return value will change as described above for accessing ``f.f_locals``."
msgstr ""

#: ../../peps/peps/pep-0667.rst:158
msgid ""
"The following C-API functions will be deprecated, as they return borrowed "
"references::"
msgstr ""

#: ../../peps/peps/pep-0667.rst:164
msgid "The following functions should be used instead::"
msgstr ""

#: ../../peps/peps/pep-0667.rst:170
msgid "which return new references."
msgstr ""

#: ../../peps/peps/pep-0667.rst:172
msgid ""
"The semantics of ``PyEval_GetLocals()`` is changed as it now returns a proxy "
"for the frame locals in optimized frames, not a dictionary."
msgstr ""

#: ../../peps/peps/pep-0667.rst:175
msgid ""
"The following three functions will become no-ops, and will be deprecated::"
msgstr ""

#: ../../peps/peps/pep-0667.rst:182
msgid "Behavior of f_locals for optimized functions"
msgstr ""

#: ../../peps/peps/pep-0667.rst:184
msgid ""
"Although ``f.f_locals`` behaves as if it were the namespace of the function, "
"there will be some observable differences. For example, ``f.f_locals is f."
"f_locals`` may be ``False``."
msgstr ""

#: ../../peps/peps/pep-0667.rst:188
msgid ""
"However ``f.f_locals == f.f_locals`` will be ``True``, and all changes to "
"the underlying variables, by any means, will always be visible."
msgstr ""

#: ../../peps/peps/pep-0667.rst:192
msgid "Backwards Compatibility"
msgstr ""

#: ../../peps/peps/pep-0667.rst:197
msgid ""
"The current implementation has many corner cases and oddities. Code that "
"works around those may need to be changed. Code that uses ``locals()`` for "
"simple templating, or print debugging, will continue to work correctly. "
"Debuggers and other tools that use ``f_locals`` to modify local variables, "
"will now work correctly, even in the presence of threaded code, coroutines "
"and generators."
msgstr ""

#: ../../peps/peps/pep-0667.rst:208
msgid "PyEval_GetLocals"
msgstr ""

#: ../../peps/peps/pep-0667.rst:210
msgid ""
"Because ``PyEval_GetLocals()`` returns a borrowed reference, it requires the "
"proxy mapping to be cached on the frame, extending its lifetime and creating "
"a cycle. ``PyEval_GetFrameLocals()`` should be used instead."
msgstr ""

#: ../../peps/peps/pep-0667.rst:214
msgid "This code::"
msgstr ""

#: ../../peps/peps/pep-0667.rst:222
msgid "should be replaced with::"
msgstr ""

#: ../../peps/peps/pep-0667.rst:230 ../../peps/peps/pep-0667.rst:406
msgid "Implementation"
msgstr ""

#: ../../peps/peps/pep-0667.rst:232
msgid ""
"Each read of ``frame.f_locals`` will create a new proxy object that gives "
"the appearance of being the mapping of local (including cell and free) "
"variable names to the values of those local variables."
msgstr ""

#: ../../peps/peps/pep-0667.rst:236
msgid ""
"A possible implementation is sketched out below. All attributes that start "
"with an underscore are invisible and cannot be accessed directly. They serve "
"only to illustrate the proposed design."
msgstr ""

#: ../../peps/peps/pep-0667.rst:359
msgid "C API"
msgstr ""

#: ../../peps/peps/pep-0667.rst:361
msgid "``PyEval_GetLocals()`` will be implemented roughly as follows::"
msgstr ""

#: ../../peps/peps/pep-0667.rst:371
msgid ""
"As with all functions that return a borrowed reference, care must be taken "
"to ensure that the reference is not used beyond the lifetime of the object."
msgstr ""

#: ../../peps/peps/pep-0667.rst:375
msgid "Impact on PEP 709 inlined comprehensions"
msgstr ""

#: ../../peps/peps/pep-0667.rst:377
msgid ""
"For inlined comprehensions within a function, ``locals()`` currently behaves "
"the same inside or outside of the comprehension, and this will not change. "
"The behavior of ``locals()`` inside functions will generally change as "
"specified in the rest of this PEP."
msgstr ""

#: ../../peps/peps/pep-0667.rst:382
msgid ""
"For inlined comprehensions at module or class scope, currently calling "
"``locals()`` within the inlined comprehension returns a new dictionary for "
"each call. This PEP will make ``locals()`` within a function also always "
"return a new dictionary for each call, improving consistency; class or "
"module scope inlined comprehensions will appear to behave as if the inlined "
"comprehension is still a distinct function."
msgstr ""

#: ../../peps/peps/pep-0667.rst:390
msgid "Comparison with PEP 558"
msgstr ""

#: ../../peps/peps/pep-0667.rst:392
msgid ""
"This PEP and :pep:`558` share a common goal: to make the semantics of  "
"``locals()`` and ``frame.f_locals()`` intelligible, and their operation "
"reliable."
msgstr ""

#: ../../peps/peps/pep-0667.rst:397
msgid ""
"The key difference between this PEP and :pep:`558` is that :pep:`558` keeps "
"an internal copy of the local variables, whereas this PEP does not."
msgstr ""

#: ../../peps/peps/pep-0667.rst:401
msgid ""
":pep:`558` does not specify exactly when the internal copy is updated, "
"making the behavior of :pep:`558` impossible to reason about."
msgstr ""

#: ../../peps/peps/pep-0667.rst:408
msgid ""
"The implementation is in development as a `draft pull request on GitHub "
"<https://github.com/python/cpython/pull/115153>`__."
msgstr ""

#: ../../peps/peps/pep-0667.rst:412
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/peps/pep-0667.rst:414
msgid ""
"This document is placed in the public domain or under the CC0-1.0-Universal "
"license, whichever is more permissive."
msgstr ""

#~ msgid "References"
#~ msgstr "Referências"
