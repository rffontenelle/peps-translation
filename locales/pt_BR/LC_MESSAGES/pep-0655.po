# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-14 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../peps/peps/pep-0655.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/peps/pep-0655.rst:3
msgid "David Foster <david at dafoster.net>"
msgstr ""

#: ../../peps/peps/pep-0655.rst
msgid "Sponsor"
msgstr ""

#: ../../peps/peps/pep-0655.rst:4
msgid "Guido van Rossum <guido at python.org>"
msgstr ""

#: ../../peps/peps/pep-0655.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/peps/pep-0655.rst:5
msgid ""
"https://mail.python.org/archives/list/typing-sig@python.org/"
"thread/53XVOD5ZUKJ263MWA6AUPEA6J7LBBLNV/"
msgstr ""

#: ../../peps/peps/pep-0655.rst
msgid "Status"
msgstr "Status"

#: ../../peps/peps/pep-0655.rst:6
msgid "Final"
msgstr ""

#: ../../peps/peps/pep-0655.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/peps/pep-0655.rst:7
msgid "Standards Track"
msgstr ""

#: ../../peps/peps/pep-0655.rst
msgid "Topic"
msgstr ""

#: ../../peps/peps/pep-0655.rst:8
msgid "Typing"
msgstr ""

#: ../../peps/peps/pep-0655.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/peps/pep-0655.rst:9
msgid "30-Jan-2021"
msgstr ""

#: ../../peps/peps/pep-0655.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/peps/pep-0655.rst:10
msgid "3.11"
msgstr ""

#: ../../peps/peps/pep-0655.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/peps/pep-0655.rst:11
msgid ""
"31-Jan-2021, 11-Feb-2021, 20-Feb-2021, 26-Feb-2021, 17-Jan-2022, 28-Jan-2022"
msgstr ""

#: ../../peps/peps/pep-0655.rst
msgid "Resolution"
msgstr ""

#: ../../peps/peps/pep-0655.rst:12
msgid ""
"https://mail.python.org/archives/list/python-dev@python.org/message/"
"AJEDNVC3FXM5QXNNW5CR4UCT4KI5XVUE/"
msgstr ""

#: ../../peps/peps/pep-0655.rst:19
msgid "Abstract"
msgstr ""

#: ../../peps/peps/pep-0655.rst:21
msgid ""
":pep:`589` defines notation for declaring a TypedDict with all required keys "
"and notation for defining a TypedDict with :pep:`all potentially-missing "
"keys <589#totality>`, however it does not provide a mechanism to declare "
"some keys as required and others as potentially-missing. This PEP introduces "
"two new notations: ``Required[]``, which can be used on individual items of "
"a TypedDict to mark them as required, and ``NotRequired[]``, which can be "
"used on individual items to mark them as potentially-missing."
msgstr ""

#: ../../peps/peps/pep-0655.rst:31
msgid ""
"This PEP makes no Python grammar changes. Correct usage of required and "
"potentially-missing keys of TypedDicts is intended to be enforced only by "
"static type checkers and need not be enforced by Python itself at runtime."
msgstr ""

#: ../../peps/peps/pep-0655.rst:38
msgid "Motivation"
msgstr ""

#: ../../peps/peps/pep-0655.rst:40
msgid ""
"It is not uncommon to want to define a TypedDict with some keys that are "
"required and others that are potentially-missing. Currently the only way to "
"define such a TypedDict is to declare one TypedDict with one value for "
"``total`` and then inherit it from another TypedDict with a different value "
"for ``total``:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:54
msgid ""
"Having to declare two different TypedDict types for this purpose is "
"cumbersome."
msgstr ""

#: ../../peps/peps/pep-0655.rst:57
msgid ""
"This PEP introduces two new type qualifiers, ``typing.Required`` and "
"``typing.NotRequired``, which allow defining a *single* TypedDict with a mix "
"of both required and potentially-missing keys:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:67
msgid ""
"This PEP also makes it possible to define TypedDicts in the :pep:"
"`alternative functional syntax <589#alternative-syntax>` with a mix of "
"required and potentially-missing keys, which is not currently possible at "
"all because the alternative syntax does not support inheritance:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:83
msgid "Rationale"
msgstr ""

#: ../../peps/peps/pep-0655.rst:85
msgid ""
"One might think it unusual to propose notation that prioritizes marking "
"*required* keys rather than *potentially-missing* keys, as is customary in "
"other languages like TypeScript:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:96
msgid ""
"The difficulty is that the best word for marking a potentially-missing key, "
"``Optional[]``, is already used in Python for a completely different "
"purpose: marking values that could be either of a particular type or "
"``None``. In particular the following does not work:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:107
msgid ""
"Attempting to use any synonym of “optional” to mark potentially-missing keys "
"(like ``Missing[]``) would be too similar to ``Optional[]`` and be easy to "
"confuse with it."
msgstr ""

#: ../../peps/peps/pep-0655.rst:111
msgid ""
"Thus it was decided to focus on positive-form phrasing for required keys "
"instead, which is straightforward to spell as ``Required[]``."
msgstr ""

#: ../../peps/peps/pep-0655.rst:114
msgid ""
"Nevertheless it is common for folks wanting to extend a regular "
"(``total=True``) TypedDict to only want to add a small number of potentially-"
"missing keys, which necessitates a way to mark keys that are *not* required "
"and potentially-missing, and so we also allow the ``NotRequired[]`` form for "
"that case."
msgstr ""

#: ../../peps/peps/pep-0655.rst:122
msgid "Specification"
msgstr ""

#: ../../peps/peps/pep-0655.rst:124
msgid ""
"The ``typing.Required`` type qualifier is used to indicate that a variable "
"declared in a TypedDict definition is a required key:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:133
msgid ""
"Additionally the ``typing.NotRequired`` type qualifier is used to indicate "
"that a variable declared in a TypedDict definition is a potentially-missing "
"key:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:143
msgid ""
"It is an error to use ``Required[]`` or ``NotRequired[]`` in any location "
"that is not an item of a TypedDict. Type checkers must enforce this "
"restriction."
msgstr ""

#: ../../peps/peps/pep-0655.rst:147
msgid ""
"It is valid to use ``Required[]`` and ``NotRequired[]`` even for items where "
"it is redundant, to enable additional explicitness if desired:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:156
msgid ""
"It is an error to use both ``Required[]`` and ``NotRequired[]`` at the same "
"time:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:165
msgid ""
"Type checkers must enforce this restriction. The runtime implementations of "
"``Required[]`` and ``NotRequired[]`` may also enforce this restriction."
msgstr ""

#: ../../peps/peps/pep-0655.rst:169
msgid ""
"The :pep:`alternative functional syntax <589#alternative-syntax>` for "
"TypedDict also supports ``Required[]`` and ``NotRequired[]``:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:179
msgid "Interaction with ``total=False``"
msgstr ""

#: ../../peps/peps/pep-0655.rst:181
msgid ""
"Any :pep:`589`-style TypedDict declared with ``total=False`` is equivalent "
"to a TypedDict with an implicit ``total=True`` definition with all of its "
"keys marked as ``NotRequired[]``."
msgstr ""

#: ../../peps/peps/pep-0655.rst:185
msgid "Therefore:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:196
msgid "is equivalent to:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:208
msgid "Interaction with ``Annotated[]``"
msgstr ""

#: ../../peps/peps/pep-0655.rst:210
msgid ""
"``Required[]`` and ``NotRequired[]`` can be used with ``Annotated[]``, in "
"any nesting order:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:225
msgid ""
"In particular allowing ``Annotated[]`` to be the outermost annotation for an "
"item allows better interoperability with non-typing uses of annotations, "
"which may always want ``Annotated[]`` as the outermost annotation. [3]_"
msgstr ""

#: ../../peps/peps/pep-0655.rst:232
msgid "Runtime behavior"
msgstr ""

#: ../../peps/peps/pep-0655.rst:236
msgid "Interaction with ``get_type_hints()``"
msgstr ""

#: ../../peps/peps/pep-0655.rst:238
msgid ""
"``typing.get_type_hints(...)`` applied to a TypedDict will by default strip "
"out any ``Required[]`` or ``NotRequired[]`` type qualifiers, since these "
"qualifiers are expected to be inconvenient for code casually introspecting "
"type annotations."
msgstr ""

#: ../../peps/peps/pep-0655.rst:243
msgid ""
"``typing.get_type_hints(..., include_extras=True)`` however *will* retain "
"``Required[]`` and ``NotRequired[]`` type qualifiers, for advanced code "
"introspecting type annotations that wishes to preserve *all* annotations in "
"the original source:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:261
msgid "Interaction with ``get_origin()`` and ``get_args()``"
msgstr ""

#: ../../peps/peps/pep-0655.rst:263
msgid ""
"``typing.get_origin()`` and ``typing.get_args()`` will be updated to "
"recognize ``Required[]`` and ``NotRequired[]``:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:276
msgid "Interaction with ``__required_keys__`` and ``__optional_keys__``"
msgstr ""

#: ../../peps/peps/pep-0655.rst:278
msgid ""
"An item marked with ``Required[]`` will always appear in the "
"``__required_keys__`` for its enclosing TypedDict. Similarly an item marked "
"with ``NotRequired[]`` will always appear in ``__optional_keys__``."
msgstr ""

#: ../../peps/peps/pep-0655.rst:289
msgid "Backwards Compatibility"
msgstr ""

#: ../../peps/peps/pep-0655.rst:291
msgid "No backward incompatible changes are made by this PEP."
msgstr ""

#: ../../peps/peps/pep-0655.rst:295
msgid "How to Teach This"
msgstr ""

#: ../../peps/peps/pep-0655.rst:297
msgid ""
"To define a TypedDict where most keys are required and some are potentially-"
"missing, define a single TypedDict as normal (without the ``total`` keyword) "
"and mark those few keys that are potentially-missing with ``NotRequired[]``."
msgstr ""

#: ../../peps/peps/pep-0655.rst:302
msgid ""
"To define a TypedDict where most keys are potentially-missing and a few are "
"required, define a ``total=False`` TypedDict and mark those few keys that "
"are required with ``Required[]``."
msgstr ""

#: ../../peps/peps/pep-0655.rst:306
msgid ""
"If some items accept ``None`` in addition to a regular value, it is "
"recommended that the ``TYPE|None`` notation be preferred over "
"``Optional[TYPE]`` for marking such item values, to avoid using "
"``Required[]`` or ``NotRequired[]`` alongside ``Optional[]`` within the same "
"TypedDict definition:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:312
msgid "Yes:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:323
msgid "Okay (required for Python 3.5.3-3.6):"
msgstr ""

#: ../../peps/peps/pep-0655.rst:332
msgid "No:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:343
msgid "Usage in Python <3.11"
msgstr ""

#: ../../peps/peps/pep-0655.rst:345
msgid ""
"If your code supports Python <3.11 and wishes to use ``Required[]`` or "
"``NotRequired[]`` then it should use ``typing_extensions.TypedDict`` rather "
"than ``typing.TypedDict`` because the latter will not understand "
"``(Not)Required[]``. In particular ``__required_keys__`` and "
"``__optional_keys__`` on the resulting TypedDict type will not be correct:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:351
msgid "Yes (Python 3.11+ only):"
msgstr ""

#: ../../peps/peps/pep-0655.rst:362
msgid "Yes (Python <3.11 and 3.11+):"
msgstr ""

#: ../../peps/peps/pep-0655.rst:375
msgid "No (Python <3.11 and 3.11+):"
msgstr ""

#: ../../peps/peps/pep-0655.rst:392
msgid "Reference Implementation"
msgstr ""

#: ../../peps/peps/pep-0655.rst:394
msgid ""
"The `mypy <http://www.mypy-lang.org/>`__ `0.930 <https://mypy-lang.blogspot."
"com/2021/12/mypy-0930-released.html>`__, `pyright <https://github.com/"
"Microsoft/pyright>`__ `1.1.117 <https://github.com/microsoft/pyright/"
"commit/7ed245b1845173090c6404e49912e8cbfb3417c8>`__, and `pyanalyze <https://"
"github.com/quora/pyanalyze>`__ `0.4.0 <https://pyanalyze.readthedocs.io/en/"
"latest/changelog.html#version-0-4-0-november-18-2021>`__ type checkers "
"support ``Required`` and ``NotRequired``."
msgstr ""

#: ../../peps/peps/pep-0655.rst:402
msgid ""
"A reference implementation of the runtime component is provided in the "
"`typing_extensions <https://github.com/python/typing/tree/master/"
"typing_extensions>`__ module."
msgstr ""

#: ../../peps/peps/pep-0655.rst:408
msgid "Rejected Ideas"
msgstr ""

#: ../../peps/peps/pep-0655.rst:411
msgid "Special syntax around the *key* of a TypedDict item"
msgstr ""

#: ../../peps/peps/pep-0655.rst:419
msgid ""
"This notation would require Python grammar changes and it is not believed "
"that marking TypedDict items as required or potentially-missing would meet "
"the high bar required to make such grammar changes."
msgstr ""

#: ../../peps/peps/pep-0655.rst:429
msgid ""
"This notation causes ``Optional[]`` to take on different meanings depending "
"on where it is positioned, which is inconsistent and confusing."
msgstr ""

#: ../../peps/peps/pep-0655.rst:432
msgid "Also, “let’s just not put funny syntax before the colon.” [1]_"
msgstr ""

#: ../../peps/peps/pep-0655.rst:436
msgid "Marking required or potentially-missing keys with an operator"
msgstr ""

#: ../../peps/peps/pep-0655.rst:438
msgid ""
"We could use unary ``+`` as shorthand to mark a required key, unary ``-`` to "
"mark a potentially-missing key, or unary ``~`` to mark a key with opposite-"
"of-normal totality:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:459
msgid ""
"Such operators could be implemented on ``type`` via the ``__pos__``, "
"``__neg__`` and ``__invert__`` special methods without modifying the grammar."
msgstr ""

#: ../../peps/peps/pep-0655.rst:463
msgid ""
"It was decided that it would be prudent to introduce long-form notation (i."
"e. ``Required[]`` and ``NotRequired[]``) before introducing any short-form "
"notation. Future PEPs may reconsider introducing this or other short-form "
"notation options."
msgstr ""

#: ../../peps/peps/pep-0655.rst:468
msgid ""
"Note when reconsidering introducing this short-form notation that ``+``, ``-"
"``, and ``~`` already have existing meanings in the Python typing world: "
"covariant, contravariant, and invariant:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:480
msgid "Marking absence of a value with a special constant"
msgstr ""

#: ../../peps/peps/pep-0655.rst:482
msgid ""
"We could introduce a new type-level constant which signals the absence of a "
"value when used as a union member, similar to JavaScript’s ``undefined`` "
"type, perhaps called ``Missing``:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:493
msgid ""
"Such a ``Missing`` constant could also be used for other scenarios such as "
"the type of a variable which is only conditionally defined:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:513
msgid "Misalignment with how unions apply to values"
msgstr ""

#: ../../peps/peps/pep-0655.rst:515
msgid ""
"However this use of ``...|Missing``, equivalent to ``Union[..., Missing]``, "
"doesn’t align well with what a union normally means: ``Union[...]`` always "
"describes the type of a *value* that is present. By contrast missingness or "
"non-totality is a property of a *variable* instead. Current precedent for "
"marking properties of a variable include ``Final[...]`` and "
"``ClassVar[...]``, which the proposal for ``Required[...]`` is aligned with."
msgstr ""

#: ../../peps/peps/pep-0655.rst:524
msgid "Misalignment with how unions are subdivided"
msgstr ""

#: ../../peps/peps/pep-0655.rst:526
msgid ""
"Furthermore the use of ``Union[..., Missing]`` doesn’t align with the usual "
"ways that union values are broken down: Normally you can eliminate "
"components of a union type using ``isinstance`` checks:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:544
msgid ""
"However if we were to allow ``Union[..., Missing]`` you’d either have to "
"eliminate the ``Missing`` case with ``hasattr`` for object attributes:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:561
msgid "or a check against ``locals()`` for local variables:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:576
msgid ""
"or a check via other means, such as against ``globals()`` for global "
"variables:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:592
msgid ""
"Weird and inconsistent. ``Missing`` is not really a value at all; it’s an "
"absence of definition and such an absence should be treated specially."
msgstr ""

#: ../../peps/peps/pep-0655.rst:597
msgid "Difficult to implement"
msgstr ""

#: ../../peps/peps/pep-0655.rst:599
msgid ""
"Eric Traut from the Pyright type checker team has stated that implementing a "
"``Union[..., Missing]``-style notation would be difficult. [2]_"
msgstr ""

#: ../../peps/peps/pep-0655.rst:604
msgid "Introduces a second null-like value into Python"
msgstr ""

#: ../../peps/peps/pep-0655.rst:606
msgid ""
"Defining a new ``Missing`` type-level constant would be very close to "
"introducing a new ``Missing`` value-level constant at runtime, creating a "
"second null-like runtime value in addition to ``None``. Having two different "
"null-like constants in Python (``None`` and ``Missing``) would be confusing. "
"Many newcomers to JavaScript already have difficulty distinguishing between "
"its analogous constants ``null`` and ``undefined``."
msgstr ""

#: ../../peps/peps/pep-0655.rst:616
msgid ""
"Replace Optional with Nullable. Repurpose Optional to mean “optional item”."
msgstr ""

#: ../../peps/peps/pep-0655.rst:618
msgid ""
"``Optional[]`` is too ubiquitous to deprecate, although use of it *may* fade "
"over time in favor of the ``T|None`` notation specified by :pep:`604`."
msgstr ""

#: ../../peps/peps/pep-0655.rst:623
msgid ""
"Change Optional to mean “optional item” in certain contexts instead of "
"“nullable”"
msgstr ""

#: ../../peps/peps/pep-0655.rst:625
msgid ""
"Consider the use of a special flag on a TypedDict definition to alter the "
"interpretation of ``Optional`` inside the TypedDict to mean “optional item” "
"rather than its usual meaning of “nullable”:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:635
msgid "or:"
msgstr ""

#: ../../peps/peps/pep-0655.rst:643
msgid ""
"This would add more confusion for users because it would mean that in *some* "
"contexts the meaning of ``Optional[]`` is different than in other contexts, "
"and it would be easy to overlook the flag."
msgstr ""

#: ../../peps/peps/pep-0655.rst:649
msgid "Various synonyms for “potentially-missing item”"
msgstr ""

#: ../../peps/peps/pep-0655.rst:651
msgid "Omittable – too easy to confuse with optional"
msgstr ""

#: ../../peps/peps/pep-0655.rst:652
msgid ""
"OptionalItem, OptionalKey – two words; too easy to confuse with optional"
msgstr ""

#: ../../peps/peps/pep-0655.rst:654
msgid "MayExist, MissingOk – two words"
msgstr ""

#: ../../peps/peps/pep-0655.rst:655
msgid ""
"Droppable – too similar to Rust’s ``Drop``, which means something different"
msgstr ""

#: ../../peps/peps/pep-0655.rst:657
msgid "Potential – too vague"
msgstr ""

#: ../../peps/peps/pep-0655.rst:658
msgid ""
"Open – sounds like applies to an entire structure rather then to an item"
msgstr ""

#: ../../peps/peps/pep-0655.rst:660
msgid "Excludable"
msgstr ""

#: ../../peps/peps/pep-0655.rst:661
msgid "Checked"
msgstr ""

#: ../../peps/peps/pep-0655.rst:665
msgid "References"
msgstr "Referências"

#: ../../peps/peps/pep-0655.rst:667
msgid ""
"https://mail.python.org/archives/list/typing-sig@python.org/"
"message/4I3GPIWDUKV6GUCHDMORGUGRE4F4SXGR/"
msgstr ""

#: ../../peps/peps/pep-0655.rst:669
msgid ""
"https://mail.python.org/archives/list/typing-sig@python.org/message/"
"S2VJSVG6WCIWPBZ54BOJPG56KXVSLZK6/"
msgstr ""

#: ../../peps/peps/pep-0655.rst:671
msgid "https://bugs.python.org/issue46491"
msgstr ""

#: ../../peps/peps/pep-0655.rst:674
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/peps/pep-0655.rst:676
msgid ""
"This document is placed in the public domain or under the CC0-1.0-Universal "
"license, whichever is more permissive."
msgstr ""
