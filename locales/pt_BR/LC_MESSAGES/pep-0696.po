# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-14 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../peps/peps/pep-0696.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/peps/pep-0696.rst:3
msgid "James Hilton-Balfe <gobot1234yt@gmail.com>"
msgstr ""

#: ../../peps/peps/pep-0696.rst
msgid "Sponsor"
msgstr ""

#: ../../peps/peps/pep-0696.rst:4
msgid "Jelle Zijlstra <jelle.zijlstra@gmail.com>"
msgstr ""

#: ../../peps/peps/pep-0696.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/peps/pep-0696.rst:5
msgid ""
"https://discuss.python.org/t/pep-696-type-defaults-for-typevarlikes/22569"
msgstr ""

#: ../../peps/peps/pep-0696.rst
msgid "Status"
msgstr "Status"

#: ../../peps/peps/pep-0696.rst:6
#, fuzzy
msgid "Accepted"
msgstr "Criada em"

#: ../../peps/peps/pep-0696.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/peps/pep-0696.rst:7
msgid "Standards Track"
msgstr ""

#: ../../peps/peps/pep-0696.rst
msgid "Topic"
msgstr ""

#: ../../peps/peps/pep-0696.rst:8
msgid "Typing"
msgstr ""

#: ../../peps/peps/pep-0696.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/peps/pep-0696.rst:10
msgid "14-Jul-2022"
msgstr ""

#: ../../peps/peps/pep-0696.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/peps/pep-0696.rst:11
msgid "3.13"
msgstr ""

#: ../../peps/peps/pep-0696.rst
msgid "Post-History"
msgstr ""

#: ../../peps/peps/pep-0696.rst:12
msgid ""
"`22-Mar-2022 <https://mail.python.org/archives/list/typing-sig@python.org/"
"thread/7VWBZWXTCX6RAJO6GG67BAXUPFZ24NTC/>`__, `08-Jan-2023 <https://discuss."
"python.org/t/pep-696-type-defaults-for-typevarlikes/22569/>`__,"
msgstr ""

#: ../../peps/peps/pep-0696.rst
msgid "Resolution"
msgstr ""

#: ../../peps/peps/pep-0696.rst:14
msgid ""
"https://discuss.python.org/t/pep-696-type-defaults-for-typevarlikes/22569/34"
msgstr ""

#: ../../peps/peps/pep-0696.rst:17
msgid "Abstract"
msgstr ""

#: ../../peps/peps/pep-0696.rst:19
msgid ""
"This PEP introduces the concept of type defaults for type parameters, "
"including ``TypeVar``, ``ParamSpec``, and ``TypeVarTuple``, which act as "
"defaults for type parameters for which no type is specified."
msgstr ""

#: ../../peps/peps/pep-0696.rst:23
msgid ""
"Default type argument support is available in some popular languages such as "
"C++, TypeScript, and Rust. A survey of type parameter syntax in some common "
"languages has been conducted by the author of :pep:`695` and can be found in "
"its :pep:`Appendix A <695#appendix-a-survey-of-type-parameter-syntax>`."
msgstr ""

#: ../../peps/peps/pep-0696.rst:31
msgid "Motivation"
msgstr ""

#: ../../peps/peps/pep-0696.rst:44
msgid ""
"One place this `regularly comes up <https://github.com/python/typing/"
"issues/975>`__ is ``Generator``. I propose changing the *stub definition* to "
"something like::"
msgstr ""

#: ../../peps/peps/pep-0696.rst:56
msgid "This is also useful for a ``Generic`` that is commonly over one type."
msgstr ""

#: ../../peps/peps/pep-0696.rst:72
msgid ""
"Not only does this improve typing for those who explicitly use it, it also "
"helps non-typing users who rely on auto-complete to speed up their "
"development."
msgstr ""

#: ../../peps/peps/pep-0696.rst:76
msgid "This design pattern is common in projects like:"
msgstr ""

#: ../../peps/peps/pep-0696.rst:78
msgid ""
"`discord.py <https://github.com/Rapptz/discord.py>`__ — where the example "
"above was taken from."
msgstr ""

#: ../../peps/peps/pep-0696.rst:80
msgid ""
"`NumPy <https://github.com/numpy/numpy>`__ — the default for types like "
"``ndarray``'s ``dtype`` would be ``float64``. Currently it's ``Unknown`` or "
"``Any``."
msgstr ""

#: ../../peps/peps/pep-0696.rst:83
msgid ""
"`TensorFlow <https://github.com/tensorflow/tensorflow>`__ — this could be "
"used for Tensor similarly to ``numpy.ndarray`` and would be useful to "
"simplify the definition of ``Layer``."
msgstr ""

#: ../../peps/peps/pep-0696.rst:89
msgid "Specification"
msgstr ""

#: ../../peps/peps/pep-0696.rst:92
msgid "Default Ordering and Subscription Rules"
msgstr ""

#: ../../peps/peps/pep-0696.rst:94
msgid ""
"The order for defaults should follow the standard function parameter rules, "
"so a type parameter with no ``default`` cannot follow one with a ``default`` "
"value. Doing so should ideally raise a ``TypeError`` in ``typing."
"_GenericAlias``/``types.GenericAlias``, and a type checker should flag this "
"as an error."
msgstr ""

#: ../../peps/peps/pep-0696.rst:139
msgid ""
"With the new Python 3.12 syntax for generics (introduced by :pep:`695`), "
"this can be enforced at compile time::"
msgstr ""

#: ../../peps/peps/pep-0696.rst:149
msgid "``ParamSpec`` Defaults"
msgstr ""

#: ../../peps/peps/pep-0696.rst:151
msgid ""
"``ParamSpec`` defaults are defined using the same syntax as ``TypeVar`` \\ s "
"but use a ``list`` of types or an ellipsis literal \"``...``\" or another in-"
"scope ``ParamSpec`` (see `Scoping Rules`_)."
msgstr ""

#: ../../peps/peps/pep-0696.rst:166
msgid "``TypeVarTuple`` Defaults"
msgstr ""

#: ../../peps/peps/pep-0696.rst:168
msgid ""
"``TypeVarTuple`` defaults are defined using the same syntax as ``TypeVar`` "
"\\ s but use an unpacked tuple of types instead of a single type or another "
"in-scope ``TypeVarTuple`` (see `Scoping Rules`_)."
msgstr ""

#: ../../peps/peps/pep-0696.rst:183
msgid "Using Another Type Parameter as ``default``"
msgstr ""

#: ../../peps/peps/pep-0696.rst:185
msgid ""
"This allows for a value to be used again when the type parameter to a "
"generic is missing but another type parameter is specified."
msgstr ""

#: ../../peps/peps/pep-0696.rst:188
msgid ""
"To use another type parameter as a default the ``default`` and the type "
"parameter must be the same type (a ``TypeVar``'s default must be a "
"``TypeVar``, etc.)."
msgstr ""

#: ../../peps/peps/pep-0696.rst:192
msgid ""
"`This could be used on builtins.slice <https://github.com/python/typing/"
"issues/159>`__ where the ``start`` parameter should default to ``int``, "
"``stop`` default to the type of ``start`` and step default to ``int | None``."
msgstr ""

#: ../../peps/peps/pep-0696.rst:218
msgid ""
"When using a type parameter as the default to another type parameter, the "
"following rules apply, where ``T1`` is the default for ``T2``."
msgstr ""

#: ../../peps/peps/pep-0696.rst:222
msgid "Scoping Rules"
msgstr ""

#: ../../peps/peps/pep-0696.rst:224
msgid "``T1`` must be used before ``T2`` in the parameter list of the generic."
msgstr ""

#: ../../peps/peps/pep-0696.rst:239
msgid ""
"Using a type parameter from an outer scope as a default is not supported."
msgstr ""

#: ../../peps/peps/pep-0696.rst:242
msgid "Bound Rules"
msgstr ""

#: ../../peps/peps/pep-0696.rst:244
msgid "``T1``'s bound must be a subtype of ``T2``'s bound."
msgstr ""

#: ../../peps/peps/pep-0696.rst:254
msgid "Constraint Rules"
msgstr ""

#: ../../peps/peps/pep-0696.rst:256
msgid ""
"The constraints of ``T2`` must be a superset of the constraints of ``T1``."
msgstr ""

#: ../../peps/peps/pep-0696.rst:269
msgid "Type Parameters as Parameters to Generics"
msgstr ""

#: ../../peps/peps/pep-0696.rst:271
msgid ""
"Type parameters are valid as parameters to generics inside of a ``default`` "
"when the first parameter is in scope as determined by the `previous section "
"<scoping rules_>`_."
msgstr ""

#: ../../peps/peps/pep-0696.rst:290
msgid "Specialisation Rules"
msgstr ""

#: ../../peps/peps/pep-0696.rst:292
msgid ""
"Type parameters currently cannot be further subscripted. This might change "
"if `Higher Kinded TypeVars <https://github.com/python/typing/issues/548>`__ "
"are implemented."
msgstr ""

#: ../../peps/peps/pep-0696.rst:298
msgid "``Generic`` ``TypeAlias``\\ es"
msgstr ""

#: ../../peps/peps/pep-0696.rst:300
msgid ""
"``Generic`` ``TypeAlias``\\ es should be able to be further subscripted "
"following normal subscription rules. If a type parameter has a default that "
"hasn't been overridden it should be treated like it was substituted into the "
"``TypeAlias``. However, it can be specialised further down the line."
msgstr ""

#: ../../peps/peps/pep-0696.rst:317
msgid "Subclassing"
msgstr ""

#: ../../peps/peps/pep-0696.rst:319
msgid ""
"Subclasses of ``Generic``\\ s with type parameters that have defaults behave "
"similarly to ``Generic`` ``TypeAlias``\\ es. That is, subclasses can be "
"further subscripted following normal subscription rules, non-overridden "
"defaults should be substituted in, and type parameters with such defaults "
"can be further specialised down the line."
msgstr ""

#: ../../peps/peps/pep-0696.rst:347
msgid "Using ``bound`` and ``default``"
msgstr ""

#: ../../peps/peps/pep-0696.rst:349
msgid ""
"If both ``bound`` and ``default`` are passed ``default`` must be a subtype "
"of ``bound``. Otherwise the type checker should generate an error."
msgstr ""

#: ../../peps/peps/pep-0696.rst:359
msgid "Constraints"
msgstr ""

#: ../../peps/peps/pep-0696.rst:361
msgid ""
"For constrained ``TypeVar``\\ s, the default needs to be one of the "
"constraints. A type checker should generate an error even if it is a subtype "
"of one of the constraints."
msgstr ""

#: ../../peps/peps/pep-0696.rst:373
msgid "Function Defaults"
msgstr ""

#: ../../peps/peps/pep-0696.rst:375
msgid ""
"In generic functions, type checkers may use a type parameter's default when "
"the type parameter cannot be solved to anything. We leave the semantics of "
"this usage unspecified, as ensuring the ``default`` is returned in every "
"code path where the type parameter can go unsolved may be too hard to "
"implement. Type checkers are free to either disallow this case or experiment "
"with implementing support."
msgstr ""

#: ../../peps/peps/pep-0696.rst:389
msgid "Defaults following ``TypeVarTuple``"
msgstr ""

#: ../../peps/peps/pep-0696.rst:391
msgid ""
"A ``TypeVar`` that immediately follows a ``TypeVarTuple`` is not allowed to "
"have a default, because it would be ambiguous whether a type argument should "
"be bound to the ``TypeVarTuple`` or the defaulted ``TypeVar``."
msgstr ""

#: ../../peps/peps/pep-0696.rst:406
msgid ""
"With the Python 3.12 built-in generic syntax, this case should raise a "
"SyntaxError."
msgstr ""

#: ../../peps/peps/pep-0696.rst:408
msgid ""
"However, it is allowed to have a ``ParamSpec`` with a default following a "
"``TypeVarTuple`` with a default, as there can be no ambiguity between a type "
"argument for the ``ParamSpec`` and one for the ``TypeVarTuple``."
msgstr ""

#: ../../peps/peps/pep-0696.rst:423
msgid "Subtyping"
msgstr ""

#: ../../peps/peps/pep-0696.rst:425
msgid ""
"Type parameter defaults do not affect the subtyping rules for generic "
"classes. In particular, defaults can be ignored when considering whether a "
"class is compatible with a generic protocol."
msgstr ""

#: ../../peps/peps/pep-0696.rst:430
msgid "``TypeVarTuple``\\ s as Defaults"
msgstr ""

#: ../../peps/peps/pep-0696.rst:432
msgid "Using a ``TypeVarTuple`` as a default is not supported because:"
msgstr ""

#: ../../peps/peps/pep-0696.rst:434
msgid ""
"`Scoping Rules`_ does not allow usage of type parameters from outer scopes."
msgstr ""

#: ../../peps/peps/pep-0696.rst:436
msgid ""
"Multiple ``TypeVarTuple``\\ s cannot appear in the type parameter list for a "
"single object, as specified in :pep:`646#multiple-type-variable-tuples-not-"
"allowed`."
msgstr ""

#: ../../peps/peps/pep-0696.rst:440
msgid ""
"These reasons leave no current valid location where a ``TypeVarTuple`` could "
"be used as the default of another ``TypeVarTuple``."
msgstr ""

#: ../../peps/peps/pep-0696.rst:444
msgid "Binding rules"
msgstr ""

#: ../../peps/peps/pep-0696.rst:446
msgid ""
"Type parameter defaults should be bound by attribute access (including call "
"and subscript)."
msgstr ""

#: ../../peps/peps/pep-0696.rst:459
msgid "Implementation"
msgstr ""

#: ../../peps/peps/pep-0696.rst:461
msgid ""
"At runtime, this would involve the following changes to the ``typing`` "
"module."
msgstr ""

#: ../../peps/peps/pep-0696.rst:464
msgid ""
"The classes ``TypeVar``, ``ParamSpec``, and ``TypeVarTuple`` should expose "
"the type passed to ``default``. This would be available as a ``__default__`` "
"attribute, which would be ``None`` if no argument is passed and ``NoneType`` "
"if ``default=None``."
msgstr ""

#: ../../peps/peps/pep-0696.rst:469
msgid "The following changes would be required to both ``GenericAlias``\\ es:"
msgstr ""

#: ../../peps/peps/pep-0696.rst:471
msgid "logic to determine the defaults required for a subscription."
msgstr ""

#: ../../peps/peps/pep-0696.rst:472
msgid ""
"ideally, logic to determine if subscription (like ``Generic[T, DefaultT]``) "
"would be valid."
msgstr ""

#: ../../peps/peps/pep-0696.rst:475
msgid ""
"The grammar for type parameter lists would need to be updated to allow "
"defaults; see below."
msgstr ""

#: ../../peps/peps/pep-0696.rst:478
msgid ""
"A reference implementation of the runtime changes can be found at https://"
"github.com/Gobot1234/cpython/tree/pep-696"
msgstr ""

#: ../../peps/peps/pep-0696.rst:481
msgid ""
"A reference implementation of the type checker can be found at https://"
"github.com/Gobot1234/mypy/tree/TypeVar-defaults"
msgstr ""

#: ../../peps/peps/pep-0696.rst:484
msgid "Pyright currently supports this functionality."
msgstr ""

#: ../../peps/peps/pep-0696.rst:488
msgid "Grammar changes"
msgstr ""

#: ../../peps/peps/pep-0696.rst:490
msgid ""
"The syntax added in :pep:`695` will be extended to introduce a way to "
"specify defaults for type parameters using the \"=\" operator inside of the "
"square brackets like so:"
msgstr ""

#: ../../peps/peps/pep-0696.rst:511
msgid ""
":ref:`Similarly to the bound for a type parameter <695-scoping-behavior>`, "
"defaults should be lazily evaluated, with the same scoping rules to avoid "
"the unnecessary usage of quotes around them."
msgstr ""

#: ../../peps/peps/pep-0696.rst:515
msgid ""
"This functionality was included in the initial draft of :pep:`695` but was "
"removed due to scope creep."
msgstr ""

#: ../../peps/peps/pep-0696.rst:518
msgid "The following changes would be made to the grammar::"
msgstr ""

#: ../../peps/peps/pep-0696.rst:530
msgid ""
"The compiler would enforce that type parameters without defaults cannot "
"follow type parameters with defaults and that ``TypeVar``\\ s with defaults "
"cannot immediately follow ``TypeVarTuple``\\ s."
msgstr ""

#: ../../peps/peps/pep-0696.rst:535
msgid "Rejected Alternatives"
msgstr ""

#: ../../peps/peps/pep-0696.rst:538
msgid ""
"Allowing the Type Parameters Defaults to Be Passed to ``type.__new__``'s "
"``**kwargs``"
msgstr ""

#: ../../peps/peps/pep-0696.rst:548
msgid ""
"While this is much easier to read and follows a similar rationale to the "
"``TypeVar`` `unary syntax <https://github.com/python/typing/issues/813>`__, "
"it would not be backwards compatible as ``T`` might already be passed to a "
"metaclass/superclass or support classes that don't subclass ``Generic`` at "
"runtime."
msgstr ""

#: ../../peps/peps/pep-0696.rst:555
msgid ""
"Ideally, if :pep:`637` wasn't rejected, the following would be acceptable::"
msgstr ""

#: ../../peps/peps/pep-0696.rst:564
msgid "Allowing Non-defaults to Follow Defaults"
msgstr ""

#: ../../peps/peps/pep-0696.rst:576
msgid ""
"Allowing non-defaults to follow defaults would alleviate the issues with "
"returning types like ``Coroutine`` from functions where the most used type "
"argument is the last (the return). Allowing non-defaults to follow defaults "
"is too confusing and potentially ambiguous, even if only the above two forms "
"were valid. Changing the argument order now would also break a lot of "
"codebases. This is also solvable in most cases using a ``TypeAlias``."
msgstr ""

#: ../../peps/peps/pep-0696.rst:590
msgid "Having ``default`` Implicitly Be ``bound``"
msgstr ""

#: ../../peps/peps/pep-0696.rst:592
msgid ""
"In an earlier version of this PEP, the ``default`` was implicitly set to "
"``bound`` if no value was passed for ``default``. This while convenient, "
"could have a type parameter with no default follow a type parameter with a "
"default. Consider:"
msgstr ""

#: ../../peps/peps/pep-0696.rst:613
msgid ""
"This would have also been a breaking change for a small number of cases "
"where the code relied on ``Any`` being the implicit default."
msgstr ""

#: ../../peps/peps/pep-0696.rst:617
msgid ""
"Allowing Type Parameters With Defaults To Be Used in Function Signatures"
msgstr ""

#: ../../peps/peps/pep-0696.rst:619
msgid ""
"A previous version of this PEP allowed ``TypeVarLike``\\s with defaults to "
"be used in function signatures. This was removed for the reasons described "
"in `Function Defaults`_. Hopefully, this can be added in the future if a way "
"to get the runtime value of a type parameter is added."
msgstr ""

#: ../../peps/peps/pep-0696.rst:625
msgid "Allowing Type Parameters from Outer Scopes in ``default``"
msgstr ""

#: ../../peps/peps/pep-0696.rst:627
msgid ""
"This was deemed too niche a feature to be worth the added complexity. If any "
"cases arise where this is needed, it can be added in a future PEP."
msgstr ""

#: ../../peps/peps/pep-0696.rst:631
msgid "Acknowledgements"
msgstr ""

#: ../../peps/peps/pep-0696.rst:633
msgid "Thanks to the following people for their feedback on the PEP:"
msgstr ""

#: ../../peps/peps/pep-0696.rst:635
msgid ""
"Eric Traut, Jelle Zijlstra, Joshua Butt, Danny Yamamoto, Kaylynn Morgan and "
"Jakub Kuczys"
msgstr ""

#: ../../peps/peps/pep-0696.rst:640
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/peps/pep-0696.rst:641
msgid ""
"This document is placed in the public domain or under the CC0-1.0-Universal "
"license, whichever is more permissive."
msgstr ""
