# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-8015.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-8015.rst:3
msgid "Victor Stinner"
msgstr ""

#: ../../peps/pep-8015.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-8015.rst:4
msgid "Rejected"
msgstr ""

#: ../../peps/pep-8015.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-8015.rst:5
msgid "Informational"
msgstr ""

#: ../../peps/pep-8015.rst
msgid "Topic"
msgstr ""

#: ../../peps/pep-8015.rst:6
msgid "Governance"
msgstr ""

#: ../../peps/pep-8015.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-8015.rst:8
msgid "04-Oct-2018"
msgstr ""

#: ../../peps/pep-8015.rst:11
msgid "Abstract"
msgstr ""

#: ../../peps/pep-8015.rst:13
msgid ""
"This PEP formalizes the current organization of the Python community and "
"proposes 3 main changes:"
msgstr ""

#: ../../peps/pep-8015.rst:16
msgid "Formalize the existing concept of \"Python teams\";"
msgstr ""

#: ../../peps/pep-8015.rst:17
msgid "Give more autonomy to Python teams;"
msgstr ""

#: ../../peps/pep-8015.rst:18
msgid ""
"Replace the BDFL (Guido van Rossum) with a new \"Python Steering "
"Committee\" of 5 members which has limited roles: basically decide how "
"decisions are taken, but don't take decisions."
msgstr ""

#: ../../peps/pep-8015.rst:22
msgid ""
"PEPs are approved by a PEP delegate or by a vote (reserved to core "
"developers, need ``>= 2/3`` majority)."
msgstr ""

#: ../../peps/pep-8015.rst:27
msgid "PEP Rejection"
msgstr ""

#: ../../peps/pep-8015.rst:29
msgid ""
":pep:`8015` was rejected `by a core developer vote "
"<https://discuss.python.org/t/python-governance-vote-"
"december-2018-results/546/>`__ described in :pep:`8001` on Monday, "
"December 17, 2018."
msgstr ""

#: ../../peps/pep-8015.rst:33
msgid ":pep:`8016` and the governance model it describes were chosen instead."
msgstr ""

#: ../../peps/pep-8015.rst:37
msgid "Rationale"
msgstr ""

#: ../../peps/pep-8015.rst:39
msgid ""
"This PEP describes the organization of the whole Python development "
"community, from Python users to the Python Steering Committee. Describing"
" all groups and all roles in the same document helps to make the "
"organization more consistent."
msgstr ""

#: ../../peps/pep-8015.rst:44
msgid ""
"The number of governance changes is minimized to get a smooth transition "
"from the old BDFL organization to the new Steering Committee "
"organization."
msgstr ""

#: ../../peps/pep-8015.rst:48
msgid ""
"One key design of the organization is to avoid decision bottlenecks. "
"Discussions and decisions are distributed into Python teams where experts"
" in each topic can be found. The expectation is smoother discussions on "
"PEPs: fewer people with better knowledge of the topic."
msgstr ""

#: ../../peps/pep-8015.rst:53
msgid ""
"Previously, most decisions have been taken by the Benevolent Dictator For"
" Life (BDFL), Guido van Rossum. The growing popularity of Python "
"increased the pressure on a single person. The proposed organization "
"distributes decisions and responsibilities to reduce the pressure and "
"avoid wearing any individual down."
msgstr ""

#: ../../peps/pep-8015.rst:59
msgid ""
"To keep most of the decision power within the hands of the community, the"
" Python Steering Committee has very limited roles. The idea is to reduce "
"the risk that a group of people or companies \"takes over\" the Python "
"project through just a couple individuals. The project must remain "
"autonomous and open to everybody."
msgstr ""

#: ../../peps/pep-8015.rst:65
msgid ""
"The most sensitives PEPs are decided by democracy: a vote reserved to "
"core developers, see the `PEP process`_ section below for the voting "
"method."
msgstr ""

#: ../../peps/pep-8015.rst:71
msgid "Common Guidelines"
msgstr ""

#: ../../peps/pep-8015.rst:73
msgid "The Python community is open to everyone."
msgstr ""

#: ../../peps/pep-8015.rst:74
msgid ""
"Members must respect the `Python Community Code of Conduct "
"<https://www.python.org/psf/codeofconduct/>`_ which ensures that "
"discussions remain constructive and that everybody feels welcomed."
msgstr ""

#: ../../peps/pep-8015.rst:77
msgid "Python is and will remain an autonomous project."
msgstr ""

#: ../../peps/pep-8015.rst:78
msgid ""
"People with decisions power should reflect the diversity of its users and"
" contributors."
msgstr ""

#: ../../peps/pep-8015.rst:83
msgid "Community Organization"
msgstr ""

#: ../../peps/pep-8015.rst:85
msgid ""
"Right now, there are different group of people involved in the Python "
"project. The more involved you are, the more decisions power you get. It "
"is important that the people acceding to the deepest group are the most "
"trusted ones."
msgstr ""

#: ../../peps/pep-8015.rst:90
msgid "This PEP formalizes the following groups:"
msgstr ""

#: ../../peps/pep-8015.rst:92 ../../peps/pep-8015.rst:101
msgid "Python Users"
msgstr ""

#: ../../peps/pep-8015.rst:93 ../../peps/pep-8015.rst:107
msgid "Python Contributors"
msgstr ""

#: ../../peps/pep-8015.rst:94
msgid "Python Teams Members"
msgstr ""

#: ../../peps/pep-8015.rst:95 ../../peps/pep-8015.rst:143
msgid "Python Core Developers"
msgstr ""

#: ../../peps/pep-8015.rst:96
msgid "Python Steering Committee Members"
msgstr ""

#: ../../peps/pep-8015.rst:97 ../../peps/pep-8015.rst:320
msgid "PSF Code of Conduct Workgroup"
msgstr ""

#: ../../peps/pep-8015.rst:103
msgid "This is the largest group: anyone who uses Python."
msgstr ""

#: ../../peps/pep-8015.rst:109
msgid ""
"Once a Python user sends an email to a Python mailing list, comments on "
"the Python bug tracker, proposes or reviews a Python change, they become "
"a Python contributor."
msgstr ""

#: ../../peps/pep-8015.rst:115
msgid "Python Teams"
msgstr ""

#: ../../peps/pep-8015.rst:117
msgid ""
"Python became too big to work as a unique team anymore, people naturally "
"have grouped themselves as teams to work more closely on specific topics,"
" sometimes called \"Special Interest Group\" (SIG)."
msgstr ""

#: ../../peps/pep-8015.rst:121
msgid ""
"When enough developers are interested by a specific topic, they can "
"create a new team. Usually, the main action is to ask the Python "
"postmaster to create a new \"SIG\" mailing list, but the team can choose "
"to use a different communication channel."
msgstr ""

#: ../../peps/pep-8015.rst:126
msgid ""
"Team members are Python contributors and Python core developers. The team"
" is self-organized and is responsible to select who can join the team and"
" how."
msgstr ""

#: ../../peps/pep-8015.rst:130
msgid ""
"Team members can get the bug triage permission on the team bug tracker "
"component. The more involved in a team you are, the more decisions power "
"and responsibilities you get."
msgstr ""

#: ../../peps/pep-8015.rst:134
msgid ""
"A team might become allowed to decide on their own PEPs, but only the "
"Python Steering Committee can allow that (and it has the power to revoke "
"it as well). Such a case is exceptional, currently a single team has such"
" permission: the Packaging Team."
msgstr ""

#: ../../peps/pep-8015.rst:139
msgid "See `Annex: Examples of Python Teams`_."
msgstr ""

#: ../../peps/pep-8015.rst:145
msgid ""
"One restricted definition of a core developer is the ability to merge a "
"change (anywhere in the code) and have the bug triage permission (on all "
"bug tracker components)."
msgstr ""

#: ../../peps/pep-8015.rst:149
msgid ""
"Core developers are developers who are proven to have the required skills"
" to decide if a change can be approved or must be rejected, but also (and"
" this is more important) what changes should not be made. Python has a "
"long history, big constraints on backward compatibility, high quality "
"standards (ex: changes require new tests). For these reasons, becoming a "
"core can take several months or longer."
msgstr ""

#: ../../peps/pep-8015.rst:156
msgid ""
"Becoming a core developer means more responsibilities. For example, if a "
"developer merges a change, they become responsible for regressions and "
"for the maintenance of that modified code."
msgstr ""

#: ../../peps/pep-8015.rst:160
msgid ""
"Core developers are expected to be exemplary when it comes to the Code of"
" Conduct. They are encouraged to mentor contributors."
msgstr ""

#: ../../peps/pep-8015.rst:164
msgid "Promote a contributor as core developer"
msgstr ""

#: ../../peps/pep-8015.rst:166
msgid ""
"Once an existing core developer considers that a contributor is ready to "
"join the core group, to become a core developer, that core developer asks"
" the contributor if they would like to become a core developer. If the "
"contributor is interested in such new responsibilities, a vote is "
"organized."
msgstr ""

#: ../../peps/pep-8015.rst:172
msgid ""
"The vote is reserved to core developers, is public, and is open for 1 "
"week.  Usually the core developer who proposes the promotion has to "
"describe the work and skills of the candidate in the description of the "
"vote. A contributor is only promoted if two thirds (``>= 2/3``) of votes "
"approve (\"+1\") the promotion. Only \"+1\" and \"-1\" votes are "
"accounted; other votes (ex: null, \"-0\", \"+0.5\") are ignored."
msgstr ""

#: ../../peps/pep-8015.rst:179
msgid ""
"If the candidate is promoted, usually they get a mentor for 1 month to "
"help them to handle new responsibilities."
msgstr ""

#: ../../peps/pep-8015.rst:182
msgid ""
"If the candidate is not promoted, a new vote can be organized later, when"
" the candidate gets the missing skills, for example 6 months later."
msgstr ""

#: ../../peps/pep-8015.rst:187
msgid "Python Steering Committee"
msgstr ""

#: ../../peps/pep-8015.rst:189
msgid ""
"The Python Steering Committee is made of the most trusted core developers"
" since it has the most decision power. The roles of this group are "
"strictly limited to ensure that Python keeps its autonomy and remains "
"open."
msgstr ""

#: ../../peps/pep-8015.rst:194
msgid ""
"The Python Steering Committee is composed of 5 members. They are elected "
"for 3 years and 1/3 is replaced every year (first year: 1, second year: "
"2, third year: 2). This way, a member will stay for one full Python "
"release and the committee composition will be updated frequently. A "
"committee member can be a candidate for the seat they are leaving. There "
"are no term limits."
msgstr ""

#: ../../peps/pep-8015.rst:201
#, python-format
msgid ""
"Committee members must be Python core developers. It is important that "
"the members of the committee reflect the diversity of Python' users and "
"contributors. A small step to ensure that is to enforce that only 2 "
"members (strictly less than 50% of the 5 members) can work for the same "
"employer (same company or subsidiaries of the same company)."
msgstr ""

#: ../../peps/pep-8015.rst:207
msgid ""
"The size of 5 members has been chosen for the members diversity and to "
"ensure that the committee can continue to work even if a member becomes "
"unavailable for an unknown duration."
msgstr ""

#: ../../peps/pep-8015.rst:212
msgid "Python Steering Committee Roles"
msgstr ""

#: ../../peps/pep-8015.rst:214
msgid "Python Steering Committee roles:"
msgstr ""

#: ../../peps/pep-8015.rst:216
msgid "Decide how a PEP is approved (or rejected or deferred)."
msgstr ""

#: ../../peps/pep-8015.rst:217
msgid ""
"Grant or revoke permissions to a Python team. For example, allow a team "
"to give the bug triage permission (on the team component) to a "
"contributor."
msgstr ""

#: ../../peps/pep-8015.rst:221
msgid ""
"To decide how a PEP is approved (or rejected or deferred), there are two "
"options:"
msgstr ""

#: ../../peps/pep-8015.rst:224
msgid ""
"The committee elects a PEP delegate (previously known as \"BDFL-"
"delegate\"): a core developer who will take the final decision for the "
"specific PEP. The committee select the PEP delegate who can be proposed "
"by the Python team where the PEP is discussed."
msgstr ""

#: ../../peps/pep-8015.rst:228
msgid ""
"The committee can organize a vote on the PEP, see `PEP process`_ for the "
"vote organization. The committee decides when the vote is organized. A "
"vote is preferred for changes affecting all Python users, like language "
"changes."
msgstr ""

#: ../../peps/pep-8015.rst:233
msgid ""
"The committee keeps the \"vision\" and consistency of Python. It also "
"makes sure that important features reach completion. Their ability to "
"pick PEP delegates is meant to help them to achieve that goal."
msgstr ""

#: ../../peps/pep-8015.rst:238
msgid "Election of Python Steering Committee Members"
msgstr ""

#: ../../peps/pep-8015.rst:240
msgid ""
"The vote is organized by the Steering Committee. It is announced 3 weeks "
"in advance: candidates have to apply during this period. The vote is "
"reserved to core developers and is open for 1 week. To avoid self-"
"censorship, the vote uses secret ballots: avoid the risk of hostility "
"from someone who may get more power (if they get elected)."
msgstr ""

#: ../../peps/pep-8015.rst:246
msgid ""
"The vote uses the `Schulze/Beatpath/CSSD variant "
"<https://en.wikipedia.org/wiki/Schulze_method>`_ of the `Condorcet method"
" <https://en.wikipedia.org/wiki/Condorcet_method>`_ using an online "
"service like `Condorcet Internet Voting Service (CIVS) "
"<https://civs.cs.cornell.edu/>`_. This voting method reduces the risk of "
"tie. It also produces a ranking of all candidates, needed for the "
"creation of the committee."
msgstr ""

#: ../../peps/pep-8015.rst:254
msgid ""
"In case of tie, a new vote is organized immediately between candidates "
"involved in the tie using the same voting method and also during 1 week. "
"If the second vote leads to a tie again, the current Steering Committee "
"is responsible to select the elected member(s)."
msgstr ""

#: ../../peps/pep-8015.rst:259
msgid "If a committee member steps down, a new vote is organized to replace them."
msgstr ""

#: ../../peps/pep-8015.rst:262
msgid ""
"If the situation of a committee member changes in a way that no longer "
"satisfies the committee constraint (ex: they move to the same company as "
"two other committee members), they have to resign. If the employer of a "
"member is acquired by the employer of two other members, the member with "
"the mandate ending earlier has to resign once the acquisition completes."
msgstr ""

#: ../../peps/pep-8015.rst:269
msgid "Election Creating the Python Steering Committee Members"
msgstr ""

#: ../../peps/pep-8015.rst:271
msgid ""
"To bootstrap the process, 5 members are elected at the committee "
"creation. The vote follows the same rules than regular committee votes, "
"except that the election needs 5 members, and the vote is organized by "
"the PSF Board."
msgstr ""

#: ../../peps/pep-8015.rst:276
msgid ""
"In a council election, if 3 of the top 5 vote-getters work for the same "
"employer, then whichever of them ranked lowest is disqualified and the "
"6th-ranking candidate moves up into 5th place; this is repeated until a "
"valid council is formed."
msgstr ""

#: ../../peps/pep-8015.rst:281
msgid ""
"In case of tie, a second vote is organized immediately between candidates"
" involved in the tie and following candidates to fill the remaining "
"seats. The vote follows the same rules as the regular committee vote. If "
"the second vote still result in a tie, the PSF Board is responsible to "
"elect members and decide their position in the vote result."
msgstr ""

#: ../../peps/pep-8015.rst:288
msgid ""
"The order in the vote result must be unique for elected members: #1 and "
"#2 are elected for 3 years, #2 and #3 for 2 years, and #5 for 1 year."
msgstr ""

#: ../../peps/pep-8015.rst:291
msgid "Example of vote result with a tie:"
msgstr ""

#: ../../peps/pep-8015.rst:293
msgid "A"
msgstr ""

#: ../../peps/pep-8015.rst:294
msgid "B"
msgstr ""

#: ../../peps/pep-8015.rst:295
msgid "C"
msgstr ""

#: ../../peps/pep-8015.rst:296
msgid "D"
msgstr ""

#: ../../peps/pep-8015.rst:297
msgid "E, F"
msgstr ""

#: ../../peps/pep-8015.rst:298
msgid "G"
msgstr ""

#: ../../peps/pep-8015.rst:299
msgid "..."
msgstr ""

#: ../../peps/pep-8015.rst:301
msgid ""
"The first 4 candidates (A, B, C and D) are elected immediately. If E "
"works for the same employer than two other elected member, F is also "
"elected. Otherwise, a second vote is organized for the 5th seat between E"
" and F."
msgstr ""

#: ../../peps/pep-8015.rst:307
msgid "Special Case: Steering Committee Members And PEPs"
msgstr ""

#: ../../peps/pep-8015.rst:309
msgid "A committee member can be a PEP delegate."
msgstr ""

#: ../../peps/pep-8015.rst:311
msgid ""
"A committee member can propose a PEP, but cannot be the PEP delegate of "
"their own PEP."
msgstr ""

#: ../../peps/pep-8015.rst:314
msgid ""
"When the committee decides that a PEP must be voted, committee members "
"can vote as they are also core developers, but they don't have more power"
" than other core developer."
msgstr ""

#: ../../peps/pep-8015.rst:323
msgid "Charter"
msgstr ""

#: ../../peps/pep-8015.rst:325
msgid ""
"The workgroup's purpose is to foster a diverse and inclusive Python "
"community by enforcing the PSF code of conduct, along with providing "
"guidance and recommendations to the Python community on codes of conduct,"
" that supports the PSF mission of “ongoing development of Python-related "
"technology and educational resources”."
msgstr ""

#: ../../peps/pep-8015.rst:331
msgid "We work toward this common goal in three ways:"
msgstr ""

#: ../../peps/pep-8015.rst:333
msgid ""
"Review, revise, and advise on policies relating to the PSF code of "
"conducts and other communities that the PSF supports. This includes any "
"#python chat community & python.org email list under PSF jurisdiction."
msgstr ""

#: ../../peps/pep-8015.rst:337
msgid ""
"Create a standard set of codes of conduct and supporting documents for "
"multiple channels of interaction such as, but not limited to, "
"conferences, mailing lists, slack/IRC, code repositories, and more."
msgstr ""

#: ../../peps/pep-8015.rst:340
msgid ""
"Develop training materials and other processes to support Python "
"community organizers in implementing and enforcing the code of conduct."
msgstr ""

#: ../../peps/pep-8015.rst:344
msgid ""
"The organization of this workgroup is defined by the `ConductWG Charter "
"<https://wiki.python.org/psf/ConductWG/Charter>`_."
msgstr ""

#: ../../peps/pep-8015.rst:348
msgid "Special Case: Ban a core developer"
msgstr ""

#: ../../peps/pep-8015.rst:350
msgid ""
"As any other member of the Python community, the PSF Code of Conduct "
"Workgroup can ban a core developer for a limited amount of time. In this "
"case, the core developer immediately loses their core developer status. "
"Core developers are expected to be exemplary when it comes to the Code of"
" Conduct."
msgstr ""

#: ../../peps/pep-8015.rst:356
msgid ""
"In general, a ban is only the last resort action when all other options "
"have been exhausted."
msgstr ""

#: ../../peps/pep-8015.rst:359
msgid ""
"At the end of the ban, the developer is allowed to contribute again as a "
"regular contributor."
msgstr ""

#: ../../peps/pep-8015.rst:362
msgid ""
"If the developer changes their behavior, another core developer can "
"organize a new vote to propose the developer for promotion to core "
"developer. The vote follows the same process than for any other Python "
"contributor."
msgstr ""

#: ../../peps/pep-8015.rst:369
msgid "PEP process"
msgstr ""

#: ../../peps/pep-8015.rst:371
msgid "There are 2 main roles on PEPs:"
msgstr ""

#: ../../peps/pep-8015.rst:373
msgid "PEP Authors"
msgstr ""

#: ../../peps/pep-8015.rst:374
msgid "PEP Delegate"
msgstr ""

#: ../../peps/pep-8015.rst:376
msgid "PEP Authors do their best to write high quality PEP."
msgstr ""

#: ../../peps/pep-8015.rst:378
msgid ""
"The PEP delegate is responsible to help the authors to enhance their PEP "
"and is the one taking the final decision (accept, reject or defer the "
"PEP). They can also help to guide the discussion."
msgstr ""

#: ../../peps/pep-8015.rst:382
msgid ""
"If no decision is taken, the authors can propose again the PEP later (ex:"
" one year later), if possible with new data to motivate the change. A PEP"
" Delegate can also choose to mark a PEP as \"Deferred\" to not reject the"
" PEP and encourage to reopen the discussion later."
msgstr ""

#: ../../peps/pep-8015.rst:387
msgid ""
"PEPs specific to a Python team are discussed on the team mailing list. "
"PEPs impacting all Python developers (like language changes) must be "
"discussed on the python-dev mailing list."
msgstr ""

#: ../../peps/pep-8015.rst:392
msgid "Vote on a PEP"
msgstr ""

#: ../../peps/pep-8015.rst:394
msgid ""
"When the Python Steering Committee decides that a PEP needs a wider "
"approval, a vote is organized."
msgstr ""

#: ../../peps/pep-8015.rst:397
msgid ""
"The vote is reserved to core developers, is public, is announced 1 week "
"in advance, and is open for 1 week. The PEP can still be updated during "
"the 1 week notice, but must not be modified during the vote. Such vote "
"happens on the mailing list where the PEP has been discussed. The "
"committee decides when the vote is organized. The PEP must have been "
"discussed for a reasonable amount of time before it is put to vote."
msgstr ""

#: ../../peps/pep-8015.rst:405
msgid ""
"A PEP is only approved if two thirds (``>= 2/3``) of votes approve "
"(\"+1\") the PEP.  Only \"+1\" and \"-1\" votes are accounted; other "
"votes (ex: null, \"-0\", \"+0.5\") are ignored."
msgstr ""

#: ../../peps/pep-8015.rst:409
msgid "A PEP can only be approved or rejected by a vote, not be deferred."
msgstr ""

#: ../../peps/pep-8015.rst:413
msgid "Lack of Decision"
msgstr ""

#: ../../peps/pep-8015.rst:415
msgid ""
"If a discussion fails to reach a consensus, if the Python Steering "
"Committee fail to choose a PEP delegate, or if a PEP delegate fails to "
"take a decision, the obvious risk is that Python fails to evolve."
msgstr ""

#: ../../peps/pep-8015.rst:419
msgid "That's fine. Sometimes, doing nothing is the wisest choice."
msgstr ""

#: ../../peps/pep-8015.rst:423 ../../peps/pep-8015.rst:451
msgid "Change this PEP"
msgstr ""

#: ../../peps/pep-8015.rst:425
msgid ""
"The first version of this PEP has been written after Guido van Rossum "
"decided to resign from his role of BDFL in July 2018. Before this PEP, "
"the roles of Python community members have never been formalized. It is "
"difficult to design a perfect organization at the first attempt. This PEP"
" can be updated in the future to adjust the organization, specify how to "
"handle corner cases and fix mistakes."
msgstr ""

#: ../../peps/pep-8015.rst:432
msgid ""
"Any change to this PEP must be validated by a vote. The vote is announced"
" 3 weeks in advance, is reserved to core developers, happens in public on"
" the python-committers mailing list, and is open for 1 week. The proposed"
" PEP change can still be updated during the 3 weeks notice, but must not "
"be modified during the vote."
msgstr ""

#: ../../peps/pep-8015.rst:438
msgid ""
"The change is only approved if four fifths (``>= 4/5``) of votes approve "
"(\"+1\") the change. Only \"+1\" and \"-1\" votes are accounted; other "
"votes (ex: null, \"-0\", \"+0.5\") are ignored."
msgstr ""

#: ../../peps/pep-8015.rst:444
msgid "Annex: Summary on votes"
msgstr ""

#: ../../peps/pep-8015.rst:447
msgid "Vote"
msgstr ""

#: ../../peps/pep-8015.rst:447
msgid "Notice"
msgstr ""

#: ../../peps/pep-8015.rst:447
msgid "Open"
msgstr ""

#: ../../peps/pep-8015.rst:447
msgid "Ballot"
msgstr ""

#: ../../peps/pep-8015.rst:447
msgid "Method"
msgstr ""

#: ../../peps/pep-8015.rst:449
msgid "Promote contributor"
msgstr ""

#: ../../peps/pep-8015.rst:449
msgid "none"
msgstr ""

#: ../../peps/pep-8015.rst:449 ../../peps/pep-8015.rst:450
#: ../../peps/pep-8015.rst:451 ../../peps/pep-8015.rst:452
msgid "1 week"
msgstr ""

#: ../../peps/pep-8015.rst:449 ../../peps/pep-8015.rst:450
#: ../../peps/pep-8015.rst:451
msgid "public"
msgstr ""

#: ../../peps/pep-8015.rst:449 ../../peps/pep-8015.rst:450
msgid "``>= 2/3`` majority"
msgstr ""

#: ../../peps/pep-8015.rst:450
msgid "PEP"
msgstr ""

#: ../../peps/pep-8015.rst:451 ../../peps/pep-8015.rst:452
msgid "3 weeks"
msgstr ""

#: ../../peps/pep-8015.rst:451
msgid "``>= 4/5`` majority"
msgstr ""

#: ../../peps/pep-8015.rst:452
msgid "Steering Committee"
msgstr ""

#: ../../peps/pep-8015.rst:452
msgid "private"
msgstr ""

#: ../../peps/pep-8015.rst:452
msgid "Condorcet (Schulze/Beatpath/CSSD)"
msgstr ""

#: ../../peps/pep-8015.rst:455
msgid "All these votes are reserved to core developers."
msgstr ""

#: ../../peps/pep-8015.rst:459
msgid "Annex: Examples of Python Teams"
msgstr ""

#: ../../peps/pep-8015.rst:461
msgid ""
"Below are examples of some Python teams (the list will not be kept up to "
"date in this PEP)."
msgstr ""

#: ../../peps/pep-8015.rst:465
msgid "Packaging Team"
msgstr ""

#: ../../peps/pep-8015.rst:467
msgid ""
"The packaging team runs its own PEP category and can approve (or reject) "
"their own PEPs."
msgstr ""

#: ../../peps/pep-8015.rst:470
msgid "Website: `packaging.python.org <https://packaging.python.org/>`_"
msgstr ""

#: ../../peps/pep-8015.rst:471
msgid ""
"Mailing list: `distutils-sig <https://mail.python.org/mm3/mailman3/lists"
"/distutils-sig.python.org/>`_"
msgstr ""

#: ../../peps/pep-8015.rst:473
msgid "Bug tracker component: ``Distutils``"
msgstr ""

#: ../../peps/pep-8015.rst:474
msgid "Example of members: Paul Moore, Alyssa Coghlan, Donald Stuff"
msgstr ""

#: ../../peps/pep-8015.rst:475
msgid "Stdlib module: ``distutils``"
msgstr ""

#: ../../peps/pep-8015.rst:476
msgid "Current PEP delegate: Paul Moore"
msgstr ""

#: ../../peps/pep-8015.rst:479
msgid "IDLE Team"
msgstr ""

#: ../../peps/pep-8015.rst:481
msgid ""
"IDLE is a special case in the Python standard library: it's a whole "
"application, not just a module. For this reason, it has been decided that"
" the code will be the same in all Python stable branches (whereas the "
"stdlib diverges in newer stable branches)."
msgstr ""

#: ../../peps/pep-8015.rst:486
msgid "Bug tracker component: ``IDLE``"
msgstr ""

#: ../../peps/pep-8015.rst:487
msgid "Example of members: Terry Reedy, Cheryl Sabella, Serhiy Storchaka"
msgstr ""

#: ../../peps/pep-8015.rst:488
msgid "Stdlib module: ``idlelib``"
msgstr ""

#: ../../peps/pep-8015.rst:491
msgid "Mentorship Team"
msgstr ""

#: ../../peps/pep-8015.rst:493
msgid ""
"Becoming a core developer is long and slow process. Mentorship is an "
"efficient way to train contributors as future core developers and build a"
" trust relationship."
msgstr ""

#: ../../peps/pep-8015.rst:497
msgid "Websites:"
msgstr ""

#: ../../peps/pep-8015.rst:499
msgid "https://www.python.org/dev/core-mentorship/"
msgstr ""

#: ../../peps/pep-8015.rst:500
msgid "https://devguide.python.org/"
msgstr ""

#: ../../peps/pep-8015.rst:502
msgid "Repository: https://github.com/python/devguide"
msgstr ""

#: ../../peps/pep-8015.rst:503
msgid ""
"Mailing list: `core-mentorship <https://www.python.org/dev/core-"
"mentorship/>`_ (private archives)"
msgstr ""

#: ../../peps/pep-8015.rst:505
msgid "Example of members: Guido van Rossum, Carol Willing, Victor Stinner"
msgstr ""

#: ../../peps/pep-8015.rst:507
msgid "Note: The group is not responsible to promote core developers."
msgstr ""

#: ../../peps/pep-8015.rst:510
msgid "Documentation Team"
msgstr ""

#: ../../peps/pep-8015.rst:512
msgid ""
"Mailing list: `doc-sig <https://mail.python.org/mailman/listinfo/doc-"
"sig>`_"
msgstr ""

#: ../../peps/pep-8015.rst:514
msgid "Bug tracker component: ``Documentation``"
msgstr ""

#: ../../peps/pep-8015.rst:515
msgid "GitHub tag: ``type-doc``"
msgstr ""

#: ../../peps/pep-8015.rst:516
msgid "Example of members: Julien Palard, INADA Naoki, Raymond Hettinger."
msgstr ""

#: ../../peps/pep-8015.rst:518
msgid "The team also manages documentation translations."
msgstr ""

#: ../../peps/pep-8015.rst:520
msgid "See also the Mentorship team which maintains the \"Devguide\"."
msgstr ""

#: ../../peps/pep-8015.rst:523
msgid "Security Team"
msgstr ""

#: ../../peps/pep-8015.rst:525
msgid "Website: https://www.python.org/news/security/"
msgstr ""

#: ../../peps/pep-8015.rst:526
msgid "Mailing lists:"
msgstr ""

#: ../../peps/pep-8015.rst:528
msgid "``security@python.org`` (to report vulnerabilities)"
msgstr ""

#: ../../peps/pep-8015.rst:529
msgid ""
"`security-sig <https://mail.python.org/mm3/mailman3/lists/security-"
"sig.python.org/>`_ (public list)"
msgstr ""

#: ../../peps/pep-8015.rst:533
msgid "Stdlib modules: ``hashlib``, ``secrets`` and ``ssl``"
msgstr ""

#: ../../peps/pep-8015.rst:534
msgid "Example of members: Christian Heimes, Benjamin Peterson"
msgstr ""

#: ../../peps/pep-8015.rst:536
msgid ""
"The ``security@python.org`` mailing list is invite-only: only members of "
"the \"Python Security Response Team\" (PSRT) can read emails and reply; "
"whereas security-sig is public."
msgstr ""

#: ../../peps/pep-8015.rst:540
msgid "Note: This team rarely proposed PEPs."
msgstr ""

#: ../../peps/pep-8015.rst:543
msgid "Performance Team"
msgstr ""

#: ../../peps/pep-8015.rst:545
msgid "Website: https://speed.python.org/"
msgstr ""

#: ../../peps/pep-8015.rst:546
msgid ""
"Mailing list: `speed "
"<https://mail.python.org/mm3/mailman3/lists/speed.python.org/>`_"
msgstr ""

#: ../../peps/pep-8015.rst:548
msgid "Repositories:"
msgstr ""

#: ../../peps/pep-8015.rst:550
msgid "https://github.com/python/performance"
msgstr ""

#: ../../peps/pep-8015.rst:551
msgid "https://github.com/tobami/codespeed"
msgstr ""

#: ../../peps/pep-8015.rst:553
msgid "Bug tracker type: ``Performance``"
msgstr ""

#: ../../peps/pep-8015.rst:554
msgid "GitHub label: ``type-performance``"
msgstr ""

#: ../../peps/pep-8015.rst:555
msgid "Stdlib module: ``cProfile``, ``profile``, ``pstats`` and ``timeit``"
msgstr ""

#: ../../peps/pep-8015.rst:556
msgid "Example of members: Victor Stinner, INADA Naoki, Serhiy Storchaka"
msgstr ""

#: ../../peps/pep-8015.rst:558
msgid ""
"Usually PEPs involving performance impact everybody and so are discussed "
"on the python-dev mailing list, rather than the speed mailing list."
msgstr ""

#: ../../peps/pep-8015.rst:562
msgid "Asynchronous Programming Team"
msgstr ""

#: ../../peps/pep-8015.rst:564
msgid "Website: https://docs.python.org/dev/library/asyncio.html"
msgstr ""

#: ../../peps/pep-8015.rst:565
msgid ""
"Mailing list: `async-sig <https://mail.python.org/mailman/listinfo/async-"
"sig>`_"
msgstr ""

#: ../../peps/pep-8015.rst:567
msgid "Bug tracker component: ``asyncio``"
msgstr ""

#: ../../peps/pep-8015.rst:568
msgid "GitHub label: ``expert-asyncio``"
msgstr ""

#: ../../peps/pep-8015.rst:569
msgid "Stdlib modules: ``asyncio`` and ``contextvars``"
msgstr ""

#: ../../peps/pep-8015.rst:570
msgid "Example of members: Andrew Sveltov, Yury Selivanov"
msgstr ""

#: ../../peps/pep-8015.rst:572
msgid ""
"PEP only modifying ``asyncio`` and ``contextvars`` can be discussed on "
"the async-sig mailing list, whereas changes impacting the Python language"
" must be discussed on python-dev."
msgstr ""

#: ../../peps/pep-8015.rst:577
msgid "Type Hints Team"
msgstr ""

#: ../../peps/pep-8015.rst:579
msgid "Website: http://mypy-lang.org/"
msgstr ""

#: ../../peps/pep-8015.rst:580
msgid "Repository: https://github.com/python/typing"
msgstr ""

#: ../../peps/pep-8015.rst:581
msgid ""
"GitHub label for mypy project: `topic-pep-484 "
"<https://github.com/python/mypy/labels/topic-pep-484>`_"
msgstr ""

#: ../../peps/pep-8015.rst:583
msgid "Stdlib modules: ``typing``"
msgstr ""

#: ../../peps/pep-8015.rst:584
msgid ""
"Example of members: Guido van Rossum, Ivan Levkivskyi, Jukka Lehtosalo, "
"Łukasz Langa, Mark Shannon."
msgstr ""

#: ../../peps/pep-8015.rst:587
msgid ""
"Note: There is a backport for Python 3.6 and older, see `typing on PyPI "
"<https://pypi.org/project/typing/>`_."
msgstr ""

#: ../../peps/pep-8015.rst:592
msgid "Version History"
msgstr ""

#: ../../peps/pep-8015.rst:594
msgid "History of this PEP:"
msgstr ""

#: ../../peps/pep-8015.rst:596
msgid "Version 7: Adjust the Steering Committee"
msgstr ""

#: ../../peps/pep-8015.rst:598
msgid "The Steering Committee is now made of 5 people instead of 3."
msgstr ""

#: ../../peps/pep-8015.rst:599
msgid ""
"There are no term limits (instead of a limit of 2 mandates: 6 years in "
"total)."
msgstr ""

#: ../../peps/pep-8015.rst:601
msgid "A committee member can now be a PEP delegate."
msgstr ""

#: ../../peps/pep-8015.rst:603
msgid "Version 6: Adjust votes"
msgstr ""

#: ../../peps/pep-8015.rst:605
msgid ""
"Specify the Condorcet method: use Schulze/Beatpath/CSSD variant to elect "
"Python Steering Committee members. Specify how to deal with tie and the "
"constraint on the employers."
msgstr ""

#: ../../peps/pep-8015.rst:608
msgid ""
"Vote on promoting a contributor and on PEPs now requires ``>= 2/3`` "
"rather than ``50%+1``."
msgstr ""

#: ../../peps/pep-8015.rst:610
msgid "Vote on changing this PEP now requires ``>= 4/5`` rather than ``50%+1``."
msgstr ""

#: ../../peps/pep-8015.rst:612
msgid "Explain how to deal with a company acquisition."
msgstr ""

#: ../../peps/pep-8015.rst:614
msgid ""
"Version 5: Election of Python Steering Committee Members uses secret "
"ballots"
msgstr ""

#: ../../peps/pep-8015.rst:616
msgid "Version 4:"
msgstr ""

#: ../../peps/pep-8015.rst:618
msgid ""
"Adjust votes: open for 1 week instead of 1 month, and announced in "
"advance."
msgstr ""

#: ../../peps/pep-8015.rst:620
msgid "Rename the \"Python Core Board\" to the \"Python Steering Committee\";"
msgstr ""

#: ../../peps/pep-8015.rst:621
msgid ""
"Clarify that this committee doesn't approve PEPs and that committee "
"members cannot cumulate more than 2 mandates;"
msgstr ""

#: ../../peps/pep-8015.rst:623
msgid "Add the \"Type Hints\" team to the annex."
msgstr ""

#: ../../peps/pep-8015.rst:625
msgid ""
"Version 3: Add \"Special Case: Ban a core developer\" and \"How to update"
" this PEP\" sections."
msgstr ""

#: ../../peps/pep-8015.rst:627
msgid ""
"Version 2: Rename the \"Python board\" to the \"Python Core Board\", to "
"avoid confusion with the PSF Board."
msgstr ""

#: ../../peps/pep-8015.rst:629
msgid ""
"Version 1: First version posted to python-committers and "
"discuss.python.org."
msgstr ""

#: ../../peps/pep-8015.rst:634
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-8015.rst:636
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid "Example of members: Paul Moore, Nick Coghlan, Donald Stuff"
#~ msgstr ""

