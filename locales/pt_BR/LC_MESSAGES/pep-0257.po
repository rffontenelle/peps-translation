# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-14 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../peps/peps/pep-0257.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/peps/pep-0257.rst:3
msgid "David Goodger <goodger@python.org>, Guido van Rossum <guido@python.org>"
msgstr ""

#: ../../peps/peps/pep-0257.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/peps/pep-0257.rst:5
msgid "doc-sig@python.org"
msgstr ""

#: ../../peps/peps/pep-0257.rst
msgid "Status"
msgstr "Status"

#: ../../peps/peps/pep-0257.rst:6
msgid "Active"
msgstr "Ativa"

#: ../../peps/peps/pep-0257.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/peps/pep-0257.rst:7
msgid "Informational"
msgstr ""

#: ../../peps/peps/pep-0257.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/peps/pep-0257.rst:8
msgid "29-May-2001"
msgstr ""

#: ../../peps/peps/pep-0257.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/peps/pep-0257.rst:9
msgid "13-Jun-2001"
msgstr ""

#: ../../peps/peps/pep-0257.rst:13
msgid "Abstract"
msgstr ""

#: ../../peps/peps/pep-0257.rst:15
msgid ""
"This PEP documents the semantics and conventions associated with Python "
"docstrings."
msgstr ""

#: ../../peps/peps/pep-0257.rst:20
msgid "Rationale"
msgstr ""

#: ../../peps/peps/pep-0257.rst:22
msgid ""
"The aim of this PEP is to standardize the high-level structure of "
"docstrings: what they should contain, and how to say it (without touching on "
"any markup syntax within docstrings).  The PEP contains conventions, not "
"laws or syntax."
msgstr ""

#: ../../peps/peps/pep-0257.rst:27
msgid ""
"\"A universal convention supplies all of maintainability, clarity, "
"consistency, and a foundation for good programming habits too. What it "
"doesn't do is insist that you follow it against your will. That's Python!\""
msgstr ""

#: ../../peps/peps/pep-0257.rst:32
msgid "Tim Peters on comp.lang.python, 2001-06-16"
msgstr ""

#: ../../peps/peps/pep-0257.rst:34
msgid ""
"If you violate these conventions, the worst you'll get is some dirty looks.  "
"But some software (such as the Docutils_ docstring processing system :pep:"
"`256`, :pep:`258`) will be aware of the conventions, so following them will "
"get you the best results."
msgstr ""

#: ../../peps/peps/pep-0257.rst:41
msgid "Specification"
msgstr ""

#: ../../peps/peps/pep-0257.rst:44
msgid "What is a Docstring?"
msgstr ""

#: ../../peps/peps/pep-0257.rst:46
msgid ""
"A docstring is a string literal that occurs as the first statement in a "
"module, function, class, or method definition.  Such a docstring becomes the "
"``__doc__`` special attribute of that object."
msgstr ""

#: ../../peps/peps/pep-0257.rst:50
msgid ""
"All modules should normally have docstrings, and all functions and classes "
"exported by a module should also have docstrings.  Public methods (including "
"the ``__init__`` constructor) should also have docstrings.  A package may be "
"documented in the module docstring of the ``__init__.py`` file in the "
"package directory."
msgstr ""

#: ../../peps/peps/pep-0257.rst:56
msgid ""
"String literals occurring elsewhere in Python code may also act as "
"documentation.  They are not recognized by the Python bytecode compiler and "
"are not accessible as runtime object attributes (i.e. not assigned to "
"``__doc__``), but two types of extra docstrings may be extracted by software "
"tools:"
msgstr ""

#: ../../peps/peps/pep-0257.rst:62
msgid ""
"String literals occurring immediately after a simple assignment at the top "
"level of a module, class, or ``__init__`` method are called \"attribute "
"docstrings\"."
msgstr ""

#: ../../peps/peps/pep-0257.rst:66
msgid ""
"String literals occurring immediately after another docstring are called "
"\"additional docstrings\"."
msgstr ""

#: ../../peps/peps/pep-0257.rst:69
msgid ""
"Please see :pep:`258`, \"Docutils Design Specification\", for a detailed "
"description of attribute and additional docstrings."
msgstr ""

#: ../../peps/peps/pep-0257.rst:72
msgid ""
"For consistency, always use ``\"\"\"triple double quotes\"\"\"`` around "
"docstrings.  Use ``r\"\"\"raw triple double quotes\"\"\"`` if you use any "
"backslashes in your docstrings."
msgstr ""

#: ../../peps/peps/pep-0257.rst:76
msgid ""
"There are two forms of docstrings: one-liners and multi-line docstrings."
msgstr ""

#: ../../peps/peps/pep-0257.rst:81
msgid "One-line Docstrings"
msgstr ""

#: ../../peps/peps/pep-0257.rst:83
msgid ""
"One-liners are for really obvious cases.  They should really fit on one "
"line.  For example::"
msgstr ""

#: ../../peps/peps/pep-0257.rst:92
msgid "Notes:"
msgstr ""

#: ../../peps/peps/pep-0257.rst:94
msgid ""
"Triple quotes are used even though the string fits on one line. This makes "
"it easy to later expand it."
msgstr ""

#: ../../peps/peps/pep-0257.rst:97
msgid ""
"The closing quotes are on the same line as the opening quotes.  This looks "
"better for one-liners."
msgstr ""

#: ../../peps/peps/pep-0257.rst:100
msgid "There's no blank line either before or after the docstring."
msgstr ""

#: ../../peps/peps/pep-0257.rst:102
msgid ""
"The docstring is a phrase ending in a period.  It prescribes the function or "
"method's effect as a command (\"Do this\", \"Return that\"), not as a "
"description; e.g. don't write \"Returns the pathname ...\"."
msgstr ""

#: ../../peps/peps/pep-0257.rst:106
msgid ""
"The one-line docstring should NOT be a \"signature\" reiterating the "
"function/method parameters (which can be obtained by introspection). Don't "
"do::"
msgstr ""

#: ../../peps/peps/pep-0257.rst:113
msgid ""
"This type of docstring is only appropriate for C functions (such as built-"
"ins), where introspection is not possible.  However, the nature of the "
"*return value* cannot be determined by introspection, so it should be "
"mentioned.  The preferred form for such a docstring would be something like::"
msgstr ""

#: ../../peps/peps/pep-0257.rst:122
msgid "(Of course \"Do X\" should be replaced by a useful description!)"
msgstr ""

#: ../../peps/peps/pep-0257.rst:126
msgid "Multi-line Docstrings"
msgstr ""

#: ../../peps/peps/pep-0257.rst:128
msgid ""
"Multi-line docstrings consist of a summary line just like a one-line "
"docstring, followed by a blank line, followed by a more elaborate "
"description.  The summary line may be used by automatic indexing tools; it "
"is important that it fits on one line and is separated from the rest of the "
"docstring by a blank line.  The summary line may be on the same line as the "
"opening quotes or on the next line.  The entire docstring is indented the "
"same as the quotes at its first line (see example below)."
msgstr ""

#: ../../peps/peps/pep-0257.rst:137
msgid ""
"Insert a blank line after all docstrings (one-line or multi-line) that "
"document a class -- generally speaking, the class's methods are separated "
"from each other by a single blank line, and the docstring needs to be offset "
"from the first method by a blank line."
msgstr ""

#: ../../peps/peps/pep-0257.rst:142
msgid ""
"The docstring of a script (a stand-alone program) should be usable as its "
"\"usage\" message, printed when the script is invoked with incorrect or "
"missing arguments (or perhaps with a \"-h\" option, for \"help\"). Such a "
"docstring should document the script's function and command line syntax, "
"environment variables, and files.  Usage messages can be fairly elaborate "
"(several screens full) and should be sufficient for a new user to use the "
"command properly, as well as a complete quick reference to all options and "
"arguments for the sophisticated user."
msgstr ""

#: ../../peps/peps/pep-0257.rst:151
msgid ""
"The docstring for a module should generally list the classes, exceptions and "
"functions (and any other objects) that are exported by the module, with a "
"one-line summary of each.  (These summaries generally give less detail than "
"the summary line in the object's docstring.)  The docstring for a package (i."
"e., the docstring of the package's ``__init__.py`` module) should also list "
"the modules and subpackages exported by the package."
msgstr ""

#: ../../peps/peps/pep-0257.rst:159
msgid ""
"The docstring for a function or method should summarize its behavior and "
"document its arguments, return value(s), side effects, exceptions raised, "
"and restrictions on when it can be called (all if applicable). Optional "
"arguments should be indicated.  It should be documented whether keyword "
"arguments are part of the interface."
msgstr ""

#: ../../peps/peps/pep-0257.rst:165
msgid ""
"The docstring for a class should summarize its behavior and list the public "
"methods and instance variables.  If the class is intended to be subclassed, "
"and has an additional interface for subclasses, this interface should be "
"listed separately (in the docstring).  The class constructor should be "
"documented in the docstring for its ``__init__`` method.  Individual methods "
"should be documented by their own docstring."
msgstr ""

#: ../../peps/peps/pep-0257.rst:173
msgid ""
"If a class subclasses another class and its behavior is mostly inherited "
"from that class, its docstring should mention this and summarize the "
"differences.  Use the verb \"override\" to indicate that a subclass method "
"replaces a superclass method and does not call the superclass method; use "
"the verb \"extend\" to indicate that a subclass method calls the superclass "
"method (in addition to its own behavior)."
msgstr ""

#: ../../peps/peps/pep-0257.rst:180
msgid ""
"*Do not* use the Emacs convention of mentioning the arguments of functions "
"or methods in upper case in running text.  Python is case sensitive and the "
"argument names can be used for keyword arguments, so the docstring should "
"document the correct argument names.  It is best to list each argument on a "
"separate line.  For example::"
msgstr ""

#: ../../peps/peps/pep-0257.rst:197
msgid ""
"Unless the entire docstring fits on a line, place the closing quotes on a "
"line by themselves.  This way, Emacs' ``fill-paragraph`` command can be used "
"on it."
msgstr ""

#: ../../peps/peps/pep-0257.rst:203
msgid "Handling Docstring Indentation"
msgstr ""

#: ../../peps/peps/pep-0257.rst:205
msgid ""
"Docstring processing tools will strip a uniform amount of indentation from "
"the second and further lines of the docstring, equal to the minimum "
"indentation of all non-blank lines after the first line.  Any indentation in "
"the first line of the docstring (i.e., up to the first newline) is "
"insignificant and removed.  Relative indentation of later lines in the "
"docstring is retained.  Blank lines should be removed from the beginning and "
"end of the docstring."
msgstr ""

#: ../../peps/peps/pep-0257.rst:213
msgid ""
"Since code is much more precise than words, here is an implementation of the "
"algorithm::"
msgstr ""

#: ../../peps/peps/pep-0257.rst:241
msgid ""
"The docstring in this example contains two newline characters and is "
"therefore 3 lines long.  The first and last lines are blank::"
msgstr ""

#: ../../peps/peps/pep-0257.rst:249
msgid "To illustrate::"
msgstr ""

#: ../../peps/peps/pep-0257.rst:258
msgid "Once trimmed, these docstrings are equivalent::"
msgstr ""

#: ../../peps/peps/pep-0257.rst:281
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/peps/pep-0257.rst:283
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#: ../../peps/peps/pep-0257.rst:287
msgid "Acknowledgements"
msgstr ""

#: ../../peps/peps/pep-0257.rst:289
msgid ""
"The \"Specification\" text comes mostly verbatim from :pep:`8` by Guido van "
"Rossum."
msgstr ""

#: ../../peps/peps/pep-0257.rst:292
msgid ""
"This document borrows ideas from the archives of the Python Doc-SIG_. Thanks "
"to all members past and present."
msgstr ""
