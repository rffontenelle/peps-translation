# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-14 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../peps/peps/pep-0007.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/peps/pep-0007.rst:3
msgid "Guido van Rossum <guido@python.org>, Barry Warsaw <barry@python.org>"
msgstr ""

#: ../../peps/peps/pep-0007.rst
msgid "Status"
msgstr "Status"

#: ../../peps/peps/pep-0007.rst:4
msgid "Active"
msgstr "Ativa"

#: ../../peps/peps/pep-0007.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/peps/pep-0007.rst:5
msgid "Process"
msgstr "Processo"

#: ../../peps/peps/pep-0007.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/peps/pep-0007.rst:6
msgid "05-Jul-2001"
msgstr "05-Jul-2001"

#: ../../peps/peps/pep-0007.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/peps/pep-0007.rst:12
msgid "Introduction"
msgstr "Introdução"

#: ../../peps/peps/pep-0007.rst:14
msgid ""
"This document gives coding conventions for the C code comprising the C "
"implementation of Python.  Please see the companion informational PEP "
"describing :pep:`style guidelines for Python code <8>`."
msgstr ""

#: ../../peps/peps/pep-0007.rst:18
msgid ""
"Note, rules are there to be broken.  Two good reasons to break a particular "
"rule:"
msgstr ""

#: ../../peps/peps/pep-0007.rst:21
msgid ""
"When applying the rule would make the code less readable, even for someone "
"who is used to reading code that follows the rules."
msgstr ""

#: ../../peps/peps/pep-0007.rst:24
msgid ""
"To be consistent with surrounding code that also breaks it (maybe for "
"historic reasons) -- although this is also an opportunity to clean up "
"someone else's mess (in true XP style)."
msgstr ""
"Para ser consistente com o código circundante que também o quebra (talvez "
"por razões históricas) - embora esta também seja uma oportunidade de limpar "
"a bagunça de outra pessoa (no verdadeiro estilo XP)."

#: ../../peps/peps/pep-0007.rst:30
msgid "C dialect"
msgstr ""

#: ../../peps/peps/pep-0007.rst:32
msgid ""
"Python 3.11 and newer versions use C11 without `optional features <https://"
"en.wikipedia.org/wiki/C11_%28C_standard_revision%29#Optional_features>`_. "
"The public C API should be compatible with C++."
msgstr ""

#: ../../peps/peps/pep-0007.rst:36
msgid "Python 3.6 to 3.10 use C89 with several select C99 features:"
msgstr ""

#: ../../peps/peps/pep-0007.rst:38
msgid ""
"Standard integer types in ``<stdint.h>`` and ``<inttypes.h>``. We require "
"the fixed width integer types."
msgstr ""

#: ../../peps/peps/pep-0007.rst:40
msgid "``static inline`` functions"
msgstr ""

#: ../../peps/peps/pep-0007.rst:41
msgid "designated initializers (especially nice for type declarations)"
msgstr ""

#: ../../peps/peps/pep-0007.rst:42
msgid "intermingled declarations"
msgstr ""

#: ../../peps/peps/pep-0007.rst:43
msgid "booleans"
msgstr ""

#: ../../peps/peps/pep-0007.rst:44
msgid "C++-style line comments"
msgstr ""

#: ../../peps/peps/pep-0007.rst:46
msgid ""
"Python versions before 3.6 used ANSI/ISO standard C (the 1989 version of the "
"standard).  This meant (amongst many other things) that all declarations "
"must be at the top of a block (not necessarily at the top of function)."
msgstr ""

#: ../../peps/peps/pep-0007.rst:51
msgid ""
"Don't use compiler-specific extensions, such as those of GCC or MSVC (e.g. "
"don't write multi-line strings without trailing backslashes)."
msgstr ""

#: ../../peps/peps/pep-0007.rst:54
msgid ""
"All function declarations and definitions must use full prototypes (i.e. "
"specify the types of all arguments)."
msgstr ""

#: ../../peps/peps/pep-0007.rst:57
msgid "No compiler warnings with major compilers (gcc, VC++, a few others)."
msgstr ""

#: ../../peps/peps/pep-0007.rst:59
msgid ""
"``static inline`` functions should be preferred over macros in new code."
msgstr ""

#: ../../peps/peps/pep-0007.rst:64
msgid "Code lay-out"
msgstr ""

#: ../../peps/peps/pep-0007.rst:66
msgid "Use 4-space indents and no tabs at all."
msgstr ""

#: ../../peps/peps/pep-0007.rst:68
msgid ""
"No line should be longer than 79 characters.  If this and the previous rule "
"together don't give you enough room to code, your code is too complicated -- "
"consider using subroutines."
msgstr ""

#: ../../peps/peps/pep-0007.rst:72
msgid ""
"No line should end in whitespace.  If you think you need significant "
"trailing whitespace, think again -- somebody's editor might delete it as a "
"matter of routine."
msgstr ""

#: ../../peps/peps/pep-0007.rst:76
msgid ""
"Function definition style: function name in column 1, outermost curly braces "
"in column 1, blank line after local variable declarations."
msgstr ""

#: ../../peps/peps/pep-0007.rst:94
msgid ""
"Code structure: one space between keywords like ``if``, ``for`` and the "
"following left paren; no spaces inside the paren; braces are required "
"everywhere, even where C permits them to be omitted, but do not add them to "
"code you are not otherwise modifying.  All new C code requires braces.  "
"Braces should be formatted as shown:"
msgstr ""

#: ../../peps/peps/pep-0007.rst:110
msgid "The return statement should *not* get redundant parentheses:"
msgstr ""

#: ../../peps/peps/pep-0007.rst:117
msgid "Instead:"
msgstr ""

#: ../../peps/peps/pep-0007.rst:124
msgid ""
"Function and macro call style: ``foo(a, b, c)`` -- no space before the open "
"paren, no spaces inside the parens, no spaces before commas, one space after "
"each comma."
msgstr ""

#: ../../peps/peps/pep-0007.rst:128
msgid ""
"Always put spaces around assignment, Boolean and comparison operators.  In "
"expressions using a lot of operators, add spaces around the outermost "
"(lowest-priority) operators."
msgstr ""

#: ../../peps/peps/pep-0007.rst:132
msgid ""
"Breaking long lines: if you can, break after commas in the outermost "
"argument list.  Always indent continuation lines appropriately, e.g.:"
msgstr ""

#: ../../peps/peps/pep-0007.rst:143
msgid ""
"When you break a long expression at a binary operator, the operator goes at "
"the end of the previous line, and braces should be formatted as shown.  E.g.:"
msgstr ""

#: ../../peps/peps/pep-0007.rst:157
msgid "Vertically align line continuation characters in multi-line macros."
msgstr ""

#: ../../peps/peps/pep-0007.rst:159
msgid ""
"Macros intended to be used as a statement should use the ``do { ... } while "
"(0)`` macro idiom, without a final semicolon. Example:"
msgstr ""

#: ../../peps/peps/pep-0007.rst:177
msgid "``#undef`` file local macros after use."
msgstr ""

#: ../../peps/peps/pep-0007.rst:179
msgid ""
"Put blank lines around functions, structure definitions, and major sections "
"inside functions."
msgstr ""

#: ../../peps/peps/pep-0007.rst:182
msgid "Comments go before the code they describe."
msgstr ""

#: ../../peps/peps/pep-0007.rst:184
msgid ""
"All functions and global variables should be declared static unless they are "
"to be part of a published interface."
msgstr ""

#: ../../peps/peps/pep-0007.rst:187
msgid ""
"For external functions and variables, we always have a declaration in an "
"appropriate header file in the \"Include\" directory, which uses the "
"``PyAPI_FUNC()`` macro and ``PyAPI_DATA()`` macro, like this:"
msgstr ""

#: ../../peps/peps/pep-0007.rst:200
msgid "Naming conventions"
msgstr ""

#: ../../peps/peps/pep-0007.rst:202
msgid ""
"Use a ``Py`` prefix for public functions; never for static functions.  The "
"``Py_`` prefix is reserved for global service routines like "
"``Py_FatalError``; specific groups of routines (e.g. specific object type "
"APIs) use a longer prefix, e.g. ``PyString_`` for string functions."
msgstr ""

#: ../../peps/peps/pep-0007.rst:208
msgid ""
"Public functions and variables use MixedCase with underscores, like this: "
"``PyObject_GetAttr``, ``Py_BuildValue``, ``PyExc_TypeError``."
msgstr ""

#: ../../peps/peps/pep-0007.rst:211
msgid ""
"Occasionally an \"internal\" function has to be visible to the loader; we "
"use the ``_Py`` prefix for this, e.g.: ``_PyObject_Dump``."
msgstr ""

#: ../../peps/peps/pep-0007.rst:214
msgid ""
"Macros should have a MixedCase prefix and then use upper case, for example: "
"``PyString_AS_STRING``, ``Py_PRINT_RAW``."
msgstr ""

#: ../../peps/peps/pep-0007.rst:217
msgid ""
"Macro parameters should use ``ALL_CAPS`` style, so they are easily "
"distinguishable from C variables and struct members."
msgstr ""

#: ../../peps/peps/pep-0007.rst:222
msgid "Documentation Strings"
msgstr "Strings de documentação"

#: ../../peps/peps/pep-0007.rst:224
msgid ""
"Use the ``PyDoc_STR()`` or ``PyDoc_STRVAR()`` macro for docstrings to "
"support building Python without docstrings (``./configure --without-doc-"
"strings``)."
msgstr ""

#: ../../peps/peps/pep-0007.rst:228
msgid ""
"The first line of each function docstring should be a \"signature line\" "
"that gives a brief synopsis of the arguments and return value. For example:"
msgstr ""

#: ../../peps/peps/pep-0007.rst:239
msgid ""
"Always include a blank line between the signature line and the text of the "
"description."
msgstr ""

#: ../../peps/peps/pep-0007.rst:242
msgid ""
"If the return value for the function is always ``None`` (because there is no "
"meaningful return value), do not include the indication of the return type."
msgstr ""

#: ../../peps/peps/pep-0007.rst:246
msgid ""
"When writing multi-line docstrings, be sure to always use backslash "
"continuations, as in the example above, or string literal concatenation:"
msgstr ""

#: ../../peps/peps/pep-0007.rst:257
msgid "Though some C compilers accept string literals without either:"
msgstr ""

#: ../../peps/peps/pep-0007.rst:267
msgid "not all do; the MSVC compiler is known to complain about this."
msgstr ""

#: ../../peps/peps/pep-0007.rst:271
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/peps/pep-0007.rst:273
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."
