# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0601.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0601.rst:3
msgid "Damien George, Batuhan Taskaya"
msgstr ""

#: ../../peps/pep-0601.rst
msgid "Sponsor"
msgstr ""

#: ../../peps/pep-0601.rst:4
msgid "Alyssa Coghlan"
msgstr ""

#: ../../peps/pep-0601.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/pep-0601.rst:5
msgid ""
"https://discuss.python.org/t/pep-601-forbid-return-break-continue-"
"breaking-out-of-finally/2239"
msgstr ""

#: ../../peps/pep-0601.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0601.rst:6
msgid "Rejected"
msgstr ""

#: ../../peps/pep-0601.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0601.rst:7
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0601.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0601.rst:9
msgid "26-Aug-2019"
msgstr ""

#: ../../peps/pep-0601.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-0601.rst:10
msgid "3.8"
msgstr ""

#: ../../peps/pep-0601.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0601.rst:11
msgid "26-Aug-2019, 23-Sep-2019"
msgstr ""

#: ../../peps/pep-0601.rst
msgid "Resolution"
msgstr ""

#: ../../peps/pep-0601.rst:12
msgid ""
"https://discuss.python.org/t/pep-601-forbid-return-break-continue-"
"breaking-out-of-finally/2239/32"
msgstr ""

#: ../../peps/pep-0601.rst:15
msgid "Rejection Note"
msgstr ""

#: ../../peps/pep-0601.rst:17
msgid "This PEP was rejected by the Steering Council by a vote of 4/4."
msgstr ""

#: ../../peps/pep-0601.rst:19
msgid ""
"Guido's arguments for rejecting the PEP are: \"it seems to me that most "
"languages implement this kind of construct but have style guides and/or "
"linters that reject it.  I would support a proposal to add this to "
":pep:`8`\", and \"I note that the toy examples are somewhat misleading – "
"the functionality that may be useful is a conditional return (or break "
"etc.) inside a finally block.\"."
msgstr ""

#: ../../peps/pep-0601.rst:26
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0601.rst:28
msgid ""
"This PEP proposes to forbid ``return``, ``break`` and ``continue`` "
"statements within a ``finally`` suite where they would break out of the "
"``finally``.  Their use in such a location silently cancels any active "
"exception being raised through the ``finally``, leading to unclear code "
"and possible bugs."
msgstr ""

#: ../../peps/pep-0601.rst:33
msgid ""
"``continue`` is currently not supported in a ``finally`` in Python 3.7 "
"(due to implementation issues) and the proposal is to not add support for"
" it in Python 3.8.  For ``return`` and ``break`` the proposal is to "
"deprecate their use in Python 3.9, emit a compilation warning in Python "
"3.10 and then forbid their use after that."
msgstr ""

#: ../../peps/pep-0601.rst:40
msgid "Motivation"
msgstr ""

#: ../../peps/pep-0601.rst:42
msgid ""
"The use of ``return``, ``break`` and ``continue`` within a ``finally`` "
"suite leads to behaviour which is not at all obvious.  Consider the "
"following function::"
msgstr ""

#: ../../peps/pep-0601.rst:51
msgid ""
"This will return cleanly (without an exception) even though it has "
"infinite recursion and raises an exception within the ``try``.  The "
"reason is that the ``return`` within the ``finally`` will silently cancel"
" any exception that propagates through the ``finally`` suite.  Such "
"behaviour is unexpected and not at all obvious. This function is "
"equivalent to::"
msgstr ""

#: ../../peps/pep-0601.rst:64
msgid ""
"``break`` and ``continue`` have similar behaviour (they silence "
"exceptions) if they jump to code outside the ``finally`` suite.  For "
"example::"
msgstr ""

#: ../../peps/pep-0601.rst:74
msgid "This behaviour goes against the following parts of The Zen of Python:"
msgstr ""

#: ../../peps/pep-0601.rst:76
msgid "Explicit is better than implicit - exceptions are implicitly silenced"
msgstr ""

#: ../../peps/pep-0601.rst:78
msgid "Readability counts - the intention of the code is not obvious"
msgstr ""

#: ../../peps/pep-0601.rst:80
msgid ""
"Errors should never pass silently; Unless explicitly silenced - "
"exceptions are implicitly silenced"
msgstr ""

#: ../../peps/pep-0601.rst:83
msgid ""
"If this behaviour of silencing exceptions is really needed then the "
"explicit form of a try-except can be used instead, and this makes the "
"code clearer."
msgstr ""

#: ../../peps/pep-0601.rst:86
msgid ""
"Independent to the semantics, implementing "
"``return``/``break``/``continue`` within a ``finally`` suite is non-"
"trivial as it requires to correctly track any active exceptions at "
"runtime (an executing ``finally`` suite may or may not have an active "
"exception) and cancel them as appropriate.  CPython did have a bug in "
"this for the case of ``continue`` and so originally disallowed it [1]_.  "
"Requiring correct behaviour for ``return``/``break``/``continue`` within "
"a ``finally`` puts an unnecessary burden on alternative implementations "
"of Python."
msgstr ""

#: ../../peps/pep-0601.rst:95
msgid "Other languages"
msgstr ""

#: ../../peps/pep-0601.rst:97
msgid ""
"Java allows to return from within a ``finally`` block, but its use is "
"discouraged according to [2]_, [3]_, [4]_.  The Java compiler later on "
"included a linting option ``-Xlint:finally`` to warn against the use of "
"return within a ``finally`` block. The Eclipse editor also warns about "
"this use."
msgstr ""

#: ../../peps/pep-0601.rst:102
msgid ""
"Ruby allows return from inside ensure (Python's finally), but it should "
"be an explicit return.  It is discouraged and handled by linters [5]_, "
"[6]_."
msgstr ""

#: ../../peps/pep-0601.rst:105
msgid ""
"Like Ruby, JavaScript also allows use of "
"``return``/``break``/``continue`` within a ``finally`` but it is seen as "
"unsafe and it is handled by eslint [7]_."
msgstr ""

#: ../../peps/pep-0601.rst:108
msgid ""
"C# forbids the use of ending statements like "
"``return``/``goto``/``break`` within a ``finally`` [8]_, [9]_."
msgstr ""

#: ../../peps/pep-0601.rst:112
msgid "Rationale"
msgstr ""

#: ../../peps/pep-0601.rst:114
msgid ""
"Since the behaviour of ``return``/``break``/``continue`` within a "
"``finally`` is unclear, the pattern is rarely used, and there is a simple"
" alternative to writing equivalent code (which is more explicit), "
"forbidding the syntax is the most straightforward approach."
msgstr ""

#: ../../peps/pep-0601.rst:120
msgid "Specification"
msgstr ""

#: ../../peps/pep-0601.rst:122
msgid ""
"This is a change to the compiler, not the grammar.  The compiler should "
"check for the following in a ``finally`` suite:"
msgstr ""

#: ../../peps/pep-0601.rst:125
msgid "A ``return`` in any statement, at any level of nesting."
msgstr ""

#: ../../peps/pep-0601.rst:127
msgid ""
"A ``break``/``continue`` in any statement, at any level of nesting, that "
"would transfer control flow outside the ``finally`` suite."
msgstr ""

#: ../../peps/pep-0601.rst:130
msgid "Upon finding such a case it should emit the appropriate exception:"
msgstr ""

#: ../../peps/pep-0601.rst:132
msgid ""
"For ``continue``, a ``SyntaxError`` (this is the current behaviour of "
"3.7)."
msgstr ""

#: ../../peps/pep-0601.rst:134
msgid ""
"For ``return``/``break``, a ``SyntaxWarning`` in 3.10, and a "
"``SyntaxError`` after that."
msgstr ""

#: ../../peps/pep-0601.rst:136
msgid "For example, the following are all forbidden by this proposal::"
msgstr ""

#: ../../peps/pep-0601.rst:163
msgid ""
"The following is still allowed because the ``continue`` doesn't escape "
"the ``finally``::"
msgstr ""

#: ../../peps/pep-0601.rst:172
msgid ""
"Note that yielding from within a ``finally`` remains acceptable by this "
"PEP because resuming the generator will resume the ``finally`` and "
"eventually raise any active exceptions (so they are never silenced by "
"yielding)."
msgstr ""

#: ../../peps/pep-0601.rst:177
msgid "Backwards Compatibility"
msgstr ""

#: ../../peps/pep-0601.rst:179
msgid "This is a backwards incompatible change, for ``return`` and ``break``."
msgstr ""

#: ../../peps/pep-0601.rst:181
msgid ""
"The following locations in the CPython standard library (at "
"v3.8.0b1-651-g7fcc2088a5) use ``return`` within ``finally``:"
msgstr ""

#: ../../peps/pep-0601.rst:184
msgid "Lib/subprocess.py:921 - the use here looks like a bug"
msgstr ""

#: ../../peps/pep-0601.rst:186
msgid ""
"Lib/multiprocessing/connection.py:316 - the use here looks legitimate but"
" the intention is not clear"
msgstr ""

#: ../../peps/pep-0601.rst:189
msgid ""
"Lib/multiprocessing/connection.py:318 - the use here looks legitimate but"
" the intention is not clear"
msgstr ""

#: ../../peps/pep-0601.rst:192
msgid ""
"Lib/test/test_sys_settrace.py:837 - a test for ``return`` within "
"``finally``"
msgstr ""

#: ../../peps/pep-0601.rst:194
msgid ""
"Lib/test/test_sys_settrace.py:1346 - a test for ``return`` within "
"``finally``"
msgstr ""

#: ../../peps/pep-0601.rst:196
msgid ""
"There are no uses of ``break`` within a ``finally`` (that break out of "
"the ``finally``) in the standard library."
msgstr ""

#: ../../peps/pep-0601.rst:200
msgid "Security Implications"
msgstr ""

#: ../../peps/pep-0601.rst:202
msgid ""
"This is a simplification of the language, and removal of associated code,"
" so should not introduce any new paths for a security exploit."
msgstr ""

#: ../../peps/pep-0601.rst:206
msgid "How to Teach This"
msgstr ""

#: ../../peps/pep-0601.rst:208
msgid ""
"This feature is very rarely used so forbidding it will likely only impact"
" advanced users, not beginners and probably not any existing teaching "
"material.  Since this is the removal of a feature teaching users will be "
"one by the raising of a ``SyntaxError`` if/when the forbidden feature is "
"used."
msgstr ""

#: ../../peps/pep-0601.rst:214
msgid "Reference Implementation"
msgstr ""

#: ../../peps/pep-0601.rst:216
msgid ""
"There is currently no reference implementation, although the way continue"
" is currently handled in a ``finally`` (raising a ``SyntaxError``) can be"
" extended to ``return`` and ``break``."
msgstr ""

#: ../../peps/pep-0601.rst:221
msgid "References"
msgstr "Referências"

#: ../../peps/pep-0601.rst:223
msgid "https://github.com/python/cpython/issues/82011"
msgstr ""

#: ../../peps/pep-0601.rst:225
msgid ""
"https://stackoverflow.com/questions/48088/returning-from-a-finally-block-"
"in-java"
msgstr ""

#: ../../peps/pep-0601.rst:227
msgid "https://web.archive.org/web/20070922061412/http://weblogs.java.net/blog/staufferjames/archive/2007/06/_dont_return_in.html"
msgstr ""

#: ../../peps/pep-0601.rst:229
msgid "https://wiki.sei.cmu.edu/confluence/display/java/ERR04-J.+Do+not+complete+abruptly+from+a+finally+block"
msgstr ""

#: ../../peps/pep-0601.rst:231
msgid "https://github.com/rubocop/rubocop/issues/5949"
msgstr ""

#: ../../peps/pep-0601.rst:233
msgid "https://www.rubydoc.info/gems/rubocop/0.74.0/RuboCop/Cop/Lint/EnsureReturn"
msgstr ""

#: ../../peps/pep-0601.rst:235
msgid "https://eslint.org/docs/rules/no-unsafe-finally"
msgstr ""

#: ../../peps/pep-0601.rst:237
msgid ""
"https://social.msdn.microsoft.com/Forums/vstudio/en-US/87faf259-3c54"
"-4f3a-8d2b-ff82de44992f/return-statement-in-finally-block?forum=netfxbcl"
msgstr ""

#: ../../peps/pep-0601.rst:239
msgid "https://stackoverflow.com/a/5788268"
msgstr ""

#: ../../peps/pep-0601.rst:242
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0601.rst:244
msgid ""
"This document is placed in the public domain or under the "
"CC0-1.0-Universal license, whichever is more permissive."
msgstr ""

#~ msgid "Nick Coghlan"
#~ msgstr ""

