# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-14 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: pt_BR\n"
"Language-Team: pt_BR <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../peps/peps/pep-2026.rst
msgid "Author"
msgstr ""

#: ../../peps/peps/pep-2026.rst:3
msgid "Hugo van Kemenade"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/peps/pep-2026.rst:4
msgid ""
"https://discuss.python.org/t/pep-2026-calendar-versioning-for-python/55782"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "Status"
msgstr ""

#: ../../peps/peps/pep-2026.rst:5
msgid "Draft"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "Type"
msgstr ""

#: ../../peps/peps/pep-2026.rst:6
msgid "Process"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "Created"
msgstr ""

#: ../../peps/peps/pep-2026.rst:7
msgid "11-Jun-2024"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/peps/pep-2026.rst:8 ../../peps/peps/pep-2026.rst:595
msgid "3.26"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "Post-History"
msgstr ""

#: ../../peps/peps/pep-2026.rst:9
msgid ""
"`14-Jun-2024 <https://discuss.python.org/t/pep-2026-calendar-versioning-for-"
"python/55782>`__"
msgstr ""

#: ../../peps/peps/pep-2026.rst:13
msgid "Abstract"
msgstr ""

#: ../../peps/peps/pep-2026.rst:15
msgid ""
"This PEP proposes updating the versioning scheme for Python to include the "
"calendar year."
msgstr ""

#: ../../peps/peps/pep-2026.rst:18
msgid ""
"Calendar Versioning (CalVer) makes *everything* easier to translate into "
"calendar time rather than counting versions and looking up when they will be "
"(or were) released:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:22
msgid ""
"The support lifecycle is clear, making it easy to see when a version was "
"first released."
msgstr ""

#: ../../peps/peps/pep-2026.rst:24
msgid "Deprecations are easier to manage for maintainers and users."
msgstr ""

#: ../../peps/peps/pep-2026.rst:25
msgid "It's easier to work out when a version will reach end of life (EOL)."
msgstr ""

#: ../../peps/peps/pep-2026.rst:26
msgid ""
"It helps people, especially new learners, understand how old their "
"installation is."
msgstr ""

#: ../../peps/peps/pep-2026.rst:27
msgid ""
"It's easier to reason about which versions of Python to support for "
"libraries and applications."
msgstr ""

#: ../../peps/peps/pep-2026.rst:30
msgid ""
"Starting with what would have been Python 3.15, the version is 3.YY.micro "
"where YY is the year of initial release:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:33
msgid ""
"Python 3.26 will be released in 2026 instead of Python 3.15. EOL is five "
"years after initial release, therefore Python 3.26 will reach EOL in 2031."
msgstr ""

#: ../../peps/peps/pep-2026.rst:36
msgid "Python 3.27 will be released in 2027, and so on."
msgstr ""

#: ../../peps/peps/pep-2026.rst:39
msgid "Motivation and rationale"
msgstr ""

#: ../../peps/peps/pep-2026.rst:41
msgid ""
"In 2019, we adopted an annual release cycle with :pep:`602`, which opened "
"the door for calendar versioning:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:44
msgid ""
"Adopting an annual release calendar allows for natural switching to calendar "
"versioning, for example by calling Python 3.9 “Python 3.20” since it’s "
"released in October ‘20 and so on (“Python 3.23” would be the one released "
"in October ‘23)."
msgstr ""

#: ../../peps/peps/pep-2026.rst:49
msgid ""
"While the ease of switching to calendar versioning can be treated as an "
"advantage of an annual release cycle, this PEP does not advocate for or "
"against a change in how Python is versioned. Should the annual release cycle "
"be adopted, the versioning question will be dealt with in a separate PEP."
msgstr ""

#: ../../peps/peps/pep-2026.rst:55
msgid "This is that PEP."
msgstr ""

#: ../../peps/peps/pep-2026.rst:58 ../../peps/peps/pep-2026.rst:295
msgid "Current scheme"
msgstr ""

#: ../../peps/peps/pep-2026.rst:60
msgid ""
"From the General Python FAQ: :external+python:ref:`faq-version-numbering-"
"scheme`"
msgstr ""

#: ../../peps/peps/pep-2026.rst:63
msgid "Python versions are numbered \"A.B.C\" or \"A.B\":"
msgstr ""

#: ../../peps/peps/pep-2026.rst:65
msgid ""
"*A* is the major version number -- it is only incremented for really major "
"changes in the language."
msgstr ""

#: ../../peps/peps/pep-2026.rst:67
msgid ""
"*B* is the minor version number -- it is incremented for less earth-"
"shattering changes."
msgstr ""

#: ../../peps/peps/pep-2026.rst:69
msgid ""
"*C* is the micro version number -- it is incremented for each bugfix release."
msgstr ""

#: ../../peps/peps/pep-2026.rst:73
msgid "Python predates SemVer"
msgstr ""

#: ../../peps/peps/pep-2026.rst:75
msgid ""
"`Semantic Versioning <https://semver.org/>`__ (SemVer) is a popular scheme "
"which aims to communicate the intent of a release (though it `doesn't always "
"succeed <https://hynek.me/articles/semver-will-not-save-you/>`__)."
msgstr ""

#: ../../peps/peps/pep-2026.rst:79
msgid "Given a version number MAJOR.MINOR.PATCH, increment the:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:81
msgid "MAJOR version when you make incompatible API changes"
msgstr ""

#: ../../peps/peps/pep-2026.rst:82
msgid ""
"MINOR version when you add functionality in a backward compatible manner"
msgstr ""

#: ../../peps/peps/pep-2026.rst:83
msgid "PATCH version when you make backward compatible bug fixes"
msgstr ""

#: ../../peps/peps/pep-2026.rst:85
msgid ""
"People often assume Python follows SemVer and `complain <https://hugovk."
"github.io/python-calver/images/images.005.jpg>`__ `about <https://web."
"archive.org/web/20210415230926/https://twitter.com/gjbernat/"
"status/1382833338751328257>`__ `breaking  <https://web.archive.org/"
"web/20211116214312/https://twitter.com/VictorStinner/"
"status/1460725106129489925>`__ `changes  <https://web.archive.org/"
"web/20220311211508/https://twitter.com/brettsky/"
"status/1502392549222223872>`__ in `feature <https://mastodon.social/"
"@hugovk/111974066832803921>`__ `releases <https://fosstodon.org/"
"@deshipu/112469856667396622>`__. But Python predates SemVer by at least 15 "
"years: the SemVer spec was `introduced in 2009 <https://github.com/semver/"
"semver.org/commit/ca645805ca206e83c7153c64f9bda54afff06262>`__ and the "
"bespoke Python scheme was `added to source control in 1994 <https://github."
"com/python/cpython/commit/95f61a7ef067dbcabccc9b45ee885b0d55922c5f>`__ for "
"the 1.0 release."
msgstr ""

#: ../../peps/peps/pep-2026.rst:99
msgid ""
"If Python adopted SemVer, that would imply a new major bump every year when "
"we remove deprecations."
msgstr ""

#: ../../peps/peps/pep-2026.rst:102
msgid ""
"Instead of SemVer, however, some projects have adopted another versioning "
"scheme based on the calendar."
msgstr ""

#: ../../peps/peps/pep-2026.rst:106
msgid "Calendar versioning"
msgstr ""

#: ../../peps/peps/pep-2026.rst:108
msgid ""
"With `Calendar Versioning <https://calver.org/>`__ (CalVer), you include "
"some element of the date in the version number. `For example <https://calver."
"org/users.html>`__, Ubuntu and Black use the year and month -- Ubuntu 24.04 "
"came out in April 2024; pip and PyCharm use only the year."
msgstr ""

#: ../../peps/peps/pep-2026.rst:117
msgid "Ubuntu"
msgstr ""

#: ../../peps/peps/pep-2026.rst:118
msgid "Black"
msgstr ""

#: ../../peps/peps/pep-2026.rst:119
msgid "pip"
msgstr ""

#: ../../peps/peps/pep-2026.rst:120
msgid "PyCharm"
msgstr ""

#: ../../peps/peps/pep-2026.rst:121
msgid "YY.0M.micro"
msgstr ""

#: ../../peps/peps/pep-2026.rst:122 ../../peps/peps/pep-2026.rst:662
msgid "YY.MM.micro"
msgstr ""

#: ../../peps/peps/pep-2026.rst:123
msgid "YY.minor.micro"
msgstr ""

#: ../../peps/peps/pep-2026.rst:124
msgid "YYYY.minor.micro"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "23.04"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "23.10"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "24.04"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "24.10"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "23.12.1"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "24.1.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "24.1.1"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "24.2.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "23.3"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "23.3.1"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "23.3.2"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "24.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "2023.3.5"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "2024.1"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "2024.1.1"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "2024.1.2"
msgstr ""

#: ../../peps/peps/pep-2026.rst:142
msgid ""
"And here are some programming language standards, all using some form of the "
"year:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:148
msgid "Ada"
msgstr ""

#: ../../peps/peps/pep-2026.rst:149
msgid "Algol"
msgstr ""

#: ../../peps/peps/pep-2026.rst:150
msgid "C"
msgstr ""

#: ../../peps/peps/pep-2026.rst:151
msgid "C++"
msgstr ""

#: ../../peps/peps/pep-2026.rst:152
msgid "Fortran"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "ECMAScript"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "aka JavaScript"
msgstr ""

#: ../../peps/peps/pep-2026.rst:155 ../../peps/peps/pep-2026.rst:159
msgid "YY / YYYY"
msgstr ""

#: ../../peps/peps/pep-2026.rst:156 ../../peps/peps/pep-2026.rst:157
#: ../../peps/peps/pep-2026.rst:158
msgid "YY"
msgstr ""

#: ../../peps/peps/pep-2026.rst:160
msgid "YYYY"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "83"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "95"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "2012"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "2022"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "58"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "60"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "68"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "89"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "99"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "11"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "23"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "98"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "03"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "66"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "90"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "2003"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "2023"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "2020"
msgstr ""

#: ../../peps/peps/pep-2026.rst
msgid "2021"
msgstr ""

#: ../../peps/peps/pep-2026.rst:186
msgid "Annual release cadence"
msgstr ""

#: ../../peps/peps/pep-2026.rst:188
msgid "Since 2019, we've made a release each year:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:190
msgid "3.15.0 will be released in 2026"
msgstr ""

#: ../../peps/peps/pep-2026.rst:191
msgid "3.16.0 will be released in 2027"
msgstr ""

#: ../../peps/peps/pep-2026.rst:192
msgid "3.17.0 will be released in 2028"
msgstr ""

#: ../../peps/peps/pep-2026.rst:193
msgid "3.18.0 will be released in 2029"
msgstr ""

#: ../../peps/peps/pep-2026.rst:194
msgid "3.19.0 will be released in 2030"
msgstr ""

#: ../../peps/peps/pep-2026.rst:196
msgid "This is sort of calendar-based, it’s just that it’s offset by 11 years."
msgstr ""

#: ../../peps/peps/pep-2026.rst:199
msgid "CalVer for Python"
msgstr ""

#: ../../peps/peps/pep-2026.rst:201
msgid ""
"The simplest CalVer option would be to stick with major version 3, and "
"encode the year in the minor version:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:204
msgid "3.26.0 will be released in 2026"
msgstr ""

#: ../../peps/peps/pep-2026.rst:205
msgid "3.27.0 will be released in 2027"
msgstr ""

#: ../../peps/peps/pep-2026.rst:206
msgid "3.28.0 will be released in 2028"
msgstr ""

#: ../../peps/peps/pep-2026.rst:207
msgid "3.29.0 will be released in 2029"
msgstr ""

#: ../../peps/peps/pep-2026.rst:208
msgid "3.30.0 will be released in 2030"
msgstr ""

#: ../../peps/peps/pep-2026.rst:210
msgid ""
"For example, 3.26 will be released in 2026. It makes it obvious when a "
"release first came out."
msgstr ""

#: ../../peps/peps/pep-2026.rst:214
msgid "Clarity of deprecation removal"
msgstr ""

#: ../../peps/peps/pep-2026.rst:216
msgid ""
"Warnings for deprecations often mention the version they will be removed in. "
"For example:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:219
msgid ""
"DeprecationWarning: 'ctypes.SetPointerType' is deprecated and slated for "
"removal in Python 3.15"
msgstr ""

#: ../../peps/peps/pep-2026.rst:222
msgid ""
"However, once aware of CalVer, it is immediately obvious from the warning "
"how long you have to to take action:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:225
msgid ""
"DeprecationWarning: 'ctypes.SetPointerType' is deprecated and slated for "
"removal in Python 3.26"
msgstr ""

#: ../../peps/peps/pep-2026.rst:229
msgid "Clarity of support lifecycle"
msgstr ""

#: ../../peps/peps/pep-2026.rst:231
msgid ""
"Right now, it’s a little tricky to work out when a release is end-of-life. "
"First you have to look up when it was initially released, then add 5 years:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:234
msgid "\"When will Python 3.11 be EOL?\""
msgstr ""

#: ../../peps/peps/pep-2026.rst:236
msgid ""
"\"Well, let's see... PEP 664 is the 3.11 release schedule, it says 3.11 was "
"released in 2022, EOL after 5 years, so 2022 + 5 = 2027.\""
msgstr ""

#: ../../peps/peps/pep-2026.rst:239
msgid ""
"But if the initial release year is right there in the version, it’s much "
"easier:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:242
msgid "\"When will Python 3.26 be EOL?\""
msgstr ""

#: ../../peps/peps/pep-2026.rst:244
msgid "\"26 + 5 = [20]31\""
msgstr ""

#: ../../peps/peps/pep-2026.rst:247
msgid "Clarity of installation age"
msgstr ""

#: ../../peps/peps/pep-2026.rst:249
msgid ""
"With the year in the version, it’s easier to work out how old your "
"installation is. For example, with the current scheme, if you're using "
"Python 3.15 in 2035, it's not immediately clear that it was first released "
"in 2026 (and has been EOL since 2031)."
msgstr ""

#: ../../peps/peps/pep-2026.rst:254
msgid ""
"With knowledge of CalVer, if you're using Python 3.26 in 2035, it's clear it "
"was first released nine years ago and it's probably time to upgrade."
msgstr ""

#: ../../peps/peps/pep-2026.rst:257
msgid ""
"This can help prompt people to switch to supported releases still under "
"security support, and help in teaching new users who may have older "
"installations."
msgstr ""

#: ../../peps/peps/pep-2026.rst:261
msgid "Clarity of version support"
msgstr ""

#: ../../peps/peps/pep-2026.rst:263
msgid ""
"CalVer makes it easier to reason about which versions of Python to support."
msgstr ""

#: ../../peps/peps/pep-2026.rst:265
msgid ""
"For example, without CalVer, setting your minimum compatible Python version "
"to 3.19 in 2031 sets an aggressive assumption regarding version adoption and "
"support."
msgstr ""

#: ../../peps/peps/pep-2026.rst:269
msgid ""
"However, with CalVer, this is more obvious if setting the minimum to 3.30 in "
"2031. For wider support, perhaps you prefer setting it to 3.26."
msgstr ""

#: ../../peps/peps/pep-2026.rst:272
msgid ""
"Similarly, library maintainers supporting all CPython upstream versions need "
"to test against five versions (or six including the pre-release)."
msgstr ""

#: ../../peps/peps/pep-2026.rst:275
msgid "For example, in 2030, the supported versions without CalVer would be:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:277
msgid "3.15, 3.16, 3.17, 3.18, 3.19"
msgstr ""

#: ../../peps/peps/pep-2026.rst:279
msgid "With CalVer they would be:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:281
msgid "3.26, 3.27, 3.28, 3.29, 3.30"
msgstr ""

#: ../../peps/peps/pep-2026.rst:283
msgid ""
"A maintainer can see at a glance which versions are current and need testing."
msgstr ""

#: ../../peps/peps/pep-2026.rst:286
msgid "Non-goals"
msgstr ""

#: ../../peps/peps/pep-2026.rst:288
msgid ""
"Like the current scheme, only the micro version will be incremented for bug "
"fix and security releases, with no change to the major and minor. For "
"example:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:296
msgid "Proposed 3.YY.micro"
msgstr ""

#: ../../peps/peps/pep-2026.rst:297
msgid "Initial release (Oct ’26)"
msgstr ""

#: ../../peps/peps/pep-2026.rst:298
msgid "3.15.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:299
msgid "3.26.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:300
msgid "1st bugfix release (Dec ’26)"
msgstr ""

#: ../../peps/peps/pep-2026.rst:301
msgid "3.15.1"
msgstr ""

#: ../../peps/peps/pep-2026.rst:302
msgid "3.26.1"
msgstr ""

#: ../../peps/peps/pep-2026.rst:303
msgid "2nd bugfix release (Feb ’27)"
msgstr ""

#: ../../peps/peps/pep-2026.rst:304
msgid "3.15.2"
msgstr ""

#: ../../peps/peps/pep-2026.rst:305
msgid "3.26.2"
msgstr ""

#: ../../peps/peps/pep-2026.rst:306 ../../peps/peps/pep-2026.rst:307
#: ../../peps/peps/pep-2026.rst:308
msgid "..."
msgstr ""

#: ../../peps/peps/pep-2026.rst:309
msgid "Final security release (Oct ’31)"
msgstr ""

#: ../../peps/peps/pep-2026.rst:310
msgid "3.15.17"
msgstr ""

#: ../../peps/peps/pep-2026.rst:311
msgid "3.26.17"
msgstr ""

#: ../../peps/peps/pep-2026.rst:313
msgid "No change to :pep:`602` (Annual Release Cycle for Python):"
msgstr ""

#: ../../peps/peps/pep-2026.rst:315
msgid ""
"No change to the 17 months to develop a feature version: alphas, betas and "
"release candidates."
msgstr ""

#: ../../peps/peps/pep-2026.rst:318
msgid ""
"No change to the support duration: two years of full support and three years "
"of security fixes."
msgstr ""

#: ../../peps/peps/pep-2026.rst:321
msgid "No change to the annual October release cadence."
msgstr ""

#: ../../peps/peps/pep-2026.rst:324
msgid "Specification"
msgstr ""

#: ../../peps/peps/pep-2026.rst:326
msgid "Python versions are numbered 3.YY.micro where:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:328
msgid "*3* is the major version number – it is always 3."
msgstr ""

#: ../../peps/peps/pep-2026.rst:331
msgid ""
"*YY* is the minor version number - it is the short year number: ``{year} - "
"2000``."
msgstr ""

#: ../../peps/peps/pep-2026.rst:334
msgid ""
"*micro* is the micro version number - it is incremented for each bugfix or "
"security release."
msgstr ""

#: ../../peps/peps/pep-2026.rst:337
msgid ""
"We'll keep major version 3. Python 3 is the brand; there will be no Python 4."
msgstr ""

#: ../../peps/peps/pep-2026.rst:339
msgid ""
"In the year 2100, the minor will be ``2100-2000 = 100``, therefore the "
"version will be 3.100.0."
msgstr ""

#: ../../peps/peps/pep-2026.rst:342
msgid ""
"Python 3.14 will be the last version before this change, released in 2025. "
"Python 3.26 will be the first version after this change, released in 2026. "
"There will be no Python 3.15 to 3.25 inclusive."
msgstr ""

#: ../../peps/peps/pep-2026.rst:347
msgid "Security implications"
msgstr ""

#: ../../peps/peps/pep-2026.rst:349
msgid ""
"None known. No change to durations or timing of bug fix and security phases."
msgstr ""

#: ../../peps/peps/pep-2026.rst:352
msgid "How to teach this"
msgstr ""

#: ../../peps/peps/pep-2026.rst:354
msgid ""
"We will announce this on blogs, in the 3.14 release notes, documentation, "
"and through outreach to the community."
msgstr ""

#: ../../peps/peps/pep-2026.rst:357
msgid ""
"This change targets the version following 3.14: instead of 3.15 it will be "
"3.26. This PEP was proposed in June 2024. Development for the 3.15/3.26 "
"release will begin in May 2025, with the first alpha in October 2025 and "
"initial release in October 2026. We can already update documentation during "
"the 3.14 cycle. This gives plenty of notice."
msgstr ""

#: ../../peps/peps/pep-2026.rst:365
msgid ""
"We can make preview builds which only change the version for early testing."
msgstr ""

#: ../../peps/peps/pep-2026.rst:367
msgid ""
"We could ship a ``python3.15`` command as part of Python 3.26 that "
"immediately errors out and tells the user to use ``python3.26`` instead."
msgstr ""

#: ../../peps/peps/pep-2026.rst:373
msgid "Rejected ideas"
msgstr ""

#: ../../peps/peps/pep-2026.rst:378
msgid "YY.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:380
msgid "For example, Python 26.0 would be released in 2026."
msgstr ""

#: ../../peps/peps/pep-2026.rst:382
msgid ""
"There's `not much appetite for Python version 4 <https://www.techrepublic."
"com/article/programming-languages-why-python-4-0-will-probably-never-arrive-"
"according-to-its-creator/>`__. `We don’t want to repeat 2-to-3 <https://web."
"archive.org/web/20220906155615/https://twitter.com/gvanrossum/"
"status/1306082472443084801>`__, and 4 has a lot of expectations by now. We "
"don’t want “earth-shattering changes”."
msgstr ""

#: ../../peps/peps/pep-2026.rst:389
msgid ""
"Perhaps Python 4 could be reserved for something big like removing the GIL (:"
"pep:`703`), but the Steering Council made it clear the `free-threading "
"rollout must be gradual <https://discuss.python.org/t/pep-703-making-the-"
"global-interpreter-lock-optional-in-cpython-acceptance/37075>`__. Will we "
"stick with `version 3 forever <https://discuss.python.org/t/python-3-13-"
"alpha-1-contains-breaking-changes-whats-the-plan/37490/11>`__?"
msgstr ""

#: ../../peps/peps/pep-2026.rst:396
msgid ""
"Another option would be to put the year in the major version and jump to "
"26.0. This could mean we could leapfrog all that 4.0 baggage."
msgstr ""

#: ../../peps/peps/pep-2026.rst:402
msgid "Platform compatibility tags"
msgstr ""

#: ../../peps/peps/pep-2026.rst:404
msgid "Changing the major version would complicate packaging, however."
msgstr ""

#: ../../peps/peps/pep-2026.rst:406
msgid ""
"The :ref:`packaging:platform-compatibility-tags` specification says the "
"Python version tag used in wheel filenames is given by ``sysconfig."
"get_config_var(\"py_version_nodot\")``, where the major and minor versions "
"are joined together *without a dot*. For example, 3.9 is ``39``."
msgstr ""

#: ../../peps/peps/pep-2026.rst:412
msgid ""
"During the 3.10 alpha, there was ambiguity because ``310`` can be "
"interpreted as 3.10, 31.0, or 310."
msgstr ""

#: ../../peps/peps/pep-2026.rst:415
msgid ""
"The specification says an underscore can be used if needed, and :pep:`641` "
"(\"Using an underscore in the version portion of Python 3.10 compatibility "
"tags\") proposed this:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:423
msgid "Version → tag → version"
msgstr ""

#: ../../peps/peps/pep-2026.rst:424
msgid "PEP 641 proposed version"
msgstr ""

#: ../../peps/peps/pep-2026.rst:425
msgid "Pre-3.10"
msgstr ""

#: ../../peps/peps/pep-2026.rst:426
msgid "3.9 → ``39``"
msgstr ""

#: ../../peps/peps/pep-2026.rst:428
msgid "Ambiguity after 3.10"
msgstr ""

#: ../../peps/peps/pep-2026.rst:429
msgid "3.10 → ``310`` → 3.10 or 31.0 or 310?"
msgstr ""

#: ../../peps/peps/pep-2026.rst:430
msgid "``3_10``"
msgstr ""

#: ../../peps/peps/pep-2026.rst:431
msgid "Ambiguity with YY.xx"
msgstr ""

#: ../../peps/peps/pep-2026.rst:432
msgid "26.0 → ``260`` → 2.60 or 26.0 or 260?"
msgstr ""

#: ../../peps/peps/pep-2026.rst:433
msgid "``26_0``"
msgstr ""

#: ../../peps/peps/pep-2026.rst:435
msgid ""
"However, PEP 641 was `rejected <https://discuss.python.org/t/pep-641-using-"
"an-underscore-in-the-version-portion-of-python-3-10-compatibility-"
"tags/5513/42>`__ because it was unknown what side effects there would be on "
"code we’re not aware of."
msgstr ""

#: ../../peps/peps/pep-2026.rst:440
msgid ""
"We would need something like this for YY.0 versioning, which would be a "
"significant amount of complex work."
msgstr ""

#: ../../peps/peps/pep-2026.rst:446
msgid "Ecosystem changes"
msgstr ""

#: ../../peps/peps/pep-2026.rst:448
msgid "Would changing the major version to double digits break code?"
msgstr ""

#: ../../peps/peps/pep-2026.rst:450
msgid ""
"Yes, any novel change to the version inevitably does because people make "
"assumptions, such as the major always being 3, or that the version parts are "
"always single digits. For example:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:455
msgid "Version change"
msgstr ""

#: ../../peps/peps/pep-2026.rst:455
msgid "Example"
msgstr ""

#: ../../peps/peps/pep-2026.rst:455
msgid "Expected"
msgstr ""

#: ../../peps/peps/pep-2026.rst:455
msgid "Actual"
msgstr ""

#: ../../peps/peps/pep-2026.rst:457
msgid "2.7.9 → 2.7.10"
msgstr ""

#: ../../peps/peps/pep-2026.rst:457
msgid "2.7.10"
msgstr ""

#: ../../peps/peps/pep-2026.rst:457
msgid "2.7.1"
msgstr ""

#: ../../peps/peps/pep-2026.rst:461
msgid "3.9 → 3.10"
msgstr ""

#: ../../peps/peps/pep-2026.rst:461
msgid "3.10"
msgstr ""

#: ../../peps/peps/pep-2026.rst:461
msgid "3.1"
msgstr ""

#: ../../peps/peps/pep-2026.rst:465
msgid "3 → 4"
msgstr ""

#: ../../peps/peps/pep-2026.rst:465
msgid "4.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:465
msgid "0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:469
msgid "3 → 26"
msgstr ""

#: ../../peps/peps/pep-2026.rst:469
msgid "26"
msgstr ""

#: ../../peps/peps/pep-2026.rst:469
msgid "2"
msgstr ""

#: ../../peps/peps/pep-2026.rst:474
msgid ""
"The last one here is most relevant for YY.0 versioning. Therefore the 3.YY "
"scheme is the safest and requires fewest changes, because the *shape* of the "
"version doesn't change: it's still a 3 followed by two digits."
msgstr ""

#: ../../peps/peps/pep-2026.rst:481
msgid ""
"Use `Ruff's YTT rules <https://docs.astral.sh/ruff/rules/#flake8-2020-"
"ytt>`__ or `Flake8's flake8-2020 plugin <https://pypi.org/project/"
"flake8-2020/>`__ to help find the problems like these."
msgstr ""

#: ../../peps/peps/pep-2026.rst:489
msgid "``python3`` command"
msgstr ""

#: ../../peps/peps/pep-2026.rst:491
msgid ""
":pep:`394` (The “python” Command on Unix-Like Systems) outlines "
"recommendations for the ``python``, ``python2`` and ``python3`` commands. "
"``python`` can map to either ``python2`` or ``python3``. These would need "
"revisiting if the major version changed, and started changing annually."
msgstr ""

#: ../../peps/peps/pep-2026.rst:496
msgid ""
"Four years after Python 2.7's end-of-life, we could recommend ``python`` "
"only maps to the the latest Python 3+ version. But what would ``python3`` "
"map to when Python 26.0 is out? This would introduce additional complexity "
"and cost."
msgstr ""

#: ../../peps/peps/pep-2026.rst:502
msgid "CPython changes"
msgstr ""

#: ../../peps/peps/pep-2026.rst:504
msgid ""
"In addition to ``python3`` command changes, there are at least four places "
"in CPython that assume the major version is 3 and would need updating:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:507
msgid ""
"`Lib/ast.py <https://github.com/python/cpython/"
"blob/406ffb5293a8c9ca315bf63de1ee36a9b33f9aaf/Lib/ast.py#L50-L51>`__"
msgstr ""

#: ../../peps/peps/pep-2026.rst:508
msgid ""
"`Parser/pegen.c <https://github.com/python/cpython/"
"blob/406ffb5293a8c9ca315bf63de1ee36a9b33f9aaf/Parser/pegen.c#L654-L658>`__"
msgstr ""

#: ../../peps/peps/pep-2026.rst:509
msgid ""
"`Parser/pegen.h <https://github.com/python/cpython/"
"blob/406ffb5293a8c9ca315bf63de1ee36a9b33f9aaf/Parser/pegen.h#L284-L288>`__"
msgstr ""

#: ../../peps/peps/pep-2026.rst:510
msgid ""
"`Parser/string_parser.c <https://github.com/python/cpython/"
"blob/406ffb5293a8c9ca315bf63de1ee36a9b33f9aaf/Parser/string_parser.c#L38-"
"L43>`__"
msgstr ""

#: ../../peps/peps/pep-2026.rst:513
msgid "YY.0 rejection"
msgstr ""

#: ../../peps/peps/pep-2026.rst:515
msgid ""
"The benefits of calendar versioning are not so big compared to the combined "
"costs for YY.0 versioning. Therefore, YY.0 versioning is rejected."
msgstr ""

#: ../../peps/peps/pep-2026.rst:519
msgid "YY.MM"
msgstr ""

#: ../../peps/peps/pep-2026.rst:521
msgid "For example, Python 26.10 would be released in October 2026."
msgstr ""

#: ../../peps/peps/pep-2026.rst:523
msgid ""
"Building upon YY.0 versioning, we could also include the release month as "
"the minor version, like Ubuntu and Black. This would make it clear *when* in "
"the year it was released, and also *when* in the year it will reach end-of-"
"life."
msgstr ""

#: ../../peps/peps/pep-2026.rst:527
msgid ""
"However, YY.MM versioning is rejected for many of the same reasons as YY.0 "
"versioning."
msgstr ""

#: ../../peps/peps/pep-2026.rst:530
msgid "3.YYYY"
msgstr ""

#: ../../peps/peps/pep-2026.rst:532
msgid "For example, Python 3.2026 would be released in 2026."
msgstr ""

#: ../../peps/peps/pep-2026.rst:534
msgid ""
"It's clearer that the minor version is a year when using a four digits, and "
"avoids confusion with Ubuntu versions which use YY.MM. However, this is "
"rejected as changing from two to four digits would break more code than 3.YY "
"versioning."
msgstr ""

#: ../../peps/peps/pep-2026.rst:539
msgid "Editions"
msgstr ""

#: ../../peps/peps/pep-2026.rst:541
msgid "For example, Python 3.15 (2026 Edition) would be released in 2026."
msgstr ""

#: ../../peps/peps/pep-2026.rst:543
msgid ""
"The Rust language uses `\"Editions\" <https://doc.rust-lang.org/edition-"
"guide/editions/>`__ to introduce breaking changes. Applying this to Python "
"would require big changes to :pep:`387` (Backwards Compatibility Policy) and "
"is out of scope for this PEP."
msgstr ""

#: ../../peps/peps/pep-2026.rst:549
msgid ""
"We could apply a year label to releases, such as \"Python 3.15 (2026 "
"Edition)\", but this is rejected because we'd have to keep track of *two* "
"numbers."
msgstr ""

#: ../../peps/peps/pep-2026.rst:553
msgid "Adopt SemVer and skip 4"
msgstr ""

#: ../../peps/peps/pep-2026.rst:555
msgid ""
"For example, Python 5.0 would be released in 2026, 6.0 in 2027, and so on."
msgstr ""

#: ../../peps/peps/pep-2026.rst:557
msgid ""
"We could skip the problematic 4.0 entirely and adopt SemVer. Because "
"deprecations are removed in every feature release, we would get a new major "
"bump every year."
msgstr ""

#: ../../peps/peps/pep-2026.rst:561
msgid ""
"This is rejected because we wouldn't get the benefit of calendar versioning, "
"and moving away from 3.x would also `break code <PEP 2026 Ecosystem "
"changes_>`_."
msgstr ""

#: ../../peps/peps/pep-2026.rst:565
msgid "Change during 3.14 cycle"
msgstr ""

#: ../../peps/peps/pep-2026.rst:567
msgid "The Python 3.14 release must go ahead because: π."
msgstr ""

#: ../../peps/peps/pep-2026.rst:570
msgid "Backwards compatibility"
msgstr ""

#: ../../peps/peps/pep-2026.rst:572
msgid ""
"This version change is the safest of the CalVer options considered (see "
"`rejected ideas <PEP 2026 rejected_>`_): we keep 3 as the major version, and "
"the minor version is still two digits. The minor will eventually change to "
"three digits but this is predictable, a long way off and can be planned for."
msgstr ""

#: ../../peps/peps/pep-2026.rst:578
msgid "We retain the ``python3`` executable."
msgstr ""

#: ../../peps/peps/pep-2026.rst:581
msgid "Version mapping"
msgstr ""

#: ../../peps/peps/pep-2026.rst:583
msgid ""
"Versions 3.15 to 3.25 inclusive will be skipped. Features, deprecations and "
"removals planned for these will be remapped to the new version numbers."
msgstr ""

#: ../../peps/peps/pep-2026.rst:587
msgid ""
"For example, a deprecation initially planned for removal in 3.16 will "
"instead be removed in 3.27."
msgstr ""

#: ../../peps/peps/pep-2026.rst:591
msgid "Old version"
msgstr ""

#: ../../peps/peps/pep-2026.rst:591
msgid "New version"
msgstr ""

#: ../../peps/peps/pep-2026.rst:591
msgid "Initial release"
msgstr ""

#: ../../peps/peps/pep-2026.rst:593
msgid "3.14"
msgstr ""

#: ../../peps/peps/pep-2026.rst:593
msgid "3.14 (no change)"
msgstr ""

#: ../../peps/peps/pep-2026.rst:593
msgid "2025"
msgstr ""

#: ../../peps/peps/pep-2026.rst:595
msgid "3.15"
msgstr ""

#: ../../peps/peps/pep-2026.rst:595
msgid "2026"
msgstr ""

#: ../../peps/peps/pep-2026.rst:597
msgid "3.16"
msgstr ""

#: ../../peps/peps/pep-2026.rst:597
msgid "3.27"
msgstr ""

#: ../../peps/peps/pep-2026.rst:597
msgid "2027"
msgstr ""

#: ../../peps/peps/pep-2026.rst:599
msgid "3.17"
msgstr ""

#: ../../peps/peps/pep-2026.rst:599
msgid "3.28"
msgstr ""

#: ../../peps/peps/pep-2026.rst:599
msgid "2028"
msgstr ""

#: ../../peps/peps/pep-2026.rst:601
msgid "3.18"
msgstr ""

#: ../../peps/peps/pep-2026.rst:601
msgid "3.29"
msgstr ""

#: ../../peps/peps/pep-2026.rst:601
msgid "2029"
msgstr ""

#: ../../peps/peps/pep-2026.rst:603
msgid "3.19"
msgstr ""

#: ../../peps/peps/pep-2026.rst:603
msgid "3.30"
msgstr ""

#: ../../peps/peps/pep-2026.rst:603
msgid "2030"
msgstr ""

#: ../../peps/peps/pep-2026.rst:605
msgid "3.20"
msgstr ""

#: ../../peps/peps/pep-2026.rst:605
msgid "3.31"
msgstr ""

#: ../../peps/peps/pep-2026.rst:605
msgid "2031"
msgstr ""

#: ../../peps/peps/pep-2026.rst:607
msgid "3.21"
msgstr ""

#: ../../peps/peps/pep-2026.rst:607
msgid "3.32"
msgstr ""

#: ../../peps/peps/pep-2026.rst:607
msgid "2032"
msgstr ""

#: ../../peps/peps/pep-2026.rst:609
msgid "3.22"
msgstr ""

#: ../../peps/peps/pep-2026.rst:609
msgid "3.33"
msgstr ""

#: ../../peps/peps/pep-2026.rst:609
msgid "2033"
msgstr ""

#: ../../peps/peps/pep-2026.rst:611
msgid "3.23"
msgstr ""

#: ../../peps/peps/pep-2026.rst:611
msgid "3.34"
msgstr ""

#: ../../peps/peps/pep-2026.rst:611
msgid "2034"
msgstr ""

#: ../../peps/peps/pep-2026.rst:613
msgid "3.24"
msgstr ""

#: ../../peps/peps/pep-2026.rst:613
msgid "3.35"
msgstr ""

#: ../../peps/peps/pep-2026.rst:613
msgid "2035"
msgstr ""

#: ../../peps/peps/pep-2026.rst:615
msgid "3.25"
msgstr ""

#: ../../peps/peps/pep-2026.rst:615
msgid "3.36"
msgstr ""

#: ../../peps/peps/pep-2026.rst:615
msgid "2036"
msgstr ""

#: ../../peps/peps/pep-2026.rst:619
msgid "Forwards compatibility"
msgstr ""

#: ../../peps/peps/pep-2026.rst:622
msgid "Future change in cadence"
msgstr ""

#: ../../peps/peps/pep-2026.rst:624
msgid ""
"This PEP proposes no change to the annual release cadence as defined in :pep:"
"`602`, which lays out :pep:`many good reasons for annual releases "
"<602#rationale-and-goals>` (for example, smaller releases with a predictable "
"release calendar, and syncing with external redistributors). However "
"unlikely, should we decide to change the cadence in the future, CalVer does "
"not preclude doing so."
msgstr ""

#: ../../peps/peps/pep-2026.rst:633
msgid "Less frequent"
msgstr ""

#: ../../peps/peps/pep-2026.rst:635
msgid ""
"If we went to *fewer than one release per year*, the proposed CalVer scheme "
"still works; indeed, it even helps people know in which year to expect the "
"release. For example, if we released every second year starting in 2036:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:639
msgid "3.36.0 would be released in 2036"
msgstr ""

#: ../../peps/peps/pep-2026.rst:640
msgid "3.38.0 would be released in 2038"
msgstr ""

#: ../../peps/peps/pep-2026.rst:641
msgid "and so on"
msgstr ""

#: ../../peps/peps/pep-2026.rst:643
msgid ""
"Ecosystem changes depend in part on how the the hypothetical cadence-"
"changing PEP updates :pep:`387` (Backwards Compatibility Policy). If, for "
"example, it requires that the deprecation period must be at least one "
"feature release and not the current two (to maintain the minimum two years), "
"CalVer has the benefit over the status quo in requiring no changes to "
"planned removal versions (other than adjusting any falling in non-release "
"years)."
msgstr ""

#: ../../peps/peps/pep-2026.rst:653
msgid "More frequent"
msgstr ""

#: ../../peps/peps/pep-2026.rst:655
msgid ""
"If we went to *more than one release per year*, here are some options. For "
"example, if we released in April and October starting in 2036, the next four "
"releases could be:"
msgstr ""

#: ../../peps/peps/pep-2026.rst:660
msgid "Scheme"
msgstr ""

#: ../../peps/peps/pep-2026.rst:660
msgid "Notes"
msgstr ""

#: ../../peps/peps/pep-2026.rst:660
msgid "2036 a"
msgstr ""

#: ../../peps/peps/pep-2026.rst:660
msgid "2036 b"
msgstr ""

#: ../../peps/peps/pep-2026.rst:660
msgid "2037 a"
msgstr ""

#: ../../peps/peps/pep-2026.rst:660
msgid "2037 b"
msgstr ""

#: ../../peps/peps/pep-2026.rst:662
msgid "Year as major, month as minor"
msgstr ""

#: ../../peps/peps/pep-2026.rst:662
msgid "36.04.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:662
msgid "36.10.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:662
msgid "37.04.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:662
msgid "37.10.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:664
msgid "YY.x.micro"
msgstr ""

#: ../../peps/peps/pep-2026.rst:664
msgid "Year as major, serial number as minor"
msgstr ""

#: ../../peps/peps/pep-2026.rst:664
msgid "36.1.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:664
msgid "36.2.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:664
msgid "37.1.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:664
msgid "37.2.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:667
msgid "3.YYMM.micro"
msgstr ""

#: ../../peps/peps/pep-2026.rst:667
msgid "Combine year and month as minor"
msgstr ""

#: ../../peps/peps/pep-2026.rst:667
msgid "3.3604.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:667
msgid "3.3610.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:667
msgid "3.3704.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:667
msgid "3.3710.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:670
msgid "3.YYx.micro"
msgstr ""

#: ../../peps/peps/pep-2026.rst:670
msgid "Combine year and serial number as minor"
msgstr ""

#: ../../peps/peps/pep-2026.rst:670
msgid "3.360.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:670
msgid "3.361.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:670
msgid "3.370.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:670
msgid "3.371.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:673
msgid "3.YY.MM.micro"
msgstr ""

#: ../../peps/peps/pep-2026.rst:673
msgid "Add an extra month segment"
msgstr ""

#: ../../peps/peps/pep-2026.rst:673
msgid "3.36.04.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:673
msgid "3.36.10.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:673
msgid "3.37.04.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:673
msgid "3.37.10.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:675
msgid "3.major.micro"
msgstr ""

#: ../../peps/peps/pep-2026.rst:675
msgid "No more CalVer: increment minor"
msgstr ""

#: ../../peps/peps/pep-2026.rst:675
msgid "3.36.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:675
msgid "3.37.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:675
msgid "3.38.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:675
msgid "3.39.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:677
msgid "3.50.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:677
msgid "3.51.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:677
msgid "3.52.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:677
msgid "3.53.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:679
msgid "3.100.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:679
msgid "3.101.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:679
msgid "3.102.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:679
msgid "3.103.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:681
msgid "4.major.micro"
msgstr ""

#: ../../peps/peps/pep-2026.rst:681
msgid "No more CalVer: increment major"
msgstr ""

#: ../../peps/peps/pep-2026.rst:681
msgid "4.0.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:681
msgid "4.1.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:681
msgid "4.2.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:681
msgid "4.3.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:683
msgid "5.major.micro"
msgstr ""

#: ../../peps/peps/pep-2026.rst:683
msgid "5.0.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:683
msgid "5.1.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:683
msgid "5.2.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:683
msgid "5.3.0"
msgstr ""

#: ../../peps/peps/pep-2026.rst:686
msgid ""
"The YY options would require addressing issues around the `platform "
"compatibility tags <PEP 2026 platform compatibility tags_>`__, the `python3 "
"command <PEP 2026 python3 command_>`_, and code `assuming the version always "
"begins with 3 <PEP 2026 Ecosystem changes_>`__."
msgstr ""

#: ../../peps/peps/pep-2026.rst:691
msgid ""
"The options keeping major version 3 but changing the minor to three or four "
"digits would also need to address code `assuming the version is always two "
"digits <PEP 2026 Ecosystem changes_>`__."
msgstr ""

#: ../../peps/peps/pep-2026.rst:695
msgid ""
"The option adding an extra month segment is the biggest change as code would "
"need to deal with a four-part version instead of three."
msgstr ""

#: ../../peps/peps/pep-2026.rst:698
msgid ""
"The options dropping CalVer would be the most conservative allowing the "
"major and minor to be chosen freely."
msgstr ""

#: ../../peps/peps/pep-2026.rst:702
msgid "No more CalVer"
msgstr ""

#: ../../peps/peps/pep-2026.rst:704
msgid ""
"Adopting CalVer now does not preclude moving away CalVer in the future, for "
"example, back to the original scheme, to SemVer or another scheme. Some "
"options are `listed in the table above <PEP 2026 More frequent_>`__. If "
"wanting to make it clear the minor is no longer the year, it can be bumped "
"to a higher round number (for example, 3.50 or 3.100) or the major version "
"can be bumped (for example, to 4.0 or 5.0). Additionally, a `version epoch "
"<https://packaging.python.org/en/latest/specifications/version-specifiers/"
"#version-epochs>`__ could be considered."
msgstr ""

#: ../../peps/peps/pep-2026.rst:715
msgid "Footnotes"
msgstr ""

#: ../../peps/peps/pep-2026.rst:717
msgid ""
"The author proposed calendar versioning at the `Python Language Summit 2024 "
"<https://us.pycon.org/2024/events/language-summit/>`__; this PEP is a result "
"of discussions there and during PyCon US."
msgstr ""

#: ../../peps/peps/pep-2026.rst:721
msgid ""
"Read the `slides <https://hugovk.github.io/python-calver/>`__ and `blogpost "
"<https://pyfound.blogspot.com/2024/06/python-language-summit-2024-should-"
"python-adopt-calver.html>`__ of the summit talk."
msgstr ""

#: ../../peps/peps/pep-2026.rst:727
msgid "Acknowledgements"
msgstr ""

#: ../../peps/peps/pep-2026.rst:729
msgid ""
"Thanks to Seth Michael Larson for the Language Summit Q&A notes and "
"blogpost, and to everyone who gave feedback at the summit and PyCon US."
msgstr ""

#: ../../peps/peps/pep-2026.rst:732
msgid ""
"Thank you to Łukasz Langa and Alex Waygood for reviewing a draft of this PEP."
msgstr ""

#: ../../peps/peps/pep-2026.rst:735
msgid "Copyright"
msgstr ""

#: ../../peps/peps/pep-2026.rst:737
msgid ""
"This document is placed in the public domain or under the CC0-1.0-Universal "
"license, whichever is more permissive."
msgstr ""
