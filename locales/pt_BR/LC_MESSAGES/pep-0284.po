# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0284.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0284.rst:3
msgid ""
"David Eppstein <eppstein@ics.uci.edu>, Gregory Ewing "
"<greg.ewing@canterbury.ac.nz>"
msgstr ""

#: ../../peps/pep-0284.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0284.rst:5
msgid "Rejected"
msgstr ""

#: ../../peps/pep-0284.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0284.rst:6
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0284.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0284.rst:8
msgid "01-Mar-2002"
msgstr ""

#: ../../peps/pep-0284.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-0284.rst:9
msgid "2.3"
msgstr ""

#: ../../peps/pep-0284.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0284.rst:14
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0284.rst:16
msgid ""
"This PEP proposes to simplify iteration over intervals of integers, by "
"extending the range of expressions allowed after a \"for\" keyword to "
"allow three-way comparisons such as ::"
msgstr ""

#: ../../peps/pep-0284.rst:22
msgid "in place of the current ::"
msgstr ""

#: ../../peps/pep-0284.rst:26
msgid ""
"syntax.  The resulting loop or list iteration will loop over all values "
"of var that make the comparison true, starting from the left endpoint of "
"the given interval."
msgstr ""

#: ../../peps/pep-0284.rst:32
msgid "Pronouncement"
msgstr ""

#: ../../peps/pep-0284.rst:34
msgid ""
"This PEP is rejected.  There were a number of fixable issues with the "
"proposal (see the fixups listed in Raymond Hettinger's python-dev post on"
" 18 June 2005 [1]_).  However, even with the fixups the proposal did not "
"garner support.  Specifically, Guido did not buy the premise that the "
"``range()`` format needed fixing, \"The whole point (15 years ago) of "
"``range()`` was to *avoid* needing syntax to specify a loop over numbers."
" I think it's worked out well and there's nothing that needs to be fixed "
"(except ``range()`` needs to become an iterator, which it will in Python "
"3.0).\""
msgstr ""

#: ../../peps/pep-0284.rst:46
msgid "Rationale"
msgstr ""

#: ../../peps/pep-0284.rst:48
msgid ""
"One of the most common uses of for-loops in Python is to iterate over an "
"interval of integers.  Python provides functions ``range()`` and "
"``xrange()`` to generate lists and iterators for such intervals, which "
"work best for the most frequent case: half-open intervals increasing from"
" zero.  However, the ``range()`` syntax is more awkward for open or "
"closed intervals, and lacks symmetry when reversing the order of "
"iteration.  In addition, the call to an unfamiliar function makes it "
"difficult for newcomers to Python to understand code that uses "
"``range()`` or ``xrange()``."
msgstr ""

#: ../../peps/pep-0284.rst:58
msgid ""
"The perceived lack of a natural, intuitive integer iteration syntax has "
"led to heated debate on python-list, and spawned at least four PEPs "
"before this one.  :pep:`204` (rejected) proposed to re-use Python's slice"
" syntax for integer ranges, leading to a terser syntax but not solving "
"the readability problem of multi-argument ``range()``.  :pep:`212` "
"(deferred) proposed several syntaxes for directly converting a list to a "
"sequence of integer indices, in place of the current idiom ::"
msgstr ""

#: ../../peps/pep-0284.rst:69
msgid ""
"for such conversion, and :pep:`281` proposes to simplify the same idiom "
"by allowing it to be written as ::"
msgstr ""

#: ../../peps/pep-0284.rst:74
msgid ""
":pep:`276` proposes to allow automatic conversion of integers to "
"iterators, simplifying the most common half-open case but not addressing "
"the complexities of other types of interval. Additional alternatives have"
" been discussed on python-list."
msgstr ""

#: ../../peps/pep-0284.rst:79
msgid ""
"The solution described here is to allow a three-way comparison after a "
"\"for\" keyword, both in the context of a for-loop and of a list "
"comprehension::"
msgstr ""

#: ../../peps/pep-0284.rst:85
msgid ""
"This would cause iteration over an interval of consecutive integers, "
"beginning at the left bound in the comparison and ending at the right "
"bound.  The exact comparison operations used would determine whether the "
"interval is open or closed at either end and whether the integers are "
"considered in ascending or descending order."
msgstr ""

#: ../../peps/pep-0284.rst:92
msgid ""
"This syntax closely matches standard mathematical notation, so is likely "
"to be more familiar to Python novices than the current ``range()`` "
"syntax.  Open and closed interval endpoints are equally easy to express, "
"and the reversal of an integer interval can be formed simply by swapping "
"the two endpoints and reversing the comparisons.  In addition, the "
"semantics of such a loop would closely resemble one way of interpreting "
"the existing Python for-loops::"
msgstr ""

#: ../../peps/pep-0284.rst:103
msgid "iterates over exactly those values of item that cause the expression ::"
msgstr ""

#: ../../peps/pep-0284.rst:108
msgid "to be true.  Similarly, the new format ::"
msgstr ""

#: ../../peps/pep-0284.rst:112
msgid ""
"would iterate over exactly those integer values of var that cause the "
"expression ::"
msgstr ""

#: ../../peps/pep-0284.rst:117
msgid "to be true."
msgstr ""

#: ../../peps/pep-0284.rst:121
msgid "Specification"
msgstr ""

#: ../../peps/pep-0284.rst:123
msgid "We propose to extend the syntax of a for statement, currently ::"
msgstr ""

#: ../../peps/pep-0284.rst:128
msgid "as described below::"
msgstr ""

#: ../../peps/pep-0284.rst:137
msgid ""
"Similarly, we propose to extend the syntax of list comprehensions, "
"currently ::"
msgstr ""

#: ../../peps/pep-0284.rst:142
msgid "by replacing it with::"
msgstr ""

#: ../../peps/pep-0284.rst:146
msgid ""
"In all cases the expression formed by for_test would be subject to the "
"same precedence rules as comparisons in expressions.  The two "
"comp_operators in a for_test must be required to be both of similar "
"types, unlike chained comparisons in expressions which do not have such a"
" restriction."
msgstr ""

#: ../../peps/pep-0284.rst:152
msgid ""
"We refer to the two or_expr's occurring on the left and right sides of "
"the for-loop syntax as the bounds of the loop, and the middle or_expr as "
"the variable of the loop.  When a for-loop using the new syntax is "
"executed, the expressions for both bounds will be evaluated, and an "
"iterator object created that iterates through all integers between the "
"two bounds according to the comparison operations used.  The iterator "
"will begin with an integer equal or near to the left bound, and then step"
" through the remaining integers with a step size of +1 or -1 if the "
"comparison operation is in the set described by less_comp or greater_comp"
" respectively. The execution will then proceed as if the expression had "
"been ::"
msgstr ""

#: ../../peps/pep-0284.rst:166
msgid ""
"where \"variable\" refers to the variable of the loop and \"iterator\" "
"refers to the iterator created for the given integer interval."
msgstr ""

#: ../../peps/pep-0284.rst:169
msgid ""
"The values taken by the loop variable in an integer for-loop may be "
"either plain integers or long integers, according to the magnitude of the"
" bounds.  Both bounds of an integer for-loop must evaluate to a real "
"numeric type (integer, long, or float).  Any other value will cause the "
"for-loop statement to raise a ``TypeError`` exception."
msgstr ""

#: ../../peps/pep-0284.rst:178
msgid "Issues"
msgstr ""

#: ../../peps/pep-0284.rst:180
msgid ""
"The following issues were raised in discussion of this and related "
"proposals on the Python list."
msgstr ""

#: ../../peps/pep-0284.rst:183
msgid ""
"Should the right bound be evaluated once, or every time through the loop?"
"  Clearly, it only makes sense to evaluate the left bound once.  For "
"reasons of consistency and efficiency, we have chosen the same convention"
" for the right bound."
msgstr ""

#: ../../peps/pep-0284.rst:188
msgid ""
"Although the new syntax considerably simplifies integer for-loops, list "
"comprehensions using the new syntax are not as simple.  We feel that this"
" is appropriate since for-loops are more frequent than comprehensions."
msgstr ""

#: ../../peps/pep-0284.rst:193
msgid ""
"The proposal does not allow access to integer iterator objects such as "
"would be created by ``xrange``.  True, but we see this as a shortcoming "
"in the general list-comprehension syntax, beyond the scope of this "
"proposal.  In addition, ``xrange()`` will still be available."
msgstr ""

#: ../../peps/pep-0284.rst:199
msgid ""
"The proposal does not allow increments other than 1 and -1. More general "
"arithmetic progressions would need to be created by ``range()`` or "
"``xrange()``, or by a list comprehension syntax such as ::"
msgstr ""

#: ../../peps/pep-0284.rst:205
msgid ""
"The position of the loop variable in the middle of a three-way comparison"
" is not as apparent as the variable in the present ::"
msgstr ""

#: ../../peps/pep-0284.rst:210
msgid ""
"syntax, leading to a possible loss of readability.  We feel that this "
"loss is outweighed by the increase in readability from a natural integer "
"iteration syntax."
msgstr ""

#: ../../peps/pep-0284.rst:214
msgid ""
"To some extent, this PEP addresses the same issues as :pep:`276`. We feel"
" that the two PEPs are not in conflict since :pep:`276` is primarily "
"concerned with half-open ranges starting in 0 (the easy case of "
"``range()``) while this PEP is primarily concerned with simplifying all "
"other cases.  However, if this PEP is approved, its new simpler syntax "
"for integer loops could to some extent reduce the motivation for "
":pep:`276`."
msgstr ""

#: ../../peps/pep-0284.rst:222
msgid ""
"It is not clear whether it makes sense to allow floating point bounds for"
" an integer loop: if a float represents an inexact value, how can it be "
"used to determine an exact sequence of integers?  On the other hand, "
"disallowing float bounds would make it difficult to use ``floor()`` and "
"``ceiling()`` in integer for-loops, as it is difficult to use them now "
"with ``range()``.  We have erred on the side of flexibility, but this may"
" lead to some implementation difficulties in determining the smallest and"
" largest integer values that would cause a given comparison to be true."
msgstr ""

#: ../../peps/pep-0284.rst:233
msgid ""
"Should types other than int, long, and float be allowed as bounds?  "
"Another choice would be to convert all bounds to integers by ``int()``, "
"and allow as bounds anything that can be so converted instead of just "
"floats.  However, this would change the semantics: ``0.3 <= x`` is not "
"the same as ``int(0.3) <= x``, and it would be confusing for a loop with "
"0.3 as lower bound to start at zero.  Also, in general ``int(f)`` can be "
"very far from ``f``."
msgstr ""

#: ../../peps/pep-0284.rst:243
msgid "Implementation"
msgstr ""

#: ../../peps/pep-0284.rst:245
msgid ""
"An implementation is not available at this time.  Implementation is not "
"expected to pose any great difficulties: the new syntax could, if "
"necessary, be recognized by parsing a general expression after each "
"\"for\" keyword and testing whether the top level operation of the "
"expression is \"in\" or a three-way comparison. The Python compiler would"
" convert any instance of the new syntax into a loop over the items in a "
"special iterator object."
msgstr ""

#: ../../peps/pep-0284.rst:255
msgid "References"
msgstr "Referências"

#: ../../peps/pep-0284.rst:257
msgid ""
"Raymond Hettinger, Propose updating PEP 284 -- Integer for-loops "
"https://mail.python.org/pipermail/python-dev/2005-June/054316.html"
msgstr ""

#: ../../peps/pep-0284.rst:262
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0284.rst:264
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid ""
#~ "David Eppstein <eppstein@ics.uci.edu>, Greg "
#~ "Ewing <greg.ewing@canterbury.ac.nz>"
#~ msgstr ""

