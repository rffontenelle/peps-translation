# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-14 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../peps/peps/pep-0586.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/peps/pep-0586.rst:3
msgid ""
"Michael Lee <michael.lee.0x2a@gmail.com>, Ivan Levkivskyi <levkivskyi@gmail."
"com>, Jukka Lehtosalo <jukka.lehtosalo@iki.fi>"
msgstr ""

#: ../../peps/peps/pep-0586.rst
msgid "BDFL-Delegate"
msgstr ""

#: ../../peps/peps/pep-0586.rst:4
msgid "Guido van Rossum <guido@python.org>"
msgstr ""

#: ../../peps/peps/pep-0586.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/peps/pep-0586.rst:5
msgid "typing-sig@python.org"
msgstr ""

#: ../../peps/peps/pep-0586.rst
msgid "Status"
msgstr "Status"

#: ../../peps/peps/pep-0586.rst:6
msgid "Final"
msgstr ""

#: ../../peps/peps/pep-0586.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/peps/pep-0586.rst:7
msgid "Standards Track"
msgstr ""

#: ../../peps/peps/pep-0586.rst
msgid "Topic"
msgstr ""

#: ../../peps/peps/pep-0586.rst:8
msgid "Typing"
msgstr ""

#: ../../peps/peps/pep-0586.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/peps/pep-0586.rst:9 ../../peps/peps/pep-0586.rst:11
msgid "14-Mar-2019"
msgstr ""

#: ../../peps/peps/pep-0586.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/peps/pep-0586.rst:10
msgid "3.8"
msgstr ""

#: ../../peps/peps/pep-0586.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/peps/pep-0586.rst
msgid "Resolution"
msgstr ""

#: ../../peps/peps/pep-0586.rst:12
msgid ""
"https://mail.python.org/archives/list/typing-sig@python.org/message/"
"FDO4KFYWYQEP3U2HVVBEBR3SXPHQSHYR/"
msgstr ""

#: ../../peps/peps/pep-0586.rst:18
msgid "Abstract"
msgstr ""

#: ../../peps/peps/pep-0586.rst:20
msgid ""
"This PEP proposes adding *Literal types* to the :pep:`484` ecosystem. "
"Literal types indicate that some expression has literally a specific value. "
"For example, the following function will accept only expressions that have "
"literally the value \"4\"::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:34
msgid "Motivation and Rationale"
msgstr ""

#: ../../peps/peps/pep-0586.rst:36
msgid ""
"Python has many APIs that return different types depending on the value of "
"some argument provided. For example:"
msgstr ""

#: ../../peps/peps/pep-0586.rst:39
msgid ""
"``open(filename, mode)`` returns either ``IO[bytes]`` or ``IO[Text]`` "
"depending on whether the second argument is something like ``r`` or ``rb``."
msgstr ""

#: ../../peps/peps/pep-0586.rst:42
msgid ""
"``subprocess.check_output(...)`` returns either bytes or text depending on "
"whether the ``universal_newlines`` keyword argument is set to ``True`` or "
"not."
msgstr ""

#: ../../peps/peps/pep-0586.rst:46
msgid ""
"This pattern is also fairly common in many popular 3rd party libraries. For "
"example, here are just two examples from pandas and numpy respectively:"
msgstr ""

#: ../../peps/peps/pep-0586.rst:49
msgid ""
"``pandas.concat(...)`` will return either ``Series`` or ``DataFrame`` "
"depending on whether the ``axis`` argument is set to 0 or 1."
msgstr ""

#: ../../peps/peps/pep-0586.rst:53
msgid ""
"``numpy.unique`` will return either a single array or a tuple containing "
"anywhere from two to four arrays depending on three boolean flag values."
msgstr ""

#: ../../peps/peps/pep-0586.rst:56
msgid ""
"The typing issue tracker contains some `additional examples and discussion "
"<typing-discussion_>`_."
msgstr ""

#: ../../peps/peps/pep-0586.rst:59
msgid ""
"There is currently no way of expressing the type signatures of these "
"functions: :pep:`484` does not include any mechanism for writing signatures "
"where the return type varies depending on the value passed in. Note that "
"this problem persists even if we redesign these APIs to instead accept "
"enums: ``MyEnum.FOO`` and ``MyEnum.BAR`` are both considered to be of type "
"``MyEnum``."
msgstr ""

#: ../../peps/peps/pep-0586.rst:66
msgid ""
"Currently, type checkers work around this limitation by adding ad hoc "
"extensions for important builtins and standard library functions. For "
"example, mypy comes bundled with a plugin that attempts to infer more "
"precise types for ``open(...)``. While this approach works for standard "
"library functions, it’s unsustainable in general: it’s not reasonable to "
"expect 3rd party library authors to maintain plugins for N different type "
"checkers."
msgstr ""

#: ../../peps/peps/pep-0586.rst:74
msgid "We propose adding *Literal types* to address these gaps."
msgstr ""

#: ../../peps/peps/pep-0586.rst:77
msgid "Core Semantics"
msgstr ""

#: ../../peps/peps/pep-0586.rst:79
msgid "This section outlines the baseline behavior of literal types."
msgstr ""

#: ../../peps/peps/pep-0586.rst:82
msgid "Core behavior"
msgstr ""

#: ../../peps/peps/pep-0586.rst:84
msgid ""
"Literal types indicate that a variable has a specific and concrete value. "
"For example, if we define some variable ``foo`` to have type ``Literal[3]``, "
"we are declaring that ``foo`` must be exactly equal to ``3`` and no other "
"value."
msgstr ""

#: ../../peps/peps/pep-0586.rst:89
msgid ""
"Given some value ``v`` that is a member of type ``T``, the type "
"``Literal[v]`` shall be treated as a subtype of ``T``. For example, "
"``Literal[3]`` is a subtype of ``int``."
msgstr ""

#: ../../peps/peps/pep-0586.rst:93
msgid ""
"All methods from the parent type will be directly inherited by the literal "
"type. So, if we have some variable ``foo`` of type ``Literal[3]`` it’s safe "
"to do things like ``foo + 5`` since ``foo`` inherits int’s ``__add__`` "
"method. The resulting type of ``foo + 5`` is ``int``."
msgstr ""

#: ../../peps/peps/pep-0586.rst:98
msgid ""
"This \"inheriting\" behavior is identical to how we :pep:`handle NewTypes "
"<484#newtype-helper-function>`."
msgstr ""

#: ../../peps/peps/pep-0586.rst:102
msgid "Equivalence of two Literals"
msgstr ""

#: ../../peps/peps/pep-0586.rst:104
msgid ""
"Two types ``Literal[v1]`` and ``Literal[v2]`` are equivalent when both of "
"the following conditions are true:"
msgstr ""

#: ../../peps/peps/pep-0586.rst:107
msgid "``type(v1) == type(v2)``"
msgstr ""

#: ../../peps/peps/pep-0586.rst:108
msgid "``v1 == v2``"
msgstr ""

#: ../../peps/peps/pep-0586.rst:110
msgid ""
"For example, ``Literal[20]`` and ``Literal[0x14]`` are equivalent. However, "
"``Literal[0]`` and ``Literal[False]`` is *not* equivalent despite that ``0 "
"== False`` evaluates to 'true' at runtime: ``0`` has type ``int`` and "
"``False`` has type ``bool``."
msgstr ""

#: ../../peps/peps/pep-0586.rst:116
msgid "Shortening unions of literals"
msgstr ""

#: ../../peps/peps/pep-0586.rst:118
msgid ""
"Literals are parameterized with one or more values. When a Literal is "
"parameterized with more than one value, it's treated as exactly equivalent "
"to the union of those types. That is, ``Literal[v1, v2, v3]`` is equivalent "
"to ``Union[Literal[v1], Literal[v2], Literal[v3]]``."
msgstr ""

#: ../../peps/peps/pep-0586.rst:123
msgid ""
"This shortcut helps make writing signatures for functions that accept many "
"different literals more ergonomic — for example, functions like "
"``open(...)``::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:143
msgid ""
"The provided values do not all have to be members of the same type. For "
"example, ``Literal[42, \"foo\", True]`` is a legal type."
msgstr ""

#: ../../peps/peps/pep-0586.rst:146
msgid ""
"However, Literal **must** be parameterized with at least one type. Types "
"like ``Literal[]`` or ``Literal`` are illegal."
msgstr ""

#: ../../peps/peps/pep-0586.rst:151
msgid "Legal and illegal parameterizations"
msgstr ""

#: ../../peps/peps/pep-0586.rst:153
msgid ""
"This section describes what exactly constitutes a legal ``Literal[...]`` "
"type: what values may and may not be used as parameters."
msgstr ""

#: ../../peps/peps/pep-0586.rst:156
msgid ""
"In short, a ``Literal[...]`` type may be parameterized by one or more "
"literal expressions, and nothing else."
msgstr ""

#: ../../peps/peps/pep-0586.rst:161
msgid "Legal parameters for ``Literal`` at type check time"
msgstr ""

#: ../../peps/peps/pep-0586.rst:163
msgid ""
"``Literal`` may be parameterized with literal ints, byte and unicode "
"strings, bools, Enum values and ``None``. So for example, all of the "
"following would be legal::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:177
msgid ""
"**Note:** Since the type ``None`` is inhabited by just a single value, the "
"types ``None`` and ``Literal[None]`` are exactly equivalent. Type checkers "
"may simplify ``Literal[None]`` into just ``None``."
msgstr ""

#: ../../peps/peps/pep-0586.rst:181
msgid ""
"``Literal`` may also be parameterized by other literal types, or type "
"aliases to other literal types. For example, the following is legal::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:192
msgid ""
"This feature is again intended to help make using and reusing literal types "
"more ergonomic."
msgstr ""

#: ../../peps/peps/pep-0586.rst:195
msgid ""
"**Note:** As a consequence of the above rules, type checkers are also "
"expected to support types that look like the following::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:200
msgid "This should be exactly equivalent to the following type::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:204
msgid "...and also to the following type::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:208
msgid ""
"**Note:** String literal types like ``Literal[\"foo\"]`` should subtype "
"either bytes or unicode in the same way regular string literals do at "
"runtime."
msgstr ""

#: ../../peps/peps/pep-0586.rst:211
msgid ""
"For example, in Python 3, the type ``Literal[\"foo\"]`` is equivalent to "
"``Literal[u\"foo\"]``, since ``\"foo\"`` is equivalent to ``u\"foo\"`` in "
"Python 3."
msgstr ""

#: ../../peps/peps/pep-0586.rst:214
msgid ""
"Similarly, in Python 2, the type ``Literal[\"foo\"]`` is equivalent to "
"``Literal[b\"foo\"]`` -- unless the file includes a ``from __future__ import "
"unicode_literals`` import, in which case it would be equivalent to "
"``Literal[u\"foo\"]``."
msgstr ""

#: ../../peps/peps/pep-0586.rst:220
msgid "Illegal parameters for ``Literal`` at type check time"
msgstr ""

#: ../../peps/peps/pep-0586.rst:222
msgid "The following parameters are intentionally disallowed by design:"
msgstr ""

#: ../../peps/peps/pep-0586.rst:224
msgid ""
"Arbitrary expressions like ``Literal[3 + 4]`` or ``Literal[\"foo\"."
"replace(\"o\", \"b\")]``."
msgstr ""

#: ../../peps/peps/pep-0586.rst:227
msgid ""
"Rationale: Literal types are meant to be a minimal extension to the :pep:"
"`484` typing ecosystem and requiring type checkers to interpret potentially "
"expressions inside types adds too much complexity. Also see `Rejected or out-"
"of-scope ideas`_."
msgstr ""

#: ../../peps/peps/pep-0586.rst:232
msgid ""
"As a consequence, complex numbers like ``Literal[4 + 3j]`` and ``Literal[-4 "
"+ 2j]`` are also prohibited. For consistency, literals like ``Literal[4j]`` "
"that contain just a single complex number are also prohibited."
msgstr ""

#: ../../peps/peps/pep-0586.rst:237
msgid ""
"The only exception to this rule is the unary ``-`` (minus) for ints: types "
"like ``Literal[-5]`` are *accepted*."
msgstr ""

#: ../../peps/peps/pep-0586.rst:240
msgid ""
"Tuples containing valid literal types like ``Literal[(1, \"foo\", "
"\"bar\")]``. The user could always express this type as ``Tuple[Literal[1], "
"Literal[\"foo\"], Literal[\"bar\"]]`` instead. Also, tuples are likely to be "
"confused with the ``Literal[1, 2, 3]`` shortcut."
msgstr ""

#: ../../peps/peps/pep-0586.rst:246
msgid ""
"Mutable literal data structures like dict literals, list literals, or set "
"literals: literals are always implicitly final and immutable. So, "
"``Literal[{\"a\": \"b\", \"c\": \"d\"}]`` is illegal."
msgstr ""

#: ../../peps/peps/pep-0586.rst:250
msgid ""
"Any other types: for example, ``Literal[Path]``, or "
"``Literal[some_object_instance]`` are illegal. This includes typevars: if "
"``T`` is a typevar,  ``Literal[T]`` is not allowed. Typevars can vary over "
"only types, never over values."
msgstr ""

#: ../../peps/peps/pep-0586.rst:255
msgid ""
"The following are provisionally disallowed for simplicity. We can consider "
"allowing them in future extensions of this PEP."
msgstr ""

#: ../../peps/peps/pep-0586.rst:258
msgid ""
"Floats: e.g. ``Literal[3.14]``. Representing Literals of infinity or NaN in "
"a clean way is tricky; real-world APIs are unlikely to vary their behavior "
"based on a float parameter."
msgstr ""

#: ../../peps/peps/pep-0586.rst:262
msgid ""
"Any: e.g. ``Literal[Any]``. ``Any`` is a type, and ``Literal[...]`` is meant "
"to contain values only. It is also unclear what ``Literal[Any]`` would "
"actually semantically mean."
msgstr ""

#: ../../peps/peps/pep-0586.rst:267
msgid "Parameters at runtime"
msgstr ""

#: ../../peps/peps/pep-0586.rst:269
msgid ""
"Although the set of parameters ``Literal[...]`` may contain at type check "
"time is very small, the actual implementation of ``typing.Literal`` will not "
"perform any checks at runtime. For example::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:279
msgid ""
"The type checker should reject this program: all three uses of ``Literal`` "
"are *invalid* according to this spec. However, Python itself should execute "
"this program with no errors."
msgstr ""

#: ../../peps/peps/pep-0586.rst:283
msgid ""
"This is partly to help us preserve flexibility in case we want to expand the "
"scope of what ``Literal`` can be used for in the future, and partly because "
"it is not possible to detect all illegal parameters at runtime to begin "
"with. For example, it is impossible to distinguish between ``Literal[1 + "
"2]`` and ``Literal[3]`` at runtime."
msgstr ""

#: ../../peps/peps/pep-0586.rst:290
msgid "Literals, enums, and forward references"
msgstr ""

#: ../../peps/peps/pep-0586.rst:292
msgid ""
"One potential ambiguity is between literal strings and forward references to "
"literal enum members. For example, suppose we have the type "
"``Literal[\"Color.RED\"]``. Does this literal type contain a string literal "
"or a forward reference to some ``Color.RED`` enum member?"
msgstr ""

#: ../../peps/peps/pep-0586.rst:298
msgid ""
"In cases like these, we always assume the user meant to construct a literal "
"string. If the user wants a forward reference, they must wrap the entire "
"literal type in a string -- e.g. ``\"Literal[Color.RED]\"``."
msgstr ""

#: ../../peps/peps/pep-0586.rst:303
msgid "Type inference"
msgstr ""

#: ../../peps/peps/pep-0586.rst:305
msgid ""
"This section describes a few rules regarding type inference and literals, "
"along with some examples."
msgstr ""

#: ../../peps/peps/pep-0586.rst:309
msgid "Backwards compatibility"
msgstr ""

#: ../../peps/peps/pep-0586.rst:311
msgid ""
"When type checkers add support for Literal, it's important they do so in a "
"way that maximizes backwards-compatibility. Type checkers should ensure that "
"code that used to type check continues to do so after support for Literal is "
"added on a best-effort basis."
msgstr ""

#: ../../peps/peps/pep-0586.rst:316
msgid ""
"This is particularly important when performing type inference. For example, "
"given the statement ``x = \"blue\"``, should the inferred type of ``x`` be "
"``str`` or ``Literal[\"blue\"]``?"
msgstr ""

#: ../../peps/peps/pep-0586.rst:320
msgid ""
"One naive strategy would be to always assume expressions are intended to be "
"Literal types. So, ``x`` would always have an inferred type of "
"``Literal[\"blue\"]`` in the example above. This naive strategy is almost "
"certainly too disruptive -- it would cause programs like the following to "
"start failing when they previously did not::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:334
msgid ""
"Another example of when this strategy would fail is when setting fields in "
"objects::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:347
msgid ""
"An alternative strategy that *does* maintain compatibility in every case "
"would be to always assume expressions are *not* Literal types unless they "
"are explicitly annotated otherwise. A type checker using this strategy would "
"always infer that ``x`` is of type ``str`` in the first example above."
msgstr ""

#: ../../peps/peps/pep-0586.rst:352
msgid ""
"This is not the only viable strategy: type checkers should feel free to "
"experiment with more sophisticated inference techniques. This PEP does not "
"mandate any particular strategy; it only emphasizes the importance of "
"backwards compatibility."
msgstr ""

#: ../../peps/peps/pep-0586.rst:357
msgid "Using non-Literals in Literal contexts"
msgstr ""

#: ../../peps/peps/pep-0586.rst:359
msgid ""
"Literal types follow the existing rules regarding subtyping with no "
"additional special-casing. For example, programs like the following are type "
"safe::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:368
msgid ""
"This also means non-Literal expressions in general should not automatically "
"be cast to Literal. For example::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:377
msgid ""
"**Note:** If the user wants their API to support accepting both literals "
"*and* the original type -- perhaps for legacy purposes -- they should "
"implement a fallback overload. See `Interactions with overloads`_."
msgstr ""

#: ../../peps/peps/pep-0586.rst:382
msgid "Interactions with other types and features"
msgstr ""

#: ../../peps/peps/pep-0586.rst:384
msgid ""
"This section discusses how Literal types interact with other existing types."
msgstr ""

#: ../../peps/peps/pep-0586.rst:387
msgid "Intelligent indexing of structured data"
msgstr ""

#: ../../peps/peps/pep-0586.rst:389
msgid ""
"Literals can be used to \"intelligently index\" into structured types like "
"tuples, NamedTuple, and classes. (Note: this is not an exhaustive list)."
msgstr ""

#: ../../peps/peps/pep-0586.rst:392
msgid ""
"For example, type checkers should infer the correct value type when indexing "
"into a tuple using an int key that corresponds a valid index::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:402
msgid "We expect similar behavior when using functions like getattr::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:419
msgid ""
"**Note:** See `Interactions with Final`_ for a proposal on how we can "
"express the variable declarations above in a more compact manner."
msgstr ""

#: ../../peps/peps/pep-0586.rst:423
msgid "Interactions with overloads"
msgstr ""

#: ../../peps/peps/pep-0586.rst:425
msgid ""
"Literal types and overloads do not need to interact in  a special way: the "
"existing rules work fine."
msgstr ""

#: ../../peps/peps/pep-0586.rst:428
msgid ""
"However, one important use case type checkers must take care to support is "
"the ability to use a *fallback* when the user is not using literal types. "
"For example, consider ``open``::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:447
msgid ""
"If we were to change the signature of ``open`` to use just the first two "
"overloads, we would break any code that does not pass in a literal string "
"expression. For example, code like this would be broken::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:455
msgid ""
"A little more broadly: we propose adding a policy to typeshed that mandates "
"that whenever we add literal types to some existing API, we also always "
"include a fallback overload to maintain backwards-compatibility."
msgstr ""

#: ../../peps/peps/pep-0586.rst:460
msgid "Interactions with generics"
msgstr ""

#: ../../peps/peps/pep-0586.rst:462
msgid ""
"Types like ``Literal[3]`` are meant to be just plain old subclasses of "
"``int``. This means you can use types like ``Literal[3]`` anywhere you could "
"use normal types, such as with generics."
msgstr ""

#: ../../peps/peps/pep-0586.rst:466
msgid ""
"This means that it is legal to parameterize generic functions or classes "
"using Literal types::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:485
msgid ""
"Similarly, it is legal to construct TypeVars with value restrictions or "
"bounds involving Literal types::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:491
msgid ""
"...although it is unclear when it would ever be useful to construct a "
"TypeVar with a Literal upper bound. For example, the ``S`` TypeVar in the "
"above example is essentially pointless: we can get equivalent behavior by "
"using ``S = Literal[\"foo\"]`` instead."
msgstr ""

#: ../../peps/peps/pep-0586.rst:496
msgid ""
"**Note:** Literal types and generics deliberately interact in only very "
"basic and limited ways. In particular, libraries that want to type check "
"code containing a heavy amount of numeric or numpy-style manipulation will "
"almost certainly likely find Literal types as proposed in this PEP to be "
"insufficient for their needs."
msgstr ""

#: ../../peps/peps/pep-0586.rst:502
msgid ""
"We considered several different proposals for fixing this, but ultimately "
"decided to defer the problem of integer generics to a later date. See "
"`Rejected or out-of-scope ideas`_ for more details."
msgstr ""

#: ../../peps/peps/pep-0586.rst:507
msgid "Interactions with enums and exhaustiveness checks"
msgstr ""

#: ../../peps/peps/pep-0586.rst:509
msgid ""
"Type checkers should be capable of performing exhaustiveness checks when "
"working Literal types that have a closed number of variants, such as enums. "
"For example, the type checker should be capable of inferring that the final "
"``else`` statement must be of type ``str``, since all three values of the "
"``Status`` enum have already been exhausted::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:531
msgid ""
"The interaction described above is not new: it's already :pep:`codified "
"within PEP 484 <484#support-for-singleton-types-in-unions>`. However, many "
"type checkers (such as mypy) do not yet implement this due to the expected "
"complexity of the implementation work."
msgstr ""

#: ../../peps/peps/pep-0586.rst:537
msgid ""
"Some of this complexity will be alleviated once Literal types are "
"introduced: rather than entirely special-casing enums, we can instead treat "
"them as being approximately equivalent to the union of their values and take "
"advantage of any existing logic regarding unions, exhaustibility, type "
"narrowing, reachability, and so forth the type checker might have already "
"implemented."
msgstr ""

#: ../../peps/peps/pep-0586.rst:543
msgid ""
"So here, the ``Status`` enum could be treated as being approximately "
"equivalent to ``Literal[Status.SUCCESS, Status.INVALID_DATA, Status."
"FATAL_ERROR]`` and the type of ``s`` narrowed accordingly."
msgstr ""

#: ../../peps/peps/pep-0586.rst:548
msgid "Interactions with narrowing"
msgstr ""

#: ../../peps/peps/pep-0586.rst:550
msgid ""
"Type checkers may optionally perform additional analysis for both enum and "
"non-enum Literal types beyond what is described in the section above."
msgstr ""

#: ../../peps/peps/pep-0586.rst:553
msgid ""
"For example, it may be useful to perform narrowing based on things like "
"containment or equality checks::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:566
msgid ""
"It may also be useful to perform narrowing taking into account expressions "
"involving Literal bools. For example, we can combine ``Literal[True]``, "
"``Literal[False]``, and overloads to construct \"custom type guards\"::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:589
msgid "Interactions with Final"
msgstr ""

#: ../../peps/peps/pep-0586.rst:591
msgid ""
":pep:`591` proposes adding a \"Final\" qualifier to the typing ecosystem. "
"This qualifier can be used to declare that some variable or attribute cannot "
"be reassigned::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:598
msgid ""
"Note that in the example above, we know that ``foo`` will always be equal to "
"exactly ``3``. A type checker can use this information to deduce that "
"``foo`` is valid to use in any context that expects a ``Literal[3]``::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:606
msgid ""
"The ``Final`` qualifier serves as a shorthand for declaring that a variable "
"is *effectively Literal*."
msgstr ""

#: ../../peps/peps/pep-0586.rst:609
msgid ""
"If both this PEP and :pep:`591` are accepted, type checkers are expected to "
"support this shortcut. Specifically, given a variable or attribute "
"assignment of the form ``var: Final = value`` where ``value`` is a valid "
"parameter for ``Literal[...]``, type checkers should understand that ``var`` "
"may be used in any context that expects a ``Literal[value]``."
msgstr ""

#: ../../peps/peps/pep-0586.rst:615
msgid ""
"Type checkers are not obligated to understand any other uses of Final. For "
"example, whether or not the following program type checks is left "
"unspecified::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:627
msgid "Rejected or out-of-scope ideas"
msgstr ""

#: ../../peps/peps/pep-0586.rst:629
msgid ""
"This section outlines some potential features that are explicitly out-of-"
"scope."
msgstr ""

#: ../../peps/peps/pep-0586.rst:632
msgid "True dependent types/integer generics"
msgstr ""

#: ../../peps/peps/pep-0586.rst:634
msgid ""
"This proposal is essentially describing adding a very simplified dependent "
"type system to the :pep:`484` ecosystem. One obvious extension would be to "
"implement a full-fledged dependent type system that lets users predicate "
"types based on their values in arbitrary ways. That would let us write "
"signatures like the below::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:649
msgid ""
"At the very least, it would be useful to add some form of integer generics."
msgstr ""

#: ../../peps/peps/pep-0586.rst:651
msgid ""
"Although such a type system would certainly be useful, it’s out of scope for "
"this PEP: it would require a far more substantial amount of implementation "
"work, discussion, and research to complete compared to the current proposal."
msgstr ""

#: ../../peps/peps/pep-0586.rst:655
msgid ""
"It's entirely possible we'll circle back and revisit this topic in the "
"future: we very likely will need some form of dependent typing along with "
"other extensions like variadic generics to support popular libraries like "
"numpy."
msgstr ""

#: ../../peps/peps/pep-0586.rst:659
msgid ""
"This PEP should be seen as a stepping stone towards this goal, rather than "
"an attempt at providing a comprehensive solution."
msgstr ""

#: ../../peps/peps/pep-0586.rst:663
msgid "Adding more concise syntax"
msgstr ""

#: ../../peps/peps/pep-0586.rst:665
msgid ""
"One objection to this PEP is that having to explicitly write "
"``Literal[...]`` feels verbose. For example, instead of writing::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:671
msgid "...it would be nice to instead write::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:676
msgid ""
"Unfortunately, these abbreviations simply will not work with the existing "
"implementation of ``typing`` at runtime. For example, the following snippet "
"crashes when run using Python 3.7::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:686
msgid "Running this yields the following exception::"
msgstr ""

#: ../../peps/peps/pep-0586.rst:690
msgid ""
"We don’t want users to have to memorize exactly when it’s ok to elide "
"``Literal``, so we require ``Literal`` to always be present."
msgstr ""

#: ../../peps/peps/pep-0586.rst:693
msgid ""
"A little more broadly, we feel overhauling the syntax of types in Python is "
"not within the scope of this PEP: it would be best to have that discussion "
"in a separate PEP, instead of attaching it to this one. So, this PEP "
"deliberately does not try and innovate Python's type syntax."
msgstr ""

#: ../../peps/peps/pep-0586.rst:699
msgid "Backporting the ``Literal`` type"
msgstr ""

#: ../../peps/peps/pep-0586.rst:701
msgid ""
"Once this PEP is accepted, the ``Literal`` type will need to be backported "
"for Python versions that come bundled with older versions of the ``typing`` "
"module. We plan to do this by adding ``Literal`` to the "
"``typing_extensions`` 3rd party module, which contains a variety of other "
"backported types."
msgstr ""

#: ../../peps/peps/pep-0586.rst:707
msgid "Implementation"
msgstr ""

#: ../../peps/peps/pep-0586.rst:709
msgid ""
"The mypy type checker currently has implemented a large subset of the "
"behavior described in this spec, with the exception of enum Literals and "
"some of the more complex narrowing interactions described above."
msgstr ""

#: ../../peps/peps/pep-0586.rst:715
msgid "Related work"
msgstr ""

#: ../../peps/peps/pep-0586.rst:717
msgid ""
"This proposal was written based on the discussion that took place in the "
"following threads:"
msgstr ""

#: ../../peps/peps/pep-0586.rst:720
msgid ""
"`Check that literals belong to/are excluded from a set of values <typing-"
"discussion_>`_"
msgstr ""

#: ../../peps/peps/pep-0586.rst:722
msgid "`Simple dependent types <mypy-discussion_>`_"
msgstr ""

#: ../../peps/peps/pep-0586.rst:724
msgid "`Typing for multi-dimensional arrays <arrays-discussion_>`_"
msgstr ""

#: ../../peps/peps/pep-0586.rst:726
msgid ""
"The overall design of this proposal also ended up converging into something "
"similar to how `literal types are handled in TypeScript <typescript-literal-"
"types_>`_."
msgstr ""

#: ../../peps/peps/pep-0586.rst:742
msgid "Acknowledgements"
msgstr ""

#: ../../peps/peps/pep-0586.rst:744
msgid ""
"Thanks to Mark Mendoza, Ran Benita, Rebecca Chen, and the other members of "
"typing-sig for their comments on this PEP."
msgstr ""

#: ../../peps/peps/pep-0586.rst:747
msgid ""
"Additional thanks to the various participants in the mypy and typing issue "
"trackers, who helped provide a lot of the motivation and reasoning behind "
"this PEP."
msgstr ""

#: ../../peps/peps/pep-0586.rst:753
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/peps/pep-0586.rst:755
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."
