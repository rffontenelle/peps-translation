# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0506.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0506.rst:5
msgid "Steven D'Aprano <steve@pearwood.info>"
msgstr ""

#: ../../peps/pep-0506.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0506.rst:6
msgid "Final"
msgstr ""

#: ../../peps/pep-0506.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0506.rst:7
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0506.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0506.rst:9
msgid "19-Sep-2015"
msgstr ""

#: ../../peps/pep-0506.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-0506.rst:10
msgid "3.6"
msgstr ""

#: ../../peps/pep-0506.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0506.rst:15
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0506.rst:17
msgid ""
"This PEP proposes the addition of a module for common security-related "
"functions such as generating tokens to the Python standard library."
msgstr ""

#: ../../peps/pep-0506.rst:22
msgid "Definitions"
msgstr ""

#: ../../peps/pep-0506.rst:24
msgid "Some common abbreviations used in this proposal:"
msgstr ""

#: ../../peps/pep-0506.rst:26
msgid "PRNG:"
msgstr ""

#: ../../peps/pep-0506.rst:28
msgid ""
"Pseudo Random Number Generator.  A deterministic algorithm used to "
"produce random-looking numbers with certain desirable statistical "
"properties."
msgstr ""

#: ../../peps/pep-0506.rst:32
msgid "CSPRNG:"
msgstr ""

#: ../../peps/pep-0506.rst:34
msgid ""
"Cryptographically Strong Pseudo Random Number Generator.  An algorithm "
"used to produce random-looking numbers which are resistant to prediction."
msgstr ""

#: ../../peps/pep-0506.rst:38
msgid "MT:"
msgstr ""

#: ../../peps/pep-0506.rst:40
msgid ""
"Mersenne Twister.  An extensively studied PRNG which is currently used by"
" the ``random`` module as the default."
msgstr ""

#: ../../peps/pep-0506.rst:45
msgid "Rationale"
msgstr ""

#: ../../peps/pep-0506.rst:47
msgid ""
"This proposal is motivated by concerns that Python's standard library "
"makes it too easy for developers to inadvertently make serious security "
"errors.  Theo de Raadt, the founder of OpenBSD, contacted Guido van "
"Rossum and expressed some concern [#]_ about the use of MT for generating"
" sensitive information such as passwords, secure tokens, session keys and"
" similar."
msgstr ""

#: ../../peps/pep-0506.rst:53
msgid ""
"Although the documentation for the ``random`` module explicitly states "
"that the default is not suitable for security purposes [#]_, it is "
"strongly believed that this warning may be missed, ignored or "
"misunderstood by many Python developers.  In particular:"
msgstr ""

#: ../../peps/pep-0506.rst:58
msgid ""
"developers may not have read the documentation and consequently not seen "
"the warning;"
msgstr ""

#: ../../peps/pep-0506.rst:61
msgid ""
"they may not realise that their specific use of the module has security "
"implications; or"
msgstr ""

#: ../../peps/pep-0506.rst:64
msgid ""
"not realising that there could be a problem, they have copied code (or "
"learned techniques) from websites which don't offer best practises."
msgstr ""

#: ../../peps/pep-0506.rst:68
msgid ""
"The first [#]_ hit when searching for \"python how to generate "
"passwords\" on Google is a tutorial that uses the default functions from "
"the ``random`` module [#]_.  Although it is not intended for use in web "
"applications, it is likely that similar techniques find themselves used "
"in that situation. The second hit is to a StackOverflow question about "
"generating passwords [#]_.  Most of the answers given, including the "
"accepted one, use the default functions.  When one user warned that the "
"default could be easily compromised, they were told \"I think you worry "
"too much.\" [#]_"
msgstr ""

#: ../../peps/pep-0506.rst:77
msgid ""
"This strongly suggests that the existing ``random`` module is an "
"attractive nuisance when it comes to generating (for example) passwords "
"or secure tokens."
msgstr ""

#: ../../peps/pep-0506.rst:81
msgid ""
"Additional motivation (of a more philosophical bent) can be found in the "
"post which first proposed this idea [#]_."
msgstr ""

#: ../../peps/pep-0506.rst:86
msgid "Proposal"
msgstr ""

#: ../../peps/pep-0506.rst:88
msgid ""
"Alternative proposals have focused on the default PRNG in the ``random`` "
"module, with the aim of providing \"secure by default\" cryptographically"
" strong primitives that developers can build upon without thinking about "
"security.  (See Alternatives below.)  This proposes a different approach:"
msgstr ""

#: ../../peps/pep-0506.rst:93
msgid ""
"The standard library already provides cryptographically strong "
"primitives, but many users don't know they exist or when to use them."
msgstr ""

#: ../../peps/pep-0506.rst:96
msgid ""
"Instead of requiring crypto-naive users to write secure code, the "
"standard library should include a set of ready-to-use \"batteries\" for "
"the most common needs, such as generating secure tokens.  This code will "
"both directly satisfy a need (\"How do I generate a password reset "
"token?\"), and act as an example of acceptable practises which developers"
" can learn from [#]_."
msgstr ""

#: ../../peps/pep-0506.rst:103
msgid ""
"To do this, this PEP proposes that we add a new module to the standard "
"library, with the suggested name ``secrets``.  This module will contain a"
" set of ready-to-use functions for common activities with security "
"implications, together with some lower-level primitives."
msgstr ""

#: ../../peps/pep-0506.rst:108
msgid ""
"The suggestion is that ``secrets`` becomes the go-to module for dealing "
"with anything which should remain secret (passwords, tokens, etc.) while "
"the ``random`` module remains backward-compatible."
msgstr ""

#: ../../peps/pep-0506.rst:114
msgid "API and Implementation"
msgstr ""

#: ../../peps/pep-0506.rst:116
msgid "This PEP proposes the following functions for the ``secrets`` module:"
msgstr ""

#: ../../peps/pep-0506.rst:118
msgid ""
"Functions for generating tokens suitable for use in (e.g.) password "
"recovery, as session keys, etc., in the following formats:"
msgstr ""

#: ../../peps/pep-0506.rst:121
msgid "as bytes, ``secrets.token_bytes``;"
msgstr ""

#: ../../peps/pep-0506.rst:122
msgid "as text, using hexadecimal digits, ``secrets.token_hex``;"
msgstr ""

#: ../../peps/pep-0506.rst:123
msgid "as text, using URL-safe base-64 encoding, ``secrets.token_urlsafe``."
msgstr ""

#: ../../peps/pep-0506.rst:125
msgid ""
"A limited interface to the system CSPRNG, using either ``os.urandom`` "
"directly or ``random.SystemRandom``.  Unlike the ``random`` module, this "
"does not need to provide methods for seeding, getting or setting the "
"state, or any non-uniform distributions.  It should provide the "
"following:"
msgstr ""

#: ../../peps/pep-0506.rst:131
msgid "A function for choosing items from a sequence, ``secrets.choice``."
msgstr ""

#: ../../peps/pep-0506.rst:132
msgid ""
"A function for generating a given number of random bits and/or bytes as "
"an integer, ``secrets.randbits``."
msgstr ""

#: ../../peps/pep-0506.rst:134
msgid ""
"A function for returning a random integer in the half-open range 0 to the"
" given upper limit, ``secrets.randbelow`` [#]_."
msgstr ""

#: ../../peps/pep-0506.rst:137
msgid ""
"A function for comparing text or bytes digests for equality while being "
"resistant to timing attacks, ``secrets.compare_digest``."
msgstr ""

#: ../../peps/pep-0506.rst:140
msgid ""
"The consensus appears to be that there is no need to add a new CSPRNG to "
"the ``random`` module to support these uses, ``SystemRandom`` will be "
"sufficient."
msgstr ""

#: ../../peps/pep-0506.rst:144
msgid ""
"Some illustrative implementations have been given by Alyssa (Nick) "
"Coghlan [#]_ and a minimalist API by Tim Peters [#]_. This idea has also "
"been discussed on the issue tracker for the \"cryptography\" module [#]_."
"  The following pseudo-code should be taken as the starting point for the"
" real implementation::"
msgstr ""

#: ../../peps/pep-0506.rst:176
msgid ""
"The ``secrets`` module itself will be pure Python, and other Python "
"implementations can easily make use of it unchanged, or adapt it as "
"necessary. An implementation can be found on BitBucket [#]_."
msgstr ""

#: ../../peps/pep-0506.rst:181
msgid "Default arguments"
msgstr ""

#: ../../peps/pep-0506.rst:183
msgid ""
"One difficult question is \"How many bytes should my token be?\".  We can"
" help with this question by providing a default amount of entropy for the"
" \"token_*\" functions. If the ``nbytes`` argument is None or not given, "
"the default entropy will be used. This default value should be large "
"enough to be expected to be secure for medium-security uses, but is "
"expected to change in the future, possibly even in a maintenance release "
"[#]_."
msgstr ""

#: ../../peps/pep-0506.rst:191
msgid "Naming conventions"
msgstr ""

#: ../../peps/pep-0506.rst:193
msgid ""
"One question is the naming conventions used in the module [#]_, whether "
"to use C-like naming conventions such as \"randrange\" or more Pythonic "
"names such as \"random_range\"."
msgstr ""

#: ../../peps/pep-0506.rst:197
msgid ""
"Functions which are simply bound methods of the private ``SystemRandom`` "
"instance (e.g. ``randrange``), or a thin wrapper around such, should keep"
" the familiar names. Those which are something new (such as the various "
"``token_*`` functions) will use more Pythonic names."
msgstr ""

#: ../../peps/pep-0506.rst:203
msgid "Alternatives"
msgstr ""

#: ../../peps/pep-0506.rst:205
msgid ""
"One alternative is to change the default PRNG provided by the ``random`` "
"module [#]_.  This received considerable scepticism and outright "
"opposition:"
msgstr ""

#: ../../peps/pep-0506.rst:208
msgid ""
"There is fear that a CSPRNG may be slower than the current PRNG (which in"
" the case of MT is already quite slow)."
msgstr ""

#: ../../peps/pep-0506.rst:211
msgid ""
"Some applications (such as scientific simulations, and replaying "
"gameplay) require the ability to seed the PRNG into a known state, which "
"a CSPRNG lacks by design."
msgstr ""

#: ../../peps/pep-0506.rst:215
msgid ""
"Another major use of the ``random`` module is for simple \"guess a "
"number\" games written by beginners, and many people are loath to make "
"any change to the ``random`` module which may make that harder."
msgstr ""

#: ../../peps/pep-0506.rst:219
msgid ""
"Although there is no proposal to remove MT from the ``random`` module, "
"there was considerable hostility to the idea of having to opt-in to a "
"non-CSPRNG or any backwards-incompatible changes."
msgstr ""

#: ../../peps/pep-0506.rst:223
msgid ""
"Demonstrated attacks against MT are typically against PHP applications. "
"It is believed that PHP's version of MT is a significantly softer target "
"than Python's version, due to a poor seeding technique [#]_.  "
"Consequently, without a proven attack against Python applications, many "
"people object to a backwards-incompatible change."
msgstr ""

#: ../../peps/pep-0506.rst:229
msgid ""
"Alyssa Coghlan made an :pep:`earlier suggestion <504>` for a globally "
"configurable PRNG which uses the system CSPRNG by default, but has since "
"withdrawn it in favour of this proposal."
msgstr ""

#: ../../peps/pep-0506.rst:236
msgid "Comparison To Other Languages"
msgstr ""

#: ../../peps/pep-0506.rst:238
msgid "PHP"
msgstr ""

#: ../../peps/pep-0506.rst:240
msgid ""
"PHP includes a function ``uniqid`` [#]_ which by default returns a "
"thirteen character string based on the current time in microseconds. "
"Translated into Python syntax, it has the following signature::"
msgstr ""

#: ../../peps/pep-0506.rst:246
msgid ""
"The PHP documentation warns that this function is not suitable for "
"security purposes.  Nevertheless, various mature, well-known PHP "
"applications use it for that purpose (citation needed)."
msgstr ""

#: ../../peps/pep-0506.rst:250
msgid ""
"PHP 5.3 and better also includes a function "
"``openssl_random_pseudo_bytes`` [#]_.  Translated into Python syntax, it "
"has roughly the following signature::"
msgstr ""

#: ../../peps/pep-0506.rst:256
msgid ""
"This function returns a pseudo-random string of bytes of the given "
"length, and a boolean flag giving whether the string is considered "
"cryptographically strong.  The PHP manual suggests that returning "
"anything but True should be rare except for old or broken platforms."
msgstr ""

#: ../../peps/pep-0506.rst:261
msgid "JavaScript"
msgstr ""

#: ../../peps/pep-0506.rst:263
msgid ""
"Based on a rather cursory search [#]_, there do not appear to be any "
"well-known standard functions for producing strong random values in "
"JavaScript. ``Math.random`` is often used, despite serious weaknesses "
"making it unsuitable for cryptographic purposes [#]_. In recent years the"
" majority of browsers have gained support for "
"``window.crypto.getRandomValues`` [#]_."
msgstr ""

#: ../../peps/pep-0506.rst:269
msgid ""
"Node.js offers a rich cryptographic module, ``crypto`` [#]_, most of "
"which is beyond the scope of this PEP. It does include a single function "
"for generating random bytes, ``crypto.randomBytes``."
msgstr ""

#: ../../peps/pep-0506.rst:273
msgid "Ruby"
msgstr ""

#: ../../peps/pep-0506.rst:275
msgid ""
"The Ruby standard library includes a module ``SecureRandom`` [#]_ which "
"includes the following methods:"
msgstr ""

#: ../../peps/pep-0506.rst:278
msgid "base64 - returns a Base64 encoded random string."
msgstr ""

#: ../../peps/pep-0506.rst:280
msgid "hex - returns a random hexadecimal string."
msgstr ""

#: ../../peps/pep-0506.rst:282
msgid "random_bytes - returns a random byte string."
msgstr ""

#: ../../peps/pep-0506.rst:284
msgid ""
"random_number - depending on the argument, returns either a random "
"integer in the range(0, n), or a random float between 0.0 and 1.0."
msgstr ""

#: ../../peps/pep-0506.rst:287
msgid "urlsafe_base64 - returns a random URL-safe Base64 encoded string."
msgstr ""

#: ../../peps/pep-0506.rst:289
msgid "uuid - return a version 4 random Universally Unique IDentifier."
msgstr ""

#: ../../peps/pep-0506.rst:293
msgid "What Should Be The Name Of The Module?"
msgstr ""

#: ../../peps/pep-0506.rst:295
msgid ""
"There was a proposal to add a \"random.safe\" submodule, quoting the Zen "
"of Python \"Namespaces are one honking great idea\" koan.  However, the "
"author of the Zen, Tim Peters, has come out against this idea [#]_, and "
"recommends a top-level module."
msgstr ""

#: ../../peps/pep-0506.rst:300
msgid ""
"In discussion on the python-ideas mailing list so far, the name "
"\"secrets\" has received some approval, and no strong opposition."
msgstr ""

#: ../../peps/pep-0506.rst:303
msgid ""
"There is already an existing third-party module with the same name [#]_, "
"but it appears to be unused and abandoned."
msgstr ""

#: ../../peps/pep-0506.rst:308
msgid "Frequently Asked Questions"
msgstr ""

#: ../../peps/pep-0506.rst:310
msgid ""
"Q: Is this a real problem? Surely MT is random enough that nobody can "
"predict its output."
msgstr ""

#: ../../peps/pep-0506.rst:313
msgid ""
"A: The consensus among security professionals is that MT is not safe in "
"security contexts.  It is not difficult to reconstruct the internal state"
" of MT [#]_ [#]_ and so predict all past and future values.  There are a "
"number of known, practical attacks on systems using MT for randomness "
"[#]_."
msgstr ""

#: ../../peps/pep-0506.rst:319
msgid ""
"Q: Attacks on PHP are one thing, but are there any known attacks on "
"Python software?"
msgstr ""

#: ../../peps/pep-0506.rst:322
msgid ""
"A: Yes.  There have been vulnerabilities in Zope and Plone at the very "
"least.  Hanno Schlichting commented [#]_::"
msgstr ""

#: ../../peps/pep-0506.rst:336
msgid ""
"Christian Heimes reported this issue to the Zope security team in 2012 "
"[#]_, there are at least two related CVE vulnerabilities [#]_, and at "
"least one work-around for this issue in Django [#]_."
msgstr ""

#: ../../peps/pep-0506.rst:340
msgid ""
"Q: Is this an alternative to specialist cryptographic software such as "
"SSL?"
msgstr ""

#: ../../peps/pep-0506.rst:342
msgid ""
"A: No. This is a \"batteries included\" solution, not a full-featured "
"\"nuclear reactor\".  It is intended to mitigate against some basic "
"security errors, not be a solution to all security-related issues. To "
"quote Alyssa Coghlan referring to her earlier proposal [#]_::"
msgstr ""

#: ../../peps/pep-0506.rst:353
msgid "Q: What about a password generator?"
msgstr ""

#: ../../peps/pep-0506.rst:355
msgid ""
"A: The consensus is that the requirements for password generators are too"
" variable for it to be a good match for the standard library [#]_. No "
"password generator will be included in the initial release of the module,"
" instead it will be given in the documentation as a recipe (à la the "
"recipes in the ``itertools`` module) [#]_."
msgstr ""

#: ../../peps/pep-0506.rst:361
msgid ""
"Q: Will ``secrets`` use /dev/random (which blocks) or /dev/urandom (which"
" doesn't block) on Linux? What about other platforms?"
msgstr ""

#: ../../peps/pep-0506.rst:364
msgid ""
"A: ``secrets`` will be based on ``os.urandom`` and "
"``random.SystemRandom``, which are interfaces to your operating system's "
"best source of cryptographic randomness. On Linux, that may be "
"``/dev/urandom`` [#]_, on Windows it may be ``CryptGenRandom()``, but see"
" the documentation and/or source code for the detailed implementation "
"details."
msgstr ""

#: ../../peps/pep-0506.rst:372
msgid "References"
msgstr "Referências"

#: ../../peps/pep-0506.rst:374
msgid "https://mail.python.org/pipermail/python-ideas/2015-September/035820.html"
msgstr ""

#: ../../peps/pep-0506.rst:376
msgid "https://docs.python.org/3/library/random.html"
msgstr ""

#: ../../peps/pep-0506.rst:378
msgid ""
"As of the date of writing. Also, as Google search terms may be "
"automatically customised for the user without their knowledge, some "
"readers may see different results."
msgstr ""

#: ../../peps/pep-0506.rst:382
msgid "http://interactivepython.org/runestone/static/everyday/2013/01/3_password.html"
msgstr ""

#: ../../peps/pep-0506.rst:384
msgid "http://stackoverflow.com/questions/3854692/generate-password-in-python"
msgstr ""

#: ../../peps/pep-0506.rst:386
msgid ""
"http://stackoverflow.com/questions/3854692/generate-password-in-"
"python/3854766#3854766"
msgstr ""

#: ../../peps/pep-0506.rst:388
msgid "https://mail.python.org/pipermail/python-ideas/2015-September/036238.html"
msgstr ""

#: ../../peps/pep-0506.rst:390
msgid ""
"At least those who are motivated to read the source code and "
"documentation."
msgstr ""

#: ../../peps/pep-0506.rst:392
msgid ""
"After considerable discussion, Guido ruled that the module need only "
"provide ``randbelow``, and not similar functions ``randrange`` or "
"``randint``.  http://code.activestate.com/lists/python-dev/138375/"
msgstr ""

#: ../../peps/pep-0506.rst:396
msgid "https://mail.python.org/pipermail/python-ideas/2015-September/036271.html"
msgstr ""

#: ../../peps/pep-0506.rst:398
msgid "https://mail.python.org/pipermail/python-ideas/2015-September/036350.html"
msgstr ""

#: ../../peps/pep-0506.rst:400
msgid "https://github.com/pyca/cryptography/issues/2347"
msgstr ""

#: ../../peps/pep-0506.rst:402
msgid "https://bitbucket.org/sdaprano/secrets"
msgstr ""

#: ../../peps/pep-0506.rst:404
msgid ""
"https://mail.python.org/pipermail/python-ideas/2015-September/036517.html"
" https://mail.python.org/pipermail/python-"
"ideas/2015-September/036515.html"
msgstr ""

#: ../../peps/pep-0506.rst:407
msgid "https://mail.python.org/pipermail/python-ideas/2015-September/036474.html"
msgstr ""

#: ../../peps/pep-0506.rst:409
msgid "Link needed."
msgstr ""

#: ../../peps/pep-0506.rst:411
msgid ""
"By default PHP seeds the MT PRNG with the time (citation needed), which "
"is exploitable by attackers, while Python seeds the PRNG with output from"
" the system CSPRNG, which is believed to be much harder to exploit."
msgstr ""

#: ../../peps/pep-0506.rst:416
msgid "http://php.net/manual/en/function.uniqid.php"
msgstr ""

#: ../../peps/pep-0506.rst:418
msgid "http://php.net/manual/en/function.openssl-random-pseudo-bytes.php"
msgstr ""

#: ../../peps/pep-0506.rst:420
msgid "Volunteers and patches are welcome."
msgstr ""

#: ../../peps/pep-0506.rst:422
msgid "http://ifsec.blogspot.fr/2012/05/cross-domain-mathrandom-prediction.html"
msgstr ""

#: ../../peps/pep-0506.rst:424
msgid ""
"https://developer.mozilla.org/en-"
"US/docs/Web/API/RandomSource/getRandomValues"
msgstr ""

#: ../../peps/pep-0506.rst:426
msgid "https://nodejs.org/api/crypto.html"
msgstr ""

#: ../../peps/pep-0506.rst:428
msgid ""
"http://ruby-"
"doc.org/stdlib-2.1.2/libdoc/securerandom/rdoc/SecureRandom.html"
msgstr ""

#: ../../peps/pep-0506.rst:430
msgid "https://mail.python.org/pipermail/python-ideas/2015-September/036254.html"
msgstr ""

#: ../../peps/pep-0506.rst:432
msgid "https://pypi.python.org/pypi/secrets"
msgstr ""

#: ../../peps/pep-0506.rst:434
msgid "https://jazzy.id.au/2010/09/22/cracking_random_number_generators_part_3.html"
msgstr ""

#: ../../peps/pep-0506.rst:436
msgid "https://mail.python.org/pipermail/python-ideas/2015-September/036077.html"
msgstr ""

#: ../../peps/pep-0506.rst:438
msgid ""
"https://media.blackhat.com/bh-"
"us-12/Briefings/Argyros/BH_US_12_Argyros_PRNG_WP.pdf"
msgstr ""

#: ../../peps/pep-0506.rst:440
msgid "Personal communication, 2016-08-24."
msgstr ""

#: ../../peps/pep-0506.rst:442
msgid "https://bugs.launchpad.net/zope2/+bug/1071067"
msgstr ""

#: ../../peps/pep-0506.rst:444
msgid ""
"http://www.cvedetails.com/cve/CVE-2012-5508/ "
"http://www.cvedetails.com/cve/CVE-2012-6661/"
msgstr ""

#: ../../peps/pep-0506.rst:447
msgid "https://github.com/django/django/commit/1525874238fd705ec17a066291935a9316bd3044"
msgstr ""

#: ../../peps/pep-0506.rst:449
msgid "https://mail.python.org/pipermail/python-ideas/2015-September/036157.html"
msgstr ""

#: ../../peps/pep-0506.rst:451
msgid ""
"https://mail.python.org/pipermail/python-ideas/2015-September/036476.html"
" https://mail.python.org/pipermail/python-"
"ideas/2015-September/036478.html"
msgstr ""

#: ../../peps/pep-0506.rst:454
msgid "https://mail.python.org/pipermail/python-ideas/2015-September/036488.html"
msgstr ""

#: ../../peps/pep-0506.rst:456
msgid ""
"http://sockpuppet.org/blog/2014/02/25/safely-generate-random-numbers/ "
"http://www.2uo.de/myths-about-urandom/"
msgstr ""

#: ../../peps/pep-0506.rst:461
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0506.rst:463
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid ""
#~ "Some illustrative implementations have been"
#~ " given by Nick Coghlan [#]_ and "
#~ "a minimalist API by Tim Peters "
#~ "[#]_. This idea has also been "
#~ "discussed on the issue tracker for "
#~ "the \"cryptography\" module [#]_.  The "
#~ "following pseudo-code should be taken"
#~ " as the starting point for the "
#~ "real implementation::"
#~ msgstr ""

#~ msgid ""
#~ "Nick Coghlan made an :pep:`earlier "
#~ "suggestion <504>` for a globally "
#~ "configurable PRNG which uses the system"
#~ " CSPRNG by default, but has since "
#~ "withdrawn it in favour of this "
#~ "proposal."
#~ msgstr ""

#~ msgid ""
#~ "A: No. This is a \"batteries "
#~ "included\" solution, not a full-featured"
#~ " \"nuclear reactor\".  It is intended "
#~ "to mitigate against some basic security"
#~ " errors, not be a solution to "
#~ "all security-related issues. To quote"
#~ " Nick Coghlan referring to his "
#~ "earlier proposal [#]_::"
#~ msgstr ""

