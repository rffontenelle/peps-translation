# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0366.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0366.rst:5
msgid "Alyssa Coghlan <ncoghlan@gmail.com>"
msgstr ""

#: ../../peps/pep-0366.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0366.rst:6
msgid "Final"
msgstr ""

#: ../../peps/pep-0366.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0366.rst:7
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0366.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0366.rst:9
msgid "01-May-2007"
msgstr ""

#: ../../peps/pep-0366.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-0366.rst:10
msgid "2.6, 3.0"
msgstr ""

#: ../../peps/pep-0366.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0366.rst:11
msgid "01-May-2007, 04-Jul-2007, 07-Jul-2007, 23-Nov-2007"
msgstr ""

#: ../../peps/pep-0366.rst:15
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0366.rst:17
msgid ""
"This PEP proposes a backwards compatible mechanism that permits the use "
"of explicit relative imports from executable modules within packages. "
"Such imports currently fail due to an awkward interaction between "
":pep:`328` and :pep:`338`."
msgstr ""

#: ../../peps/pep-0366.rst:22
msgid ""
"By adding a new module level attribute, this PEP allows relative imports "
"to work automatically if the module is executed using the ``-m`` switch. "
"A small amount of boilerplate in the module itself will allow the "
"relative imports to work when the file is executed by name."
msgstr ""

#: ../../peps/pep-0366.rst:27
msgid "Guido accepted the PEP in November 2007 [5]_."
msgstr ""

#: ../../peps/pep-0366.rst:30
msgid "Proposed Change"
msgstr ""

#: ../../peps/pep-0366.rst:32
msgid ""
"The major proposed change is the introduction of a new module level "
"attribute, ``__package__``. When it is present, relative imports will be "
"based on this attribute rather than the module ``__name__`` attribute."
msgstr ""

#: ../../peps/pep-0366.rst:37
msgid ""
"As with the current ``__name__`` attribute, setting ``__package__`` will "
"be the responsibility of the :pep:`302` loader used to import a module. "
"Loaders which use ``imp.new_module()`` to create the module object will "
"have the new attribute set automatically to ``None``. When the import "
"system encounters an explicit relative import in a module without "
"``__package__`` set (or with it set to ``None``), it will calculate and "
"store the correct value (``__name__.rpartition('.')[0]`` for normal "
"modules and ``__name__`` for package initialisation modules). If "
"``__package__`` has already been set then the import system will use it "
"in preference to recalculating the package name from the ``__name__`` and"
" ``__path__`` attributes."
msgstr ""

#: ../../peps/pep-0366.rst:49
msgid ""
"The ``runpy`` module will explicitly set the new attribute, basing it off"
" the name used to locate the module to be executed rather than the name "
"used to set the module's ``__name__`` attribute. This will allow relative"
" imports to work correctly from main modules executed with the ``-m`` "
"switch."
msgstr ""

#: ../../peps/pep-0366.rst:55
msgid ""
"When the main module is specified by its filename, then the "
"``__package__`` attribute will be set to ``None``. To allow relative "
"imports when the module is executed directly, boilerplate similar to the "
"following would be needed before the first relative import statement::"
msgstr ""

#: ../../peps/pep-0366.rst:64
msgid ""
"Note that this boilerplate is sufficient only if the top level package is"
" already accessible via ``sys.path``. Additional code that manipulates "
"``sys.path`` would be needed in order for direct execution to work "
"without the top level package already being importable."
msgstr ""

#: ../../peps/pep-0366.rst:69
msgid ""
"This approach also has the same disadvantage as the use of absolute "
"imports of sibling modules - if the script is moved to a different "
"package or subpackage, the boilerplate will need to be updated manually. "
"It has the advantage that this change need only be made once per file, "
"regardless of the number of relative imports."
msgstr ""

#: ../../peps/pep-0366.rst:75
msgid ""
"Note that setting ``__package__`` to the empty string explicitly is "
"permitted, and has the effect of disabling all relative imports from that"
" module (since the import machinery will consider it to be a top level "
"module in that case). This means that tools like ``runpy`` do not need to"
" provide special case handling for top level modules when setting "
"``__package__``."
msgstr ""

#: ../../peps/pep-0366.rst:83
msgid "Rationale for Change"
msgstr ""

#: ../../peps/pep-0366.rst:85
msgid ""
"The current inability to use explicit relative imports from the main "
"module is the subject of at least one open SF bug report (#1510172) [1]_,"
" and has most likely been a factor in at least a few queries on "
"comp.lang.python (such as Alan Isaac's question in [2]_)."
msgstr ""

#: ../../peps/pep-0366.rst:90
msgid ""
"This PEP is intended to provide a solution which permits explicit "
"relative imports from main modules, without incurring any significant "
"costs during interpreter startup or normal module import."
msgstr ""

#: ../../peps/pep-0366.rst:94
msgid ""
"The section in :pep:`338` on relative imports and the main module "
"provides further details and background on this problem."
msgstr ""

#: ../../peps/pep-0366.rst:99
msgid "Reference Implementation"
msgstr ""

#: ../../peps/pep-0366.rst:101
msgid ""
"Rev 47142 in SVN implemented an early variant of this proposal which "
"stored the main module's real module name in the ``__module_name__`` "
"attribute. It was reverted due to the fact that 2.5 was already in beta "
"by that time."
msgstr ""

#: ../../peps/pep-0366.rst:106
msgid "Patch 1487 [4]_ is the proposed implementation for this PEP."
msgstr ""

#: ../../peps/pep-0366.rst:109
msgid "Alternative Proposals"
msgstr ""

#: ../../peps/pep-0366.rst:111
msgid ""
":pep:`3122` proposed addressing this problem by changing the way the main"
" module is identified. That's a significant compatibility cost to incur "
"to fix something that is a pretty minor bug in the overall scheme of "
"things, and the PEP was rejected [3]_."
msgstr ""

#: ../../peps/pep-0366.rst:116
msgid ""
"The advantage of the proposal in this PEP is that its only impact on "
"normal code is the small amount of time needed to set the extra attribute"
" when importing a module. Relative imports themselves should be sped up "
"fractionally, as the package name is cached in the module globals, rather"
" than having to be worked out again for each relative import."
msgstr ""

#: ../../peps/pep-0366.rst:125
msgid "References"
msgstr "Referências"

#: ../../peps/pep-0366.rst:127
msgid ""
"Absolute/relative import not working? "
"(https://github.com/python/cpython/issues/43535)"
msgstr ""

#: ../../peps/pep-0366.rst:130
msgid ""
"c.l.p. question about modules and relative imports "
"(http://groups.google.com/group/comp.lang.python/browse_thread/thread/c44c769a72ca69fa/)"
msgstr ""

#: ../../peps/pep-0366.rst:133
msgid ""
"Guido's rejection of PEP 3122 "
"(https://mail.python.org/pipermail/python-3000/2007-April/006793.html)"
msgstr ""

#: ../../peps/pep-0366.rst:136
msgid ""
"PEP 366 implementation patch "
"(https://github.com/python/cpython/issues/45828)"
msgstr ""

#: ../../peps/pep-0366.rst:139
msgid ""
"Acceptance of the PEP (https://mail.python.org/pipermail/python-"
"dev/2007-November/075475.html)"
msgstr ""

#: ../../peps/pep-0366.rst:143
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0366.rst:145
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid "Nick Coghlan <ncoghlan@gmail.com>"
#~ msgstr ""

