# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0440.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0440.rst:3
msgid "Alyssa Coghlan <ncoghlan@gmail.com>, Donald Stufft <donald@stufft.io>"
msgstr ""

#: ../../peps/pep-0440.rst
msgid "BDFL-Delegate"
msgstr ""

#: ../../peps/pep-0440.rst:5
msgid "Alyssa Coghlan <ncoghlan@gmail.com>"
msgstr ""

#: ../../peps/pep-0440.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/pep-0440.rst:6
msgid "distutils-sig@python.org"
msgstr ""

#: ../../peps/pep-0440.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0440.rst:7
msgid "Final"
msgstr ""

#: ../../peps/pep-0440.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0440.rst:8
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0440.rst
msgid "Topic"
msgstr ""

#: ../../peps/pep-0440.rst:9
msgid "Packaging"
msgstr ""

#: ../../peps/pep-0440.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0440.rst:11
msgid "18-Mar-2013"
msgstr ""

#: ../../peps/pep-0440.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0440.rst:12
msgid ""
"30-Mar-2013, 27-May-2013, 20-Jun-2013, 21-Dec-2013, 28-Jan-2014, "
"08-Aug-2014, 22-Aug-2014"
msgstr ""

#: ../../peps/pep-0440.rst
msgid "Replaces"
msgstr ""

#: ../../peps/pep-0440.rst:15
msgid "386"
msgstr ""

#: ../../peps/pep-0440.rst
msgid "Resolution"
msgstr ""

#: ../../peps/pep-0440.rst:16
msgid "https://mail.python.org/pipermail/distutils-sig/2014-August/024673.html"
msgstr ""

#: ../../peps/pep-0440.rst:22
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0440.rst:24
msgid ""
"This PEP describes a scheme for identifying versions of Python software "
"distributions, and declaring dependencies on particular versions."
msgstr ""

#: ../../peps/pep-0440.rst:27
msgid ""
"This document addresses several limitations of the previous attempt at a "
"standardized approach to versioning, as described in :pep:`345` and "
":pep:`386`."
msgstr ""

#: ../../peps/pep-0440.rst:32
msgid "Definitions"
msgstr ""

#: ../../peps/pep-0440.rst:34
msgid ""
"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL "
"NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and "
"\"OPTIONAL\" in this document are to be interpreted as described in "
":rfc:`2119`."
msgstr ""

#: ../../peps/pep-0440.rst:38
msgid ""
"\"Projects\" are software components that are made available for "
"integration. Projects include Python libraries, frameworks, scripts, "
"plugins, applications, collections of data or other resources, and "
"various combinations thereof. Public Python projects are typically "
"registered on the `Python Package Index <https://pypi.org/>`__."
msgstr ""

#: ../../peps/pep-0440.rst:44
msgid "\"Releases\" are uniquely identified snapshots of a project."
msgstr ""

#: ../../peps/pep-0440.rst:46
msgid ""
"\"Distributions\" are the packaged files which are used to publish and "
"distribute a release."
msgstr ""

#: ../../peps/pep-0440.rst:49
msgid ""
"\"Build tools\" are automated tools intended to run on development "
"systems, producing source and binary distribution archives. Build tools "
"may also be invoked by integration tools in order to build software "
"distributed as sdists rather than prebuilt binary archives."
msgstr ""

#: ../../peps/pep-0440.rst:54
msgid ""
"\"Index servers\" are active distribution registries which publish "
"version and dependency metadata and place constraints on the permitted "
"metadata."
msgstr ""

#: ../../peps/pep-0440.rst:57
msgid ""
"\"Publication tools\" are automated tools intended to run on development "
"systems and upload source and binary distribution archives to index "
"servers."
msgstr ""

#: ../../peps/pep-0440.rst:60
msgid ""
"\"Installation tools\" are integration tools specifically intended to run"
" on deployment targets, consuming source and binary distribution archives"
" from an index server or other designated location and deploying them to "
"the target system."
msgstr ""

#: ../../peps/pep-0440.rst:65
msgid ""
"\"Automated tools\" is a collective term covering build tools, index "
"servers, publication tools, integration tools and any other software that"
" produces or consumes distribution version and dependency metadata."
msgstr ""

#: ../../peps/pep-0440.rst:70
msgid "Version scheme"
msgstr ""

#: ../../peps/pep-0440.rst:72
msgid ""
"Distributions are identified by a public version identifier which "
"supports all defined version comparison operations"
msgstr ""

#: ../../peps/pep-0440.rst:75
msgid ""
"The version scheme is used both to describe the distribution version "
"provided by a particular distribution archive, as well as to place "
"constraints on the version of dependencies needed in order to build or "
"run the software."
msgstr ""

#: ../../peps/pep-0440.rst:82
msgid "Public version identifiers"
msgstr ""

#: ../../peps/pep-0440.rst:84
msgid ""
"The canonical public version identifiers MUST comply with the following "
"scheme::"
msgstr ""

#: ../../peps/pep-0440.rst:89
msgid ""
"Public version identifiers MUST NOT include leading or trailing "
"whitespace."
msgstr ""

#: ../../peps/pep-0440.rst:91
msgid "Public version identifiers MUST be unique within a given distribution."
msgstr ""

#: ../../peps/pep-0440.rst:93
msgid ""
"Installation tools SHOULD ignore any public versions which do not comply "
"with this scheme but MUST also include the normalizations specified "
"below. Installation tools MAY warn the user when non-compliant or "
"ambiguous versions are detected."
msgstr ""

#: ../../peps/pep-0440.rst:98
msgid ""
"See also ``Appendix B : Parsing version strings with regular "
"expressions`` which provides a regular expression to check strict "
"conformance with the canonical format, as well as a more permissive "
"regular expression accepting inputs that may require subsequent "
"normalization."
msgstr ""

#: ../../peps/pep-0440.rst:103
msgid "Public version identifiers are separated into up to five segments:"
msgstr ""

#: ../../peps/pep-0440.rst:105
msgid "Epoch segment: ``N!``"
msgstr ""

#: ../../peps/pep-0440.rst:106
msgid "Release segment: ``N(.N)*``"
msgstr ""

#: ../../peps/pep-0440.rst:107
msgid "Pre-release segment: ``{a|b|rc}N``"
msgstr ""

#: ../../peps/pep-0440.rst:108
msgid "Post-release segment: ``.postN``"
msgstr ""

#: ../../peps/pep-0440.rst:109
msgid "Development release segment: ``.devN``"
msgstr ""

#: ../../peps/pep-0440.rst:111
msgid ""
"Any given release will be a \"final release\", \"pre-release\", \"post-"
"release\" or \"developmental release\" as defined in the following "
"sections."
msgstr ""

#: ../../peps/pep-0440.rst:114
msgid ""
"All numeric components MUST be non-negative integers represented as "
"sequences of ASCII digits."
msgstr ""

#: ../../peps/pep-0440.rst:117
msgid ""
"All numeric components MUST be interpreted and ordered according to their"
" numeric value, not as text strings."
msgstr ""

#: ../../peps/pep-0440.rst:120
msgid ""
"All numeric components MAY be zero. Except as described below for the "
"release segment, a numeric component of zero has no special significance "
"aside from always being the lowest possible value in the version "
"ordering."
msgstr ""

#: ../../peps/pep-0440.rst:126
msgid ""
"Some hard to read version identifiers are permitted by this scheme in "
"order to better accommodate the wide range of versioning practices across"
" existing public and private Python projects."
msgstr ""

#: ../../peps/pep-0440.rst:130
msgid ""
"Accordingly, some of the versioning practices which are technically "
"permitted by the PEP are strongly discouraged for new projects. Where "
"this is the case, the relevant details are noted in the following "
"sections."
msgstr ""

#: ../../peps/pep-0440.rst:137
msgid "Local version identifiers"
msgstr ""

#: ../../peps/pep-0440.rst:139
msgid "Local version identifiers MUST comply with the following scheme::"
msgstr ""

#: ../../peps/pep-0440.rst:143
msgid ""
"They consist of a normal public version identifier (as defined in the "
"previous section), along with an arbitrary \"local version label\", "
"separated from the public version identifier by a plus. Local version "
"labels have no specific semantics assigned, but some syntactic "
"restrictions are imposed."
msgstr ""

#: ../../peps/pep-0440.rst:148
msgid ""
"Local version identifiers are used to denote fully API (and, if "
"applicable, ABI) compatible patched versions of upstream projects. For "
"example, these may be created by application developers and system "
"integrators by applying specific backported bug fixes when upgrading to a"
" new upstream release would be too disruptive to the application or other"
" integrated system (such as a Linux distribution)."
msgstr ""

#: ../../peps/pep-0440.rst:155
msgid ""
"The inclusion of the local version label makes it possible to "
"differentiate upstream releases from potentially altered rebuilds by "
"downstream integrators. The use of a local version identifier does not "
"affect the kind of a release but, when applied to a source distribution, "
"does indicate that it may not contain the exact same code as the "
"corresponding upstream release."
msgstr ""

#: ../../peps/pep-0440.rst:161
msgid ""
"To ensure local version identifiers can be readily incorporated as part "
"of filenames and URLs, and to avoid formatting inconsistencies in "
"hexadecimal hash representations, local version labels MUST be limited to"
" the following set of permitted characters:"
msgstr ""

#: ../../peps/pep-0440.rst:166
msgid "ASCII letters (``[a-zA-Z]``)"
msgstr ""

#: ../../peps/pep-0440.rst:167
msgid "ASCII digits (``[0-9]``)"
msgstr ""

#: ../../peps/pep-0440.rst:168
msgid "periods (``.``)"
msgstr ""

#: ../../peps/pep-0440.rst:170
msgid "Local version labels MUST start and end with an ASCII letter or digit."
msgstr ""

#: ../../peps/pep-0440.rst:172
msgid ""
"Comparison and ordering of local versions considers each segment of the "
"local version (divided by a ``.``) separately. If a segment consists "
"entirely of ASCII digits then that section should be considered an "
"integer for comparison purposes and if a segment contains any ASCII "
"letters then that segment is compared lexicographically with case "
"insensitivity. When comparing a numeric and lexicographic segment, the "
"numeric section always compares as greater than the lexicographic "
"segment. Additionally a local version with a great number of segments "
"will always compare as greater than a local version with fewer segments, "
"as long as the shorter local version's segments match the beginning of "
"the longer local version's segments exactly."
msgstr ""

#: ../../peps/pep-0440.rst:183
msgid ""
"An \"upstream project\" is a project that defines its own public "
"versions. A \"downstream project\" is one which tracks and redistributes "
"an upstream project, potentially backporting security and bug fixes from "
"later versions of the upstream project."
msgstr ""

#: ../../peps/pep-0440.rst:188
msgid ""
"Local version identifiers SHOULD NOT be used when publishing upstream "
"projects to a public index server, but MAY be used to identify private "
"builds created directly from the project source. Local version "
"identifiers SHOULD be used by downstream projects when releasing a "
"version that is API compatible with the version of the upstream project "
"identified by the public version identifier, but contains additional "
"changes (such as bug fixes). As the Python Package Index is intended "
"solely for indexing and hosting upstream projects, it MUST NOT allow the "
"use of local version identifiers."
msgstr ""

#: ../../peps/pep-0440.rst:198
msgid ""
"Source distributions using a local version identifier SHOULD provide the "
"``python.integrator`` extension metadata (as defined in :pep:`459`)."
msgstr ""

#: ../../peps/pep-0440.rst:203
msgid "Final releases"
msgstr ""

#: ../../peps/pep-0440.rst:205
msgid ""
"A version identifier that consists solely of a release segment and "
"optionally an epoch identifier is termed a \"final release\"."
msgstr ""

#: ../../peps/pep-0440.rst:208
msgid ""
"The release segment consists of one or more non-negative integer values, "
"separated by dots::"
msgstr ""

#: ../../peps/pep-0440.rst:213
msgid ""
"Final releases within a project MUST be numbered in a consistently "
"increasing fashion, otherwise automated tools will not be able to upgrade"
" them correctly."
msgstr ""

#: ../../peps/pep-0440.rst:217
msgid ""
"Comparison and ordering of release segments considers the numeric value "
"of each component of the release segment in turn. When comparing release "
"segments with different numbers of components, the shorter segment is "
"padded out with additional zeros as necessary."
msgstr ""

#: ../../peps/pep-0440.rst:222
msgid ""
"While any number of additional components after the first are permitted "
"under this scheme, the most common variants are to use two components "
"(\"major.minor\") or three components (\"major.minor.micro\")."
msgstr ""

#: ../../peps/pep-0440.rst:226
msgid "For example::"
msgstr ""

#: ../../peps/pep-0440.rst:241
msgid ""
"A release series is any set of final release numbers that start with a "
"common prefix. For example, ``3.3.1``, ``3.3.5`` and ``3.3.9.45`` are all"
" part of the ``3.3`` release series."
msgstr ""

#: ../../peps/pep-0440.rst:247
msgid ""
"``X.Y`` and ``X.Y.0`` are not considered distinct release numbers, as the"
" release segment comparison rules implicit expand the two component form "
"to ``X.Y.0`` when comparing it to any release segment that includes three"
" components."
msgstr ""

#: ../../peps/pep-0440.rst:252
msgid ""
"Date based release segments are also permitted. An example of a date "
"based release scheme using the year and month of the release::"
msgstr ""

#: ../../peps/pep-0440.rst:264
msgid "Pre-releases"
msgstr ""

#: ../../peps/pep-0440.rst:266
msgid ""
"Some projects use an \"alpha, beta, release candidate\" pre-release cycle"
" to support testing by their users prior to a final release."
msgstr ""

#: ../../peps/pep-0440.rst:269
msgid ""
"If used as part of a project's development cycle, these pre-releases are "
"indicated by including a pre-release segment in the version identifier::"
msgstr ""

#: ../../peps/pep-0440.rst:277
msgid ""
"A version identifier that consists solely of a release segment and a pre-"
"release segment is termed a \"pre-release\"."
msgstr ""

#: ../../peps/pep-0440.rst:280
msgid ""
"The pre-release segment consists of an alphabetical identifier for the "
"pre-release phase, along with a non-negative integer value. Pre-releases "
"for a given release are ordered first by phase (alpha, beta, release "
"candidate) and then by the numerical component within that phase."
msgstr ""

#: ../../peps/pep-0440.rst:285
msgid ""
"Installation tools MAY accept both ``c`` and ``rc`` releases for a common"
" release segment in order to handle some existing legacy distributions."
msgstr ""

#: ../../peps/pep-0440.rst:288
msgid ""
"Installation tools SHOULD interpret ``c`` versions as being equivalent to"
" ``rc`` versions (that is, ``c1`` indicates the same version as ``rc1``)."
msgstr ""

#: ../../peps/pep-0440.rst:291
msgid ""
"Build tools, publication tools and index servers SHOULD disallow the "
"creation of both ``rc`` and ``c`` releases for a common release segment."
msgstr ""

#: ../../peps/pep-0440.rst:296
msgid "Post-releases"
msgstr ""

#: ../../peps/pep-0440.rst:298
msgid ""
"Some projects use post-releases to address minor errors in a final "
"release that do not affect the distributed software (for example, "
"correcting an error in the release notes)."
msgstr ""

#: ../../peps/pep-0440.rst:302
msgid ""
"If used as part of a project's development cycle, these post-releases are"
" indicated by including a post-release segment in the version "
"identifier::"
msgstr ""

#: ../../peps/pep-0440.rst:307
msgid ""
"A version identifier that includes a post-release segment without a "
"developmental release segment is termed a \"post-release\"."
msgstr ""

#: ../../peps/pep-0440.rst:310
msgid ""
"The post-release segment consists of the string ``.post``, followed by a "
"non-negative integer value. Post-releases are ordered by their numerical "
"component, immediately following the corresponding release, and ahead of "
"any subsequent release."
msgstr ""

#: ../../peps/pep-0440.rst:317
msgid ""
"The use of post-releases to publish maintenance releases containing "
"actual bug fixes is strongly discouraged. In general, it is better to use"
" a longer release number and increment the final component for each "
"maintenance release."
msgstr ""

#: ../../peps/pep-0440.rst:322
msgid "Post-releases are also permitted for pre-releases::"
msgstr ""

#: ../../peps/pep-0440.rst:330
msgid ""
"Creating post-releases of pre-releases is strongly discouraged, as it "
"makes the version identifier difficult to parse for human readers. In "
"general, it is substantially clearer to simply create a new pre-release "
"by incrementing the numeric component."
msgstr ""

#: ../../peps/pep-0440.rst:337
msgid "Developmental releases"
msgstr ""

#: ../../peps/pep-0440.rst:339
msgid ""
"Some projects make regular developmental releases, and system packagers "
"(especially for Linux distributions) may wish to create early releases "
"directly from source control which do not conflict with later project "
"releases."
msgstr ""

#: ../../peps/pep-0440.rst:344
msgid ""
"If used as part of a project's development cycle, these developmental "
"releases are indicated by including a developmental release segment in "
"the version identifier::"
msgstr ""

#: ../../peps/pep-0440.rst:350
msgid ""
"A version identifier that includes a developmental release segment is "
"termed a \"developmental release\"."
msgstr ""

#: ../../peps/pep-0440.rst:353
msgid ""
"The developmental release segment consists of the string ``.dev``, "
"followed by a non-negative integer value. Developmental releases are "
"ordered by their numerical component, immediately before the "
"corresponding release (and before any pre-releases with the same release "
"segment), and following any previous release (including any post-"
"releases)."
msgstr ""

#: ../../peps/pep-0440.rst:359
msgid ""
"Developmental releases are also permitted for pre-releases and post-"
"releases::"
msgstr ""

#: ../../peps/pep-0440.rst:369
msgid ""
"While they may be useful for continuous integration purposes, publishing "
"developmental releases of pre-releases to general purpose public index "
"servers is strongly discouraged, as it makes the version identifier "
"difficult to parse for human readers. If such a release needs to be "
"published, it is substantially clearer to instead create a new pre-"
"release by incrementing the numeric component."
msgstr ""

#: ../../peps/pep-0440.rst:376
msgid ""
"Developmental releases of post-releases are also strongly discouraged, "
"but they may be appropriate for projects which use the post-release "
"notation for full maintenance releases which may include code changes."
msgstr ""

#: ../../peps/pep-0440.rst:382
msgid "Version epochs"
msgstr ""

#: ../../peps/pep-0440.rst:384
msgid ""
"If included in a version identifier, the epoch appears before all other "
"components, separated from the release segment by an exclamation mark::"
msgstr ""

#: ../../peps/pep-0440.rst:389
msgid "If no explicit epoch is given, the implicit epoch is ``0``."
msgstr ""

#: ../../peps/pep-0440.rst:391
msgid ""
"Most version identifiers will not include an epoch, as an explicit epoch "
"is only needed if a project *changes* the way it handles version "
"numbering in a way that means the normal version ordering rules will give"
" the wrong answer. For example, if a project is using date based versions"
" like ``2014.04`` and would like to switch to semantic versions like "
"``1.0``, then the new releases would be identified as *older* than the "
"date based releases when using the normal sorting scheme::"
msgstr ""

#: ../../peps/pep-0440.rst:405
msgid ""
"However, by specifying an explicit epoch, the sort order can be changed "
"appropriately, as all versions from a later epoch are sorted after "
"versions from an earlier epoch::"
msgstr ""

#: ../../peps/pep-0440.rst:416
msgid "Normalization"
msgstr ""

#: ../../peps/pep-0440.rst:418
msgid ""
"In order to maintain better compatibility with existing versions there "
"are a number of \"alternative\" syntaxes that MUST be taken into account "
"when parsing versions. These syntaxes MUST be considered when parsing a "
"version, however they should be \"normalized\" to the standard syntax "
"defined above."
msgstr ""

#: ../../peps/pep-0440.rst:425
msgid "Case sensitivity"
msgstr ""

#: ../../peps/pep-0440.rst:427
msgid ""
"All ascii letters should be interpreted case insensitively within a "
"version and the normal form is lowercase. This allows versions such as "
"``1.1RC1`` which would be normalized to ``1.1rc1``."
msgstr ""

#: ../../peps/pep-0440.rst:433
msgid "Integer Normalization"
msgstr ""

#: ../../peps/pep-0440.rst:435
msgid ""
"All integers are interpreted via the ``int()`` built in and normalize to "
"the string form of the output. This means that an integer version of "
"``00`` would normalize to ``0`` while ``09000`` would normalize to "
"``9000``. This does not hold true for integers inside of an alphanumeric "
"segment of a local version such as ``1.0+foo0100`` which is already in "
"its normalized form."
msgstr ""

#: ../../peps/pep-0440.rst:443
msgid "Pre-release separators"
msgstr ""

#: ../../peps/pep-0440.rst:445
msgid ""
"Pre-releases should allow a ``.``, ``-``, or ``_`` separator between the "
"release segment and the pre-release segment. The normal form for this is "
"without a separator. This allows versions such as ``1.1.a1`` or "
"``1.1-a1`` which would be normalized to ``1.1a1``. It should also allow a"
" separator to be used between the pre-release signifier and the numeral. "
"This allows versions such as ``1.0a.1`` which would be normalized to "
"``1.0a1``."
msgstr ""

#: ../../peps/pep-0440.rst:454
msgid "Pre-release spelling"
msgstr ""

#: ../../peps/pep-0440.rst:456
msgid ""
"Pre-releases allow the additional spellings of ``alpha``, ``beta``, "
"``c``, ``pre``, and ``preview`` for ``a``, ``b``, ``rc``, ``rc``, and "
"``rc`` respectively. This allows versions such as ``1.1alpha1``, "
"``1.1beta2``, or ``1.1c3`` which normalize to ``1.1a1``, ``1.1b2``, and "
"``1.1rc3``. In every case the additional spelling should be considered "
"equivalent to their normal forms."
msgstr ""

#: ../../peps/pep-0440.rst:465
msgid "Implicit pre-release number"
msgstr ""

#: ../../peps/pep-0440.rst:467
msgid ""
"Pre releases allow omitting the numeral in which case it is implicitly "
"assumed to be ``0``. The normal form for this is to include the ``0`` "
"explicitly. This allows versions such as ``1.2a`` which is normalized to "
"``1.2a0``."
msgstr ""

#: ../../peps/pep-0440.rst:473
msgid "Post release separators"
msgstr ""

#: ../../peps/pep-0440.rst:475
msgid ""
"Post releases allow a ``.``, ``-``, or ``_`` separator as well as "
"omitting the separator all together. The normal form of this is with the "
"``.`` separator. This allows versions such as ``1.2-post2`` or "
"``1.2post2`` which normalize to ``1.2.post2``. Like the pre-release "
"separator this also allows an optional separator between the post release"
" signifier and the numeral. This allows versions like ``1.2.post-2`` "
"which would normalize to ``1.2.post2``."
msgstr ""

#: ../../peps/pep-0440.rst:484
msgid "Post release spelling"
msgstr ""

#: ../../peps/pep-0440.rst:486
msgid ""
"Post-releases allow the additional spellings of ``rev`` and ``r``. This "
"allows versions such as ``1.0-r4`` which normalizes to ``1.0.post4``. As "
"with the pre-releases the additional spellings should be considered "
"equivalent to their normal forms."
msgstr ""

#: ../../peps/pep-0440.rst:493
msgid "Implicit post release number"
msgstr ""

#: ../../peps/pep-0440.rst:495
msgid ""
"Post releases allow omitting the numeral in which case it is implicitly "
"assumed to be ``0``. The normal form for this is to include the ``0`` "
"explicitly. This allows versions such as ``1.2.post`` which is normalized"
" to ``1.2.post0``."
msgstr ""

#: ../../peps/pep-0440.rst:501
msgid "Implicit post releases"
msgstr ""

#: ../../peps/pep-0440.rst:503
msgid ""
"Post releases allow omitting the ``post`` signifier all together. When "
"using this form the separator MUST be ``-`` and no other form is allowed."
" This allows versions such as ``1.0-1`` to be normalized to "
"``1.0.post1``. This particular normalization MUST NOT be used in "
"conjunction with the implicit post release number rule. In other words, "
"``1.0-`` is *not* a valid version and it does *not* normalize to "
"``1.0.post0``."
msgstr ""

#: ../../peps/pep-0440.rst:512
msgid "Development release separators"
msgstr ""

#: ../../peps/pep-0440.rst:514
msgid ""
"Development releases allow a ``.``, ``-``, or a ``_`` separator as well "
"as omitting the separator all together. The normal form of this is with "
"the ``.`` separator. This allows versions such as ``1.2-dev2`` or "
"``1.2dev2`` which normalize to ``1.2.dev2``."
msgstr ""

#: ../../peps/pep-0440.rst:521
msgid "Implicit development release number"
msgstr ""

#: ../../peps/pep-0440.rst:523
msgid ""
"Development releases allow omitting the numeral in which case it is "
"implicitly assumed to be ``0``. The normal form for this is to include "
"the ``0`` explicitly. This allows versions such as ``1.2.dev`` which is "
"normalized to ``1.2.dev0``."
msgstr ""

#: ../../peps/pep-0440.rst:530
msgid "Local version segments"
msgstr ""

#: ../../peps/pep-0440.rst:532
msgid ""
"With a local version, in addition to the use of ``.`` as a separator of "
"segments, the use of ``-`` and ``_`` is also acceptable. The normal form "
"is using the ``.`` character. This allows versions such as "
"``1.0+ubuntu-1`` to be normalized to ``1.0+ubuntu.1``."
msgstr ""

#: ../../peps/pep-0440.rst:539
msgid "Preceding v character"
msgstr ""

#: ../../peps/pep-0440.rst:541
msgid ""
"In order to support the common version notation of ``v1.0`` versions may "
"be preceded by a single literal ``v`` character. This character MUST be "
"ignored for all purposes and should be omitted from all normalized forms "
"of the version. The same version with and without the ``v`` is considered"
" equivalent."
msgstr ""

#: ../../peps/pep-0440.rst:548
msgid "Leading and Trailing Whitespace"
msgstr ""

#: ../../peps/pep-0440.rst:550
msgid ""
"Leading and trailing whitespace must be silently ignored and removed from"
" all normalized forms of a version. This includes ``\" \"``, ``\\t``, "
"``\\n``, ``\\r``, ``\\f``, and ``\\v``. This allows accidental whitespace"
" to be handled sensibly, such as a version like ``1.0\\n`` which "
"normalizes to ``1.0``."
msgstr ""

#: ../../peps/pep-0440.rst:557
msgid "Examples of compliant version schemes"
msgstr ""

#: ../../peps/pep-0440.rst:559
msgid ""
"The standard version scheme is designed to encompass a wide range of "
"identification practices across public and private Python projects. In "
"practice, a single project attempting to use the full flexibility offered"
" by the scheme would create a situation where human users had difficulty "
"figuring out the relative order of versions, even though the rules above "
"ensure all compliant tools will order them consistently."
msgstr ""

#: ../../peps/pep-0440.rst:566
msgid ""
"The following examples illustrate a small selection of the different "
"approaches projects may choose to identify their releases, while still "
"ensuring that the \"latest release\" and the \"latest stable release\" "
"can be easily determined, both by human users and automated tools."
msgstr ""

#: ../../peps/pep-0440.rst:571
msgid "Simple \"major.minor\" versioning::"
msgstr ""

#: ../../peps/pep-0440.rst:580
msgid "Simple \"major.minor.micro\" versioning::"
msgstr ""

#: ../../peps/pep-0440.rst:588
msgid "\"major.minor\" versioning with alpha, beta and candidate pre-releases::"
msgstr ""

#: ../../peps/pep-0440.rst:600
msgid ""
"\"major.minor\" versioning with developmental releases, release "
"candidates and post-releases for minor corrections::"
msgstr ""

#: ../../peps/pep-0440.rst:615
msgid ""
"Date based releases, using an incrementing serial within each year, "
"skipping zero::"
msgstr ""

#: ../../peps/pep-0440.rst:629
msgid "Summary of permitted suffixes and relative ordering"
msgstr ""

#: ../../peps/pep-0440.rst:633
msgid ""
"This section is intended primarily for authors of tools that "
"automatically process distribution metadata, rather than developers of "
"Python distributions deciding on a versioning scheme."
msgstr ""

#: ../../peps/pep-0440.rst:637
msgid ""
"The epoch segment of version identifiers MUST be sorted according to the "
"numeric value of the given epoch. If no epoch segment is present, the "
"implicit numeric value is ``0``."
msgstr ""

#: ../../peps/pep-0440.rst:641
msgid ""
"The release segment of version identifiers MUST be sorted in the same "
"order as Python's tuple sorting when the normalized release segment is "
"parsed as follows::"
msgstr ""

#: ../../peps/pep-0440.rst:647
msgid ""
"All release segments involved in the comparison MUST be converted to a "
"consistent length by padding shorter segments with zeros as needed."
msgstr ""

#: ../../peps/pep-0440.rst:650
msgid ""
"Within a numeric release (``1.0``, ``2.7.3``), the following suffixes are"
" permitted and MUST be ordered as shown::"
msgstr ""

#: ../../peps/pep-0440.rst:655
msgid ""
"Note that ``c`` is considered to be semantically equivalent to ``rc`` and"
" must be sorted as if it were ``rc``. Tools MAY reject the case of having"
" the same ``N`` for both a ``c`` and a ``rc`` in the same release segment"
" as ambiguous and remain in compliance with the PEP."
msgstr ""

#: ../../peps/pep-0440.rst:660
msgid ""
"Within an alpha (``1.0a1``), beta (``1.0b1``), or release candidate "
"(``1.0rc1``, ``1.0c1``), the following suffixes are permitted and MUST be"
" ordered as shown::"
msgstr ""

#: ../../peps/pep-0440.rst:666
msgid ""
"Within a post-release (``1.0.post1``), the following suffixes are "
"permitted and MUST be ordered as shown::"
msgstr ""

#: ../../peps/pep-0440.rst:671
msgid ""
"Note that ``devN`` and ``postN`` MUST always be preceded by a dot, even "
"when used immediately following a numeric version (e.g. ``1.0.dev456``, "
"``1.0.post1``)."
msgstr ""

#: ../../peps/pep-0440.rst:675
msgid ""
"Within a pre-release, post-release or development release segment with a "
"shared prefix, ordering MUST be by the value of the numeric component."
msgstr ""

#: ../../peps/pep-0440.rst:678
msgid "The following example covers many of the possible combinations::"
msgstr ""

#: ../../peps/pep-0440.rst:703
msgid "Version ordering across different metadata versions"
msgstr ""

#: ../../peps/pep-0440.rst:705
msgid ""
"Metadata v1.0 (:pep:`241`) and metadata v1.1 (:pep:`314`) do not specify "
"a standard version identification or ordering scheme. However metadata "
"v1.2 (:pep:`345`) does specify a scheme which is defined in :pep:`386`."
msgstr ""

#: ../../peps/pep-0440.rst:709
msgid ""
"Due to the nature of the simple installer API it is not possible for an "
"installer to be aware of which metadata version a particular distribution"
" was using. Additionally installers required the ability to create a "
"reasonably prioritized list that includes all, or as many as possible, "
"versions of a project to determine which versions it should install. "
"These requirements necessitate a standardization across one parsing "
"mechanism to be used for all versions of a project."
msgstr ""

#: ../../peps/pep-0440.rst:717
msgid ""
"Due to the above, this PEP MUST be used for all versions of metadata and "
"supersedes :pep:`386` even for metadata v1.2. Tools SHOULD ignore any "
"versions which cannot be parsed by the rules in this PEP, but MAY fall "
"back to implementation defined version parsing and ordering schemes if no"
" versions complying with this PEP are available."
msgstr ""

#: ../../peps/pep-0440.rst:723
msgid ""
"Distribution users may wish to explicitly remove non-compliant versions "
"from any private package indexes they control."
msgstr ""

#: ../../peps/pep-0440.rst:728
msgid "Compatibility with other version schemes"
msgstr ""

#: ../../peps/pep-0440.rst:730
msgid ""
"Some projects may choose to use a version scheme which requires "
"translation in order to comply with the public version scheme defined in "
"this PEP. In such cases, the project specific version can be stored in "
"the metadata while the translated public version is published in the "
"version field."
msgstr ""

#: ../../peps/pep-0440.rst:735
msgid ""
"This allows automated distribution tools to provide consistently correct "
"ordering of published releases, while still allowing developers to use "
"the internal versioning scheme they prefer for their projects."
msgstr ""

#: ../../peps/pep-0440.rst:741
msgid "Semantic versioning"
msgstr ""

#: ../../peps/pep-0440.rst:743
msgid ""
"`Semantic versioning`_ is a popular version identification scheme that is"
" more prescriptive than this PEP regarding the significance of different "
"elements of a release number. Even if a project chooses not to abide by "
"the details of semantic versioning, the scheme is worth understanding as "
"it covers many of the issues that can arise when depending on other "
"distributions, and when publishing a distribution that others rely on."
msgstr ""

#: ../../peps/pep-0440.rst:750
msgid ""
"The \"Major.Minor.Patch\" (described in this PEP as "
"\"major.minor.micro\") aspects of semantic versioning (clauses 1-8 in the"
" 2.0.0 specification) are fully compatible with the version scheme "
"defined in this PEP, and abiding by these aspects is encouraged."
msgstr ""

#: ../../peps/pep-0440.rst:755
msgid ""
"Semantic versions containing a hyphen (pre-releases - clause 10) or a "
"plus sign (builds - clause 11) are *not* compatible with this PEP and are"
" not permitted in the public version field."
msgstr ""

#: ../../peps/pep-0440.rst:759
msgid ""
"One possible mechanism to translate such semantic versioning based source"
" labels to compatible public versions is to use the ``.devN`` suffix to "
"specify the appropriate version order."
msgstr ""

#: ../../peps/pep-0440.rst:763
msgid "Specific build information may also be included in local version labels."
msgstr ""

#: ../../peps/pep-0440.rst:769
msgid "DVCS based version labels"
msgstr ""

#: ../../peps/pep-0440.rst:771
msgid ""
"Many build tools integrate with distributed version control systems like "
"Git and Mercurial in order to add an identifying hash to the version "
"identifier. As hashes cannot be ordered reliably such versions are not "
"permitted in the public version field."
msgstr ""

#: ../../peps/pep-0440.rst:776
msgid ""
"As with semantic versioning, the public ``.devN`` suffix may be used to "
"uniquely identify such releases for publication, while the original DVCS "
"based label can be stored in the project metadata."
msgstr ""

#: ../../peps/pep-0440.rst:780
msgid "Identifying hash information may also be included in local version labels."
msgstr ""

#: ../../peps/pep-0440.rst:784
msgid "Olson database versioning"
msgstr ""

#: ../../peps/pep-0440.rst:786
msgid ""
"The ``pytz`` project inherits its versioning scheme from the "
"corresponding Olson timezone database versioning scheme: the year "
"followed by a lowercase character indicating the version of the database "
"within that year."
msgstr ""

#: ../../peps/pep-0440.rst:790
msgid ""
"This can be translated to a compliant public version identifier as "
"``<year>.<serial>``, where the serial starts at zero or one (for the "
"'<year>a' release) and is incremented with each subsequent database "
"update within the year."
msgstr ""

#: ../../peps/pep-0440.rst:795
msgid ""
"As with other translated version identifiers, the corresponding Olson "
"database version could be recorded in the project metadata."
msgstr ""

#: ../../peps/pep-0440.rst:800
msgid "Version specifiers"
msgstr ""

#: ../../peps/pep-0440.rst:802
msgid ""
"A version specifier consists of a series of version clauses, separated by"
" commas. For example::"
msgstr ""

#: ../../peps/pep-0440.rst:807
msgid "The comparison operator determines the kind of version clause:"
msgstr ""

#: ../../peps/pep-0440.rst:809
msgid "``~=``: `Compatible release`_ clause"
msgstr ""

#: ../../peps/pep-0440.rst:810
msgid "``==``: `Version matching`_ clause"
msgstr ""

#: ../../peps/pep-0440.rst:811
msgid "``!=``: `Version exclusion`_ clause"
msgstr ""

#: ../../peps/pep-0440.rst:812
msgid "``<=``, ``>=``: `Inclusive ordered comparison`_ clause"
msgstr ""

#: ../../peps/pep-0440.rst:813
msgid "``<``, ``>``: `Exclusive ordered comparison`_ clause"
msgstr ""

#: ../../peps/pep-0440.rst:814
msgid "``===``: `Arbitrary equality`_ clause."
msgstr ""

#: ../../peps/pep-0440.rst:816
msgid ""
"The comma (\",\") is equivalent to a logical **and** operator: a "
"candidate version must match all given version clauses in order to match "
"the specifier as a whole."
msgstr ""

#: ../../peps/pep-0440.rst:820
msgid ""
"Whitespace between a conditional operator and the following version "
"identifier is optional, as is the whitespace around the commas."
msgstr ""

#: ../../peps/pep-0440.rst:823
msgid ""
"When multiple candidate versions match a version specifier, the preferred"
" version SHOULD be the latest version as determined by the consistent "
"ordering defined by the standard `Version scheme`_. Whether or not pre-"
"releases are considered as candidate versions SHOULD be handled as "
"described in `Handling of pre-releases`_."
msgstr ""

#: ../../peps/pep-0440.rst:829
msgid ""
"Except where specifically noted below, local version identifiers MUST NOT"
" be permitted in version specifiers, and local version labels MUST be "
"ignored entirely when checking if candidate versions match a given "
"version specifier."
msgstr ""

#: ../../peps/pep-0440.rst:836
msgid "Compatible release"
msgstr ""

#: ../../peps/pep-0440.rst:838
msgid ""
"A compatible release clause consists of the compatible release operator "
"``~=`` and a version identifier. It matches any candidate version that is"
" expected to be compatible with the specified version."
msgstr ""

#: ../../peps/pep-0440.rst:842
msgid ""
"The specified version identifier must be in the standard format described"
" in `Version scheme`_. Local version identifiers are NOT permitted in "
"this version specifier."
msgstr ""

#: ../../peps/pep-0440.rst:846
msgid ""
"For a given release identifier ``V.N``, the compatible release clause is "
"approximately equivalent to the pair of comparison clauses::"
msgstr ""

#: ../../peps/pep-0440.rst:851
msgid ""
"This operator MUST NOT be used with a single segment version number such "
"as ``~=1``."
msgstr ""

#: ../../peps/pep-0440.rst:854
msgid "For example, the following groups of version clauses are equivalent::"
msgstr ""

#: ../../peps/pep-0440.rst:862
msgid ""
"If a pre-release, post-release or developmental release is named in a "
"compatible release clause as ``V.N.suffix``, then the suffix is ignored "
"when determining the required prefix match::"
msgstr ""

#: ../../peps/pep-0440.rst:872
msgid ""
"The padding rules for release segment comparisons means that the assumed "
"degree of forward compatibility in a compatible release clause can be "
"controlled by appending additional zeros to the version specifier::"
msgstr ""

#: ../../peps/pep-0440.rst:884
msgid "Version matching"
msgstr ""

#: ../../peps/pep-0440.rst:886
msgid ""
"A version matching clause includes the version matching operator ``==`` "
"and a version identifier."
msgstr ""

#: ../../peps/pep-0440.rst:889
msgid ""
"The specified version identifier must be in the standard format described"
" in `Version scheme`_, but a trailing ``.*`` is permitted on public "
"version identifiers as described below."
msgstr ""

#: ../../peps/pep-0440.rst:893
msgid ""
"By default, the version matching operator is based on a strict equality "
"comparison: the specified version must be exactly the same as the "
"requested version. The *only* substitution performed is the zero padding "
"of the release segment to ensure the release segments are compared with "
"the same length."
msgstr ""

#: ../../peps/pep-0440.rst:899
msgid ""
"Whether or not strict version matching is appropriate depends on the "
"specific use case for the version specifier. Automated tools SHOULD at "
"least issue warnings and MAY reject them entirely when strict version "
"matches are used inappropriately."
msgstr ""

#: ../../peps/pep-0440.rst:904
msgid ""
"Prefix matching may be requested instead of strict comparison, by "
"appending a trailing ``.*`` to the version identifier in the version "
"matching clause. This means that additional trailing segments will be "
"ignored when determining whether or not a version identifier matches the "
"clause. If the specified version includes only a release segment, than "
"trailing components (or the lack thereof) in the release segment are also"
" ignored."
msgstr ""

#: ../../peps/pep-0440.rst:911 ../../peps/pep-0440.rst:972
msgid ""
"For example, given the version ``1.1.post1``, the following clauses would"
" match or not as shown::"
msgstr ""

#: ../../peps/pep-0440.rst:918
msgid ""
"For purposes of prefix matching, the pre-release segment is considered to"
" have an implied preceding ``.``, so given the version ``1.1a1``, the "
"following clauses would match or not as shown::"
msgstr ""

#: ../../peps/pep-0440.rst:926
msgid ""
"An exact match is also considered a prefix match (this interpretation is "
"implied by the usual zero padding rules for the release segment of "
"version identifiers). Given the version ``1.1``, the following clauses "
"would match or not as shown::"
msgstr ""

#: ../../peps/pep-0440.rst:938
msgid ""
"It is invalid to have a prefix match containing a development or local "
"release such as ``1.0.dev1.*`` or ``1.0+foo1.*``. If present, the "
"development release segment is always the final segment in the public "
"version, and the local version is ignored for comparison purposes, so "
"using either in a prefix match wouldn't make any sense."
msgstr ""

#: ../../peps/pep-0440.rst:944
msgid ""
"The use of ``==`` (without at least the wildcard suffix) when defining "
"dependencies for published distributions is strongly discouraged as it "
"greatly complicates the deployment of security fixes. The strict version "
"comparison operator is intended primarily for use when defining "
"dependencies for repeatable *deployments of applications* while using a "
"shared distribution index."
msgstr ""

#: ../../peps/pep-0440.rst:951
msgid ""
"If the specified version identifier is a public version identifier (no "
"local version label), then the local version label of any candidate "
"versions MUST be ignored when matching versions."
msgstr ""

#: ../../peps/pep-0440.rst:955
msgid ""
"If the specified version identifier is a local version identifier, then "
"the local version labels of candidate versions MUST be considered when "
"matching versions, with the public version identifier being matched as "
"described above, and the local version label being checked for "
"equivalence using a strict string equality comparison."
msgstr ""

#: ../../peps/pep-0440.rst:963
msgid "Version exclusion"
msgstr ""

#: ../../peps/pep-0440.rst:965
msgid ""
"A version exclusion clause includes the version exclusion operator ``!=``"
" and a version identifier."
msgstr ""

#: ../../peps/pep-0440.rst:968
msgid ""
"The allowed version identifiers and comparison semantics are the same as "
"those of the `Version matching`_ operator, except that the sense of any "
"match is inverted."
msgstr ""

#: ../../peps/pep-0440.rst:981
msgid "Inclusive ordered comparison"
msgstr ""

#: ../../peps/pep-0440.rst:983
msgid ""
"An inclusive ordered comparison clause includes a comparison operator and"
" a version identifier, and will match any version where the comparison is"
" correct based on the relative position of the candidate version and the "
"specified version given the consistent ordering defined by the standard "
"`Version scheme`_."
msgstr ""

#: ../../peps/pep-0440.rst:989
msgid "The inclusive ordered comparison operators are ``<=`` and ``>=``."
msgstr ""

#: ../../peps/pep-0440.rst:991 ../../peps/pep-0440.rst:1021
msgid ""
"As with version matching, the release segment is zero padded as necessary"
" to ensure the release segments are compared with the same length."
msgstr ""

#: ../../peps/pep-0440.rst:994 ../../peps/pep-0440.rst:1024
msgid "Local version identifiers are NOT permitted in this version specifier."
msgstr ""

#: ../../peps/pep-0440.rst:998
msgid "Exclusive ordered comparison"
msgstr ""

#: ../../peps/pep-0440.rst:1000
msgid ""
"The exclusive ordered comparisons ``>`` and ``<`` are similar to the "
"inclusive ordered comparisons in that they rely on the relative position "
"of the candidate version and the specified version given the consistent "
"ordering defined by the standard `Version scheme`_. However, they "
"specifically exclude pre-releases, post-releases, and local versions of "
"the specified version."
msgstr ""

#: ../../peps/pep-0440.rst:1006
msgid ""
"The exclusive ordered comparison ``>V`` **MUST NOT** allow a post-release"
" of the given version unless ``V`` itself is a post release. You may "
"mandate that releases are later than a particular post release, including"
" additional post releases, by using ``>V.postN``. For example, ``>1.7`` "
"will allow ``1.7.1`` but not ``1.7.0.post1`` and ``>1.7.post2`` will "
"allow ``1.7.1`` and ``1.7.0.post3`` but not ``1.7.0``."
msgstr ""

#: ../../peps/pep-0440.rst:1013
msgid ""
"The exclusive ordered comparison ``>V`` **MUST NOT** match a local "
"version of the specified version."
msgstr ""

#: ../../peps/pep-0440.rst:1016
msgid ""
"The exclusive ordered comparison ``<V`` **MUST NOT** allow a pre-release "
"of the specified version unless the specified version is itself a pre-"
"release. Allowing pre-releases that are earlier than, but not equal to a "
"specific pre-release may be accomplished by using ``<V.rc1`` or similar."
msgstr ""

#: ../../peps/pep-0440.rst:1028
msgid "Arbitrary equality"
msgstr ""

#: ../../peps/pep-0440.rst:1030
msgid ""
"Arbitrary equality comparisons are simple string equality operations "
"which do not take into account any of the semantic information such as "
"zero padding or local versions. This operator also does not support "
"prefix matching as the ``==`` operator does."
msgstr ""

#: ../../peps/pep-0440.rst:1035
msgid ""
"The primary use case for arbitrary equality is to allow for specifying a "
"version which cannot otherwise be represented by this PEP. This operator "
"is special and acts as an escape hatch to allow someone using a tool "
"which implements this PEP to still install a legacy version which is "
"otherwise incompatible with this PEP."
msgstr ""

#: ../../peps/pep-0440.rst:1041
msgid ""
"An example would be ``===foobar`` which would match a version of "
"``foobar``."
msgstr ""

#: ../../peps/pep-0440.rst:1043
msgid ""
"This operator may also be used to explicitly require an unpatched version"
" of a project such as ``===1.0`` which would not match for a version "
"``1.0+downstream1``."
msgstr ""

#: ../../peps/pep-0440.rst:1047
msgid ""
"Use of this operator is heavily discouraged and tooling MAY display a "
"warning when it is used."
msgstr ""

#: ../../peps/pep-0440.rst:1052
msgid "Handling of pre-releases"
msgstr ""

#: ../../peps/pep-0440.rst:1054
msgid ""
"Pre-releases of any kind, including developmental releases, are "
"implicitly excluded from all version specifiers, *unless* they are "
"already present on the system, explicitly requested by the user, or if "
"the only available version that satisfies the version specifier is a pre-"
"release."
msgstr ""

#: ../../peps/pep-0440.rst:1059
msgid "By default, dependency resolution tools SHOULD:"
msgstr ""

#: ../../peps/pep-0440.rst:1061
msgid "accept already installed pre-releases for all version specifiers"
msgstr ""

#: ../../peps/pep-0440.rst:1062
msgid ""
"accept remotely available pre-releases for version specifiers where there"
" is no final or post release that satisfies the version specifier"
msgstr ""

#: ../../peps/pep-0440.rst:1064
msgid "exclude all other pre-releases from consideration"
msgstr ""

#: ../../peps/pep-0440.rst:1066
msgid ""
"Dependency resolution tools MAY issue a warning if a pre-release is "
"needed to satisfy a version specifier."
msgstr ""

#: ../../peps/pep-0440.rst:1069
msgid ""
"Dependency resolution tools SHOULD also allow users to request the "
"following alternative behaviours:"
msgstr ""

#: ../../peps/pep-0440.rst:1072
msgid "accepting pre-releases for all version specifiers"
msgstr ""

#: ../../peps/pep-0440.rst:1073
msgid ""
"excluding pre-releases for all version specifiers (reporting an error or "
"warning if a pre-release is already installed locally, or if a pre-"
"release is the only way to satisfy a particular specifier)"
msgstr ""

#: ../../peps/pep-0440.rst:1077
msgid ""
"Dependency resolution tools MAY also allow the above behaviour to be "
"controlled on a per-distribution basis."
msgstr ""

#: ../../peps/pep-0440.rst:1080
msgid ""
"Post-releases and final releases receive no special treatment in version "
"specifiers - they are always included unless explicitly excluded."
msgstr ""

#: ../../peps/pep-0440.rst:1085
msgid "Examples"
msgstr ""

#: ../../peps/pep-0440.rst:1087
msgid "``~=3.1``: version 3.1 or later, but not version 4.0 or later."
msgstr ""

#: ../../peps/pep-0440.rst:1088
msgid "``~=3.1.2``: version 3.1.2 or later, but not version 3.2.0 or later."
msgstr ""

#: ../../peps/pep-0440.rst:1089
msgid "``~=3.1a1``: version 3.1a1 or later, but not version 4.0 or later."
msgstr ""

#: ../../peps/pep-0440.rst:1090
msgid ""
"``== 3.1``: specifically version 3.1 (or 3.1.0), excludes all pre-"
"releases, post releases, developmental releases and any 3.1.x maintenance"
" releases."
msgstr ""

#: ../../peps/pep-0440.rst:1092
msgid ""
"``== 3.1.*``: any version that starts with 3.1. Equivalent to the "
"``~=3.1.0`` compatible release clause."
msgstr ""

#: ../../peps/pep-0440.rst:1094
msgid ""
"``~=3.1.0, != 3.1.3``: version 3.1.0 or later, but not version 3.1.3 and "
"not version 3.2.0 or later."
msgstr ""

#: ../../peps/pep-0440.rst:1099
msgid "Direct references"
msgstr ""

#: ../../peps/pep-0440.rst:1101
msgid ""
"Some automated tools may permit the use of a direct reference as an "
"alternative to a normal version specifier. A direct reference consists of"
" the specifier ``@`` and an explicit URL."
msgstr ""

#: ../../peps/pep-0440.rst:1105
msgid ""
"Whether or not direct references are appropriate depends on the specific "
"use case for the version specifier. Automated tools SHOULD at least issue"
" warnings and MAY reject them entirely when direct references are used "
"inappropriately."
msgstr ""

#: ../../peps/pep-0440.rst:1110
msgid ""
"Public index servers SHOULD NOT allow the use of direct references in "
"uploaded distributions. Direct references are intended as a tool for "
"software integrators rather than publishers."
msgstr ""

#: ../../peps/pep-0440.rst:1114
msgid ""
"Depending on the use case, some appropriate targets for a direct URL "
"reference may be an sdist or a wheel binary archive. The exact URLs and "
"targets supported will be tool dependent."
msgstr ""

#: ../../peps/pep-0440.rst:1118
msgid "For example, a local source archive may be referenced directly::"
msgstr ""

#: ../../peps/pep-0440.rst:1122
msgid "Alternatively, a prebuilt archive may also be referenced::"
msgstr ""

#: ../../peps/pep-0440.rst:1126
msgid ""
"All direct references that do not refer to a local file URL SHOULD "
"specify a secure transport mechanism (such as ``https``) AND include an "
"expected hash value in the URL for verification purposes. If a direct "
"reference is specified without any hash information, with hash "
"information that the tool doesn't understand, or with a selected hash "
"algorithm that the tool considers too weak to trust, automated tools "
"SHOULD at least emit a warning and MAY refuse to rely on the URL. If such"
" a direct reference also uses an insecure transport, automated tools "
"SHOULD NOT rely on the URL."
msgstr ""

#: ../../peps/pep-0440.rst:1135
msgid ""
"It is RECOMMENDED that only hashes which are unconditionally provided by "
"the latest version of the standard library's ``hashlib`` module be used "
"for source archive hashes. At time of writing, that list consists of "
"``'md5'``, ``'sha1'``, ``'sha224'``, ``'sha256'``, ``'sha384'``, and "
"``'sha512'``."
msgstr ""

#: ../../peps/pep-0440.rst:1141
msgid ""
"For source archive and wheel references, an expected hash value may be "
"specified by including a ``<hash-algorithm>=<expected-hash>`` entry as "
"part of the URL fragment."
msgstr ""

#: ../../peps/pep-0440.rst:1145
msgid ""
"For version control references, the ``VCS+protocol`` scheme SHOULD be "
"used to identify both the version control system and the secure "
"transport, and a version control system with hash based commit "
"identifiers SHOULD be used. Automated tools MAY omit warnings about "
"missing hashes for version control systems that do not provide hash based"
" commit identifiers."
msgstr ""

#: ../../peps/pep-0440.rst:1151
msgid ""
"To handle version control systems that do not support including commit or"
" tag references directly in the URL, that information may be appended to "
"the end of the URL using the ``@<commit-hash>`` or the ``@<tag>#<commit-"
"hash>`` notation."
msgstr ""

#: ../../peps/pep-0440.rst:1158
msgid ""
"This isn't *quite* the same as the existing VCS reference notation "
"supported by pip. Firstly, the distribution name is moved in front rather"
" than embedded as part of the URL. Secondly, the commit hash is included "
"even when retrieving based on a tag, in order to meet the requirement "
"above that *every* link should include a hash to make things harder to "
"forge (creating a malicious repo with a particular tag is easy, creating "
"one with a specific *hash*, less so)."
msgstr ""

#: ../../peps/pep-0440.rst:1166
msgid "Remote URL examples::"
msgstr ""

#: ../../peps/pep-0440.rst:1174
msgid "File URLs"
msgstr ""

#: ../../peps/pep-0440.rst:1176
msgid ""
"File URLs take the form of ``file://<host>/<path>``. If the ``<host>`` is"
" omitted it is assumed to be ``localhost`` and even if the ``<host>`` is "
"omitted the third slash MUST still exist. The ``<path>`` defines what the"
" file path on the filesystem that is to be accessed."
msgstr ""

#: ../../peps/pep-0440.rst:1181
msgid ""
"On the various \\*nix operating systems the only allowed values for "
"``<host>`` is for it to be omitted, ``localhost``, or another FQDN that "
"the current machine believes matches its own host. In other words, on "
"\\*nix the ``file://`` scheme can only be used to access paths on the "
"local machine."
msgstr ""

#: ../../peps/pep-0440.rst:1186
msgid ""
"On Windows the file format should include the drive letter if applicable "
"as part of the ``<path>`` (e.g. ``file:///c:/path/to/a/file``). Unlike "
"\\*nix on Windows the ``<host>`` parameter may be used to specify a file "
"residing on a network share. In other words, in order to translate "
"``\\\\machine\\volume\\file`` to a ``file://`` url, it would end up as "
"``file://machine/volume/file``. For more information on ``file://`` URLs "
"on Windows see MSDN [4]_."
msgstr ""

#: ../../peps/pep-0440.rst:1195
msgid "Updating the versioning specification"
msgstr ""

#: ../../peps/pep-0440.rst:1197
msgid ""
"The versioning specification may be updated with clarifications without "
"requiring a new PEP or a change to the metadata version."
msgstr ""

#: ../../peps/pep-0440.rst:1200
msgid ""
"Any technical changes that impact the version identification and "
"comparison syntax and semantics would require an updated versioning "
"scheme to be defined in a new PEP."
msgstr ""

#: ../../peps/pep-0440.rst:1206
msgid "Summary of differences from pkg_resources.parse_version"
msgstr ""

#: ../../peps/pep-0440.rst:1208
msgid ""
"Note: this comparison is to ``pkg_resourses.parse_version`` as it existed"
" at the time the PEP was written. After the PEP was accepted, setuptools "
"6.0 and later versions adopted the behaviour described in this PEP."
msgstr ""

#: ../../peps/pep-0440.rst:1212
msgid ""
"Local versions sort differently, this PEP requires that they sort as "
"greater than the same version without a local version, whereas "
"``pkg_resources.parse_version`` considers it a pre-release marker."
msgstr ""

#: ../../peps/pep-0440.rst:1216
msgid ""
"This PEP purposely restricts the syntax which constitutes a valid version"
" while ``pkg_resources.parse_version`` attempts to provide some meaning "
"from *any* arbitrary string."
msgstr ""

#: ../../peps/pep-0440.rst:1220
msgid ""
"``pkg_resources.parse_version`` allows arbitrarily deeply nested version "
"signifiers like ``1.0.dev1.post1.dev5``. This PEP however allows only a "
"single use of each type and they must exist in a certain order."
msgstr ""

#: ../../peps/pep-0440.rst:1226
msgid "Summary of differences from PEP 386"
msgstr ""

#: ../../peps/pep-0440.rst:1228
msgid "Moved the description of version specifiers into the versioning PEP"
msgstr ""

#: ../../peps/pep-0440.rst:1230
msgid ""
"Added the \"direct reference\" concept as a standard notation for direct "
"references to resources (rather than each tool needing to invent its own)"
msgstr ""

#: ../../peps/pep-0440.rst:1233
msgid ""
"Added the \"local version identifier\" and \"local version label\" "
"concepts to allow system integrators to indicate patched builds in a way "
"that is supported by the upstream tools, as well as to allow the "
"incorporation of build tags into the versioning of binary distributions."
msgstr ""

#: ../../peps/pep-0440.rst:1238
msgid "Added the \"compatible release\" clause"
msgstr ""

#: ../../peps/pep-0440.rst:1240
msgid ""
"Added the trailing wildcard syntax for prefix based version matching and "
"exclusion"
msgstr ""

#: ../../peps/pep-0440.rst:1243
msgid "Changed the top level sort position of the ``.devN`` suffix"
msgstr ""

#: ../../peps/pep-0440.rst:1245
msgid "Allowed single value version numbers"
msgstr ""

#: ../../peps/pep-0440.rst:1247
msgid "Explicit exclusion of leading or trailing whitespace"
msgstr ""

#: ../../peps/pep-0440.rst:1249
msgid "Explicit support for date based versions"
msgstr ""

#: ../../peps/pep-0440.rst:1251
msgid ""
"Explicit normalisation rules to improve compatibility with existing "
"version metadata on PyPI where it doesn't introduce ambiguity"
msgstr ""

#: ../../peps/pep-0440.rst:1255
msgid ""
"Implicitly exclude pre-releases unless they're already present or needed "
"to satisfy a dependency"
msgstr ""

#: ../../peps/pep-0440.rst:1258
msgid "Treat post releases the same way as unqualified releases"
msgstr ""

#: ../../peps/pep-0440.rst:1260
msgid "Discuss ordering and dependencies across metadata versions"
msgstr ""

#: ../../peps/pep-0440.rst:1262
msgid "Switch from preferring ``c`` to ``rc``."
msgstr ""

#: ../../peps/pep-0440.rst:1264
msgid "The rationale for major changes is given in the following sections."
msgstr ""

#: ../../peps/pep-0440.rst:1268
msgid "Changing the version scheme"
msgstr ""

#: ../../peps/pep-0440.rst:1270
msgid ""
"One key change in the version scheme in this PEP relative to that in "
":pep:`386` is to sort top level developmental releases like ``X.Y.devN`` "
"ahead of alpha releases like ``X.Ya1``. This is a far more logical sort "
"order, as projects already using both development releases and "
"alphas/betas/release candidates do not want their developmental releases "
"sorted in between their release candidates and their final releases. "
"There is no rationale for using ``dev`` releases in that position rather "
"than merely creating additional release candidates."
msgstr ""

#: ../../peps/pep-0440.rst:1279
msgid ""
"The updated sort order also means the sorting of ``dev`` versions is now "
"consistent between the metadata standard and the pre-existing behaviour "
"of ``pkg_resources`` (and hence the behaviour of current installation "
"tools)."
msgstr ""

#: ../../peps/pep-0440.rst:1284
msgid ""
"Making this change should make it easier for affected existing projects "
"to migrate to the latest version of the metadata standard."
msgstr ""

#: ../../peps/pep-0440.rst:1287
msgid ""
"Another change to the version scheme is to allow single number versions, "
"similar to those used by non-Python projects like Mozilla Firefox, Google"
" Chrome and the Fedora Linux distribution. This is actually expected to "
"be more useful for version specifiers, but it is easier to allow it for "
"both version specifiers and release numbers, rather than splitting the "
"two definitions."
msgstr ""

#: ../../peps/pep-0440.rst:1294
msgid ""
"The exclusion of leading and trailing whitespace was made explicit after "
"a couple of projects with version identifiers differing only in a "
"trailing ``\\n`` character were found on PyPI."
msgstr ""

#: ../../peps/pep-0440.rst:1298
msgid ""
"Various other normalisation rules were also added as described in the "
"separate section on version normalisation below."
msgstr ""

#: ../../peps/pep-0440.rst:1301
msgid ""
"``Appendix A`` shows detailed results of an analysis of PyPI distribution"
" version information, as collected on 8th August, 2014. This analysis "
"compares the behavior of the explicitly ordered version scheme defined in"
" this PEP with the de facto standard defined by the behavior of "
"setuptools. These metrics are useful, as the intent of this PEP is to "
"follow existing setuptools behavior as closely as is feasible, while "
"still throwing exceptions for unorderable versions (rather than trying to"
" guess an appropriate order as setuptools does)."
msgstr ""

#: ../../peps/pep-0440.rst:1312
msgid "A more opinionated description of the versioning scheme"
msgstr ""

#: ../../peps/pep-0440.rst:1314
msgid ""
"As in :pep:`386`, the primary focus is on codifying existing practices to"
" make them more amenable to automation, rather than demanding that "
"existing projects make non-trivial changes to their workflow. However, "
"the standard scheme allows significantly more flexibility than is needed "
"for the vast majority of simple Python packages (which often don't even "
"need maintenance releases - many users are happy with needing to upgrade "
"to a new feature release to get bug fixes)."
msgstr ""

#: ../../peps/pep-0440.rst:1322
msgid ""
"For the benefit of novice developers, and for experienced developers "
"wishing to better understand the various use cases, the specification now"
" goes into much greater detail on the components of the defined version "
"scheme, including examples of how each component may be used in practice."
msgstr ""

#: ../../peps/pep-0440.rst:1328
msgid ""
"The PEP also explicitly guides developers in the direction of semantic "
"versioning (without requiring it), and discourages the use of several "
"aspects of the full versioning scheme that have largely been included in "
"order to cover esoteric corner cases in the practices of existing "
"projects and in repackaging software for Linux distributions."
msgstr ""

#: ../../peps/pep-0440.rst:1336
msgid "Describing version specifiers alongside the versioning scheme"
msgstr ""

#: ../../peps/pep-0440.rst:1338
msgid ""
"The main reason to even have a standardised version scheme in the first "
"place is to make it easier to do reliable automated dependency analysis. "
"It makes more sense to describe the primary use case for version "
"identifiers alongside their definition."
msgstr ""

#: ../../peps/pep-0440.rst:1345
msgid "Changing the interpretation of version specifiers"
msgstr ""

#: ../../peps/pep-0440.rst:1347
msgid ""
"The previous interpretation of version specifiers made it very easy to "
"accidentally download a pre-release version of a dependency. This in turn"
" made it difficult for developers to publish pre-release versions of "
"software to the Python Package Index, as even marking the package as "
"hidden wasn't enough to keep automated tools from downloading it, and "
"also made it harder for users to obtain the test release manually through"
" the main PyPI web interface."
msgstr ""

#: ../../peps/pep-0440.rst:1355
msgid ""
"The previous interpretation also excluded post-releases from some version"
" specifiers for no adequately justified reason."
msgstr ""

#: ../../peps/pep-0440.rst:1358
msgid ""
"The updated interpretation is intended to make it difficult to "
"accidentally accept a pre-release version as satisfying a dependency, "
"while still allowing pre-release versions to be retrieved automatically "
"when that's the only way to satisfy a dependency."
msgstr ""

#: ../../peps/pep-0440.rst:1363
msgid ""
"The \"some forward compatibility assumed\" version constraint is derived "
"from the Ruby community's \"pessimistic version constraint\" operator "
"[2]_ to allow projects to take a cautious approach to forward "
"compatibility promises, while still easily setting a minimum required "
"version for their dependencies. The spelling of the compatible release "
"clause (``~=``) is inspired by the Ruby (``~>``) and PHP (``~``) "
"equivalents."
msgstr ""

#: ../../peps/pep-0440.rst:1370
msgid ""
"Further improvements are also planned to the handling of parallel "
"installation of multiple versions of the same library, but these will "
"depend on updates to the installation database definition along with "
"improved tools for dynamic path manipulation."
msgstr ""

#: ../../peps/pep-0440.rst:1375
msgid ""
"The trailing wildcard syntax to request prefix based version matching was"
" added to make it possible to sensibly define compatible release clauses."
msgstr ""

#: ../../peps/pep-0440.rst:1380
msgid "Support for date based version identifiers"
msgstr ""

#: ../../peps/pep-0440.rst:1382
msgid ""
"Excluding date based versions caused significant problems in migrating "
"``pytz`` to the new metadata standards. It also caused concerns for the "
"OpenStack developers, as they use a date based versioning scheme and "
"would like to be able to migrate to the new metadata standards without "
"changing it."
msgstr ""

#: ../../peps/pep-0440.rst:1390
msgid "Adding version epochs"
msgstr ""

#: ../../peps/pep-0440.rst:1392
msgid ""
"Version epochs are added for the same reason they are part of other "
"versioning schemes, such as those of the Fedora and Debian Linux "
"distributions: to allow projects to gracefully change their approach to "
"numbering releases, without having a new release appear to have a lower "
"version number than previous releases and without having to change the "
"name of the project."
msgstr ""

#: ../../peps/pep-0440.rst:1399
msgid ""
"In particular, supporting version epochs allows a project that was "
"previously using date based versioning to switch to semantic versioning "
"by specifying a new version epoch."
msgstr ""

#: ../../peps/pep-0440.rst:1403
msgid ""
"The ``!`` character was chosen to delimit an epoch version rather than "
"the ``:`` character, which is commonly used in other systems, due to the "
"fact that ``:`` is not a valid character in a Windows directory name."
msgstr ""

#: ../../peps/pep-0440.rst:1409
msgid "Adding direct references"
msgstr ""

#: ../../peps/pep-0440.rst:1411
msgid ""
"Direct references are added as an \"escape clause\" to handle messy real "
"world situations that don't map neatly to the standard distribution "
"model. This includes dependencies on unpublished software for internal "
"use, as well as handling the more complex compatibility issues that may "
"arise when wrapping third party libraries as C extensions (this is of "
"especial concern to the scientific community)."
msgstr ""

#: ../../peps/pep-0440.rst:1418
msgid ""
"Index servers are deliberately given a lot of freedom to disallow direct "
"references, since they're intended primarily as a tool for integrators "
"rather than publishers. PyPI in particular is currently going through the"
" process of *eliminating* dependencies on external references, as "
"unreliable external services have the effect of slowing down installation"
" operations, as well as reducing PyPI's own apparent reliability."
msgstr ""

#: ../../peps/pep-0440.rst:1427
msgid "Adding arbitrary equality"
msgstr ""

#: ../../peps/pep-0440.rst:1429
#, python-format
msgid ""
"Arbitrary equality is added as an \"escape clause\" to handle the case "
"where someone needs to install a project which uses a non compliant "
"version. Although this PEP is able to attain ~97% compatibility with the "
"versions that are already on PyPI there are still ~3% of versions which "
"cannot be parsed. This operator gives a simple and effective way to still"
" depend on them without having to \"guess\" at the semantics of what they"
" mean (which would be required if anything other than strict string based"
" equality was supported)."
msgstr ""

#: ../../peps/pep-0440.rst:1439
msgid "Adding local version identifiers"
msgstr ""

#: ../../peps/pep-0440.rst:1441
msgid ""
"It's a fact of life that downstream integrators often need to backport "
"upstream bug fixes to older versions. It's one of the services that gets "
"Linux distro vendors paid, and application developers may also apply "
"patches they need to bundled dependencies."
msgstr ""

#: ../../peps/pep-0440.rst:1446
msgid ""
"Historically, this practice has been invisible to cross-platform language"
" specific distribution tools - the reported \"version\" in the upstream "
"metadata is the same as for the unmodified code. This inaccuracy can then"
" cause problems when attempting to work with a mixture of integrator "
"provided code and unmodified upstream code, or even just attempting to "
"identify exactly which version of the software is installed."
msgstr ""

#: ../../peps/pep-0440.rst:1453
msgid ""
"The introduction of local version identifiers and \"local version "
"labels\" into the versioning scheme, with the corresponding "
"``python.integrator`` metadata extension allows this kind of activity to "
"be represented accurately, which should improve interoperability between "
"the upstream tools and various integrated platforms."
msgstr ""

#: ../../peps/pep-0440.rst:1459
msgid ""
"The exact scheme chosen is largely modeled on the existing behavior of "
"``pkg_resources.parse_version`` and ``pkg_resources.parse_requirements``,"
" with the main distinction being that where ``pkg_resources`` currently "
"always takes the suffix into account when comparing versions for exact "
"matches, the PEP requires that the local version label of the candidate "
"version be ignored when no local version label is present in the version "
"specifier clause. Furthermore, the PEP does not attempt to impose any "
"structure on the local version labels (aside from limiting the set of "
"permitted characters and defining their ordering)."
msgstr ""

#: ../../peps/pep-0440.rst:1469
msgid ""
"This change is designed to ensure that an integrator provided version "
"like ``pip 1.5+1`` or ``pip 1.5+1.git.abc123de`` will still satisfy a "
"version specifier like ``pip>=1.5``."
msgstr ""

#: ../../peps/pep-0440.rst:1473
msgid ""
"The plus is chosen primarily for readability of local version "
"identifiers. It was chosen instead of the hyphen to prevent "
"``pkg_resources.parse_version`` from parsing it as a prerelease, which is"
" important for enabling a successful migration to the new, more "
"structured, versioning scheme. The plus was chosen instead of a tilde "
"because of the significance of the tilde in Debian's version ordering "
"algorithm."
msgstr ""

#: ../../peps/pep-0440.rst:1482
msgid "Providing explicit version normalization rules"
msgstr ""

#: ../../peps/pep-0440.rst:1484
msgid ""
"Historically, the de facto standard for parsing versions in Python has "
"been the ``pkg_resources.parse_version`` command from the setuptools "
"project. This does not attempt to reject *any* version and instead tries "
"to make something meaningful, with varying levels of success, out of "
"whatever it is given. It has a few simple rules but otherwise it more or "
"less relies largely on string comparison."
msgstr ""

#: ../../peps/pep-0440.rst:1491
msgid ""
"The normalization rules provided in this PEP exist primarily to either "
"increase the compatibility with ``pkg_resources.parse_version``, "
"particularly in documented use cases such as ``rev``, ``r``, ``pre``, etc"
" or to do something more reasonable with versions that already exist on "
"PyPI."
msgstr ""

#: ../../peps/pep-0440.rst:1496
msgid ""
"All possible normalization rules were weighed against whether or not they"
" were *likely* to cause any ambiguity (e.g. while someone might devise a "
"scheme where ``v1.0`` and ``1.0`` are considered distinct releases, the "
"likelihood of anyone actually doing that, much less on any scale that is "
"noticeable, is fairly low). They were also weighed against how "
"``pkg_resources.parse_version`` treated a particular version string, "
"especially with regards to how it was sorted. Finally each rule was "
"weighed against the kinds of additional versions it allowed, how \"ugly\""
" those versions looked, how hard there were to parse (both mentally and "
"mechanically) and how much additional compatibility it would bring."
msgstr ""

#: ../../peps/pep-0440.rst:1506
msgid ""
"The breadth of possible normalizations were kept to things that could "
"easily be implemented as part of the parsing of the version and not pre-"
"parsing transformations applied to the versions. This was done to limit "
"the side effects of each transformation as simple search and replace "
"style transforms increase the likelihood of ambiguous or \"junk\" "
"versions."
msgstr ""

#: ../../peps/pep-0440.rst:1512
msgid ""
"For an extended discussion on the various types of normalizations that "
"were considered, please see the proof of concept for :pep:`440` within "
"pip [5]_."
msgstr ""

#: ../../peps/pep-0440.rst:1517
msgid "Allowing Underscore in Normalization"
msgstr ""

#: ../../peps/pep-0440.rst:1519
msgid ""
"There are not a lot of projects on PyPI which utilize a ``_`` in the "
"version string. However this PEP allows its use anywhere that ``-`` is "
"acceptable. The reason for this is that the Wheel normalization scheme "
"specifies that ``-`` gets normalized to a ``_`` to enable easier parsing "
"of the filename."
msgstr ""

#: ../../peps/pep-0440.rst:1526
msgid "Summary of changes to PEP 440"
msgstr ""

#: ../../peps/pep-0440.rst:1528
msgid ""
"The following changes were made to this PEP based on feedback received "
"after the initial reference implementation was released in setuptools 8.0"
" and pip 6.0:"
msgstr ""

#: ../../peps/pep-0440.rst:1532
msgid ""
"The exclusive ordered comparisons were updated to no longer imply a "
"``!=V.*`` which was deemed to be surprising behavior which was too hard "
"to accurately describe. Instead the exclusive ordered comparisons will "
"simply disallow matching pre-releases, post-releases, and local versions "
"of the specified version (unless the specified version is itself a pre-"
"release, post-release or local version). For an extended discussion see "
"the threads on distutils-sig [6]_ [7]_."
msgstr ""

#: ../../peps/pep-0440.rst:1540
msgid ""
"The normalized form for release candidates was updated from 'c' to 'rc'. "
"This change was based on user feedback received when setuptools 8.0 "
"started applying normalisation to the release metadata generated when "
"preparing packages for publication on PyPI [8]_."
msgstr ""

#: ../../peps/pep-0440.rst:1545
msgid ""
"The PEP text and the ``is_canonical`` regex were updated to be explicit "
"that numeric components are specifically required to be represented as "
"sequences of ASCII digits, not arbitrary Unicode [Nd] code points. This "
"was previously implied by the version parsing regex in Appendix B, but "
"not stated explicitly [10]_."
msgstr ""

#: ../../peps/pep-0440.rst:1554
msgid "References"
msgstr "Referências"

#: ../../peps/pep-0440.rst:1556
msgid ""
"The initial attempt at a standardised version scheme, along with the "
"justifications for needing such a standard can be found in :pep:`386`."
msgstr ""

#: ../../peps/pep-0440.rst:1559
msgid ""
"`Version compatibility analysis script "
"<https://github.com/pypa/packaging/blob/master/tasks/check.py>`__"
msgstr ""

#: ../../peps/pep-0440.rst:1562
msgid ""
"`File URIs in Windows "
"<https://web.archive.org/web/20130321051043/http://blogs.msdn.com/b/ie/archive/2006/12/06"
"/file-uris-in-windows.aspx>`__"
msgstr ""

#: ../../peps/pep-0440.rst:1565
msgid ""
"`Proof of Concept: PEP 440 within pip "
"<https://github.com/pypa/pip/pull/1894>`__"
msgstr ""

#: ../../peps/pep-0440.rst:1568
msgid ""
"`PEP440: foo-X.Y.Z does not satisfy \"foo>X.Y\" "
"<https://mail.python.org/pipermail/distutils-"
"sig/2014-December/025451.html>`__"
msgstr ""

#: ../../peps/pep-0440.rst:1571
msgid ""
"`PEP440: >1.7 vs >=1.7 <https://mail.python.org/pipermail/distutils-"
"sig/2014-December/025507.html>`__"
msgstr ""

#: ../../peps/pep-0440.rst:1574
msgid ""
"`Amend PEP 440 with Wider Feedback on Release Candidates "
"<https://mail.python.org/pipermail/distutils-"
"sig/2014-December/025409.html>`__"
msgstr ""

#: ../../peps/pep-0440.rst:1577
msgid ""
"`PEP 440: regex should not permit Unicode [Nd] characters "
"<https://github.com/python/peps/pull/966>`__"
msgstr ""

#: ../../peps/pep-0440.rst:1580
msgid ""
"`Reference Implementation of PEP 440 Versions and Specifiers "
"<https://github.com/pypa/packaging/pull/1>`__"
msgstr ""

#: ../../peps/pep-0440.rst:1583
msgid ""
"`Pessimistic version constraint "
"<https://web.archive.org/web/20130509214125/http://docs.rubygems.org/read/chapter/16>`__"
msgstr ""

#: ../../peps/pep-0440.rst:1586
msgid ""
"`Changing the status of PEP 440 to Provisional "
"<https://mail.python.org/pipermail/distutils-"
"sig/2014-December/025412.html>`__"
msgstr ""

#: ../../peps/pep-0440.rst:1590
msgid "Appendix A"
msgstr ""

#: ../../peps/pep-0440.rst:1592
msgid "Metadata v2.0 guidelines versus setuptools::"
msgstr ""

#: ../../peps/pep-0440.rst:1602
msgid "Appendix B : Parsing version strings with regular expressions"
msgstr ""

#: ../../peps/pep-0440.rst:1604
msgid ""
"As noted earlier in the ``Public version identifiers`` section, published"
" version identifiers SHOULD use the canonical format. This section "
"provides regular expressions that can be used to test whether a version "
"is already in that form, and if it's not, extract the various components "
"for subsequent normalization."
msgstr ""

#: ../../peps/pep-0440.rst:1610
msgid ""
"To test whether a version identifier is in the canonical format, you can "
"use the following function::"
msgstr ""

#: ../../peps/pep-0440.rst:1617
msgid ""
"To extract the components of a version identifier, use the following "
"regular expression (as defined by the `packaging "
"<https://github.com/pypa/packaging>`_ project)::"
msgstr ""

#: ../../peps/pep-0440.rst:1659
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0440.rst:1661
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid "Nick Coghlan <ncoghlan@gmail.com>, Donald Stufft <donald@stufft.io>"
#~ msgstr ""

#~ msgid "Nick Coghlan <ncoghlan@gmail.com>"
#~ msgstr ""

#~ msgid ""
#~ "See also `Appendix B : Parsing "
#~ "version strings with regular expressions` "
#~ "which provides a regular expression to"
#~ " check strict conformance with the "
#~ "canonical format, as well as a "
#~ "more permissive regular expression accepting"
#~ " inputs that may require subsequent "
#~ "normalization."
#~ msgstr ""

#~ msgid ""
#~ "Note that `c` is considered to be"
#~ " semantically equivalent to `rc` and "
#~ "must be sorted as if it were "
#~ "`rc`. Tools MAY reject the case of"
#~ " having the same ``N`` for both "
#~ "a ``c`` and a ``rc`` in the "
#~ "same release segment as ambiguous and"
#~ " remain in compliance with the PEP."
#~ msgstr ""

#~ msgid ""
#~ "`Appendix A` shows detailed results of"
#~ " an analysis of PyPI distribution "
#~ "version information, as collected on 8th"
#~ " August, 2014. This analysis compares "
#~ "the behavior of the explicitly ordered"
#~ " version scheme defined in this PEP"
#~ " with the de facto standard defined"
#~ " by the behavior of setuptools. These"
#~ " metrics are useful, as the intent"
#~ " of this PEP is to follow "
#~ "existing setuptools behavior as closely "
#~ "as is feasible, while still throwing "
#~ "exceptions for unorderable versions (rather"
#~ " than trying to guess an appropriate"
#~ " order as setuptools does)."
#~ msgstr ""

#~ msgid ""
#~ "As noted earlier in the `Public "
#~ "version identifiers` section, published "
#~ "version identifiers SHOULD use the "
#~ "canonical format. This section provides "
#~ "regular expressions that can be used "
#~ "to test whether a version is "
#~ "already in that form, and if it's"
#~ " not, extract the various components "
#~ "for subsequent normalization."
#~ msgstr ""

