# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0282.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0282.rst:3
msgid ""
"Vinay Sajip <vinay_sajip at red-dove.com>, Trent Mick "
"<trentm@activestate.com>"
msgstr ""

#: ../../peps/pep-0282.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0282.rst:5
msgid "Final"
msgstr ""

#: ../../peps/pep-0282.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0282.rst:6
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0282.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0282.rst:8
msgid "04-Feb-2002"
msgstr ""

#: ../../peps/pep-0282.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-0282.rst:9
msgid "2.3"
msgstr ""

#: ../../peps/pep-0282.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0282.rst:14
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0282.rst:16
msgid ""
"This PEP describes a proposed logging package for Python's standard "
"library."
msgstr ""

#: ../../peps/pep-0282.rst:19
msgid ""
"Basically the system involves the user creating one or more logger "
"objects on which methods are called to log debugging notes, general "
"information, warnings, errors etc.  Different logging 'levels' can be "
"used to distinguish important messages from less important ones."
msgstr ""

#: ../../peps/pep-0282.rst:25
msgid "A registry of named singleton logger objects is maintained so that"
msgstr ""

#: ../../peps/pep-0282.rst:27
msgid ""
"different logical logging streams (or 'channels') exist (say, one for "
"'zope.zodb' stuff and another for 'mywebsite'-specific stuff)"
msgstr ""

#: ../../peps/pep-0282.rst:31
msgid "one does not have to pass logger object references around."
msgstr ""

#: ../../peps/pep-0282.rst:33
msgid ""
"The system is configurable at runtime.  This configuration mechanism "
"allows one to tune the level and type of logging done while not touching "
"the application itself."
msgstr ""

#: ../../peps/pep-0282.rst:39
msgid "Motivation"
msgstr ""

#: ../../peps/pep-0282.rst:41
msgid ""
"If a single logging mechanism is enshrined in the standard library, 1) "
"logging is more likely to be done 'well', and 2) multiple libraries will "
"be able to be integrated into larger applications which can be logged "
"reasonably coherently."
msgstr ""

#: ../../peps/pep-0282.rst:48
msgid "Influences"
msgstr ""

#: ../../peps/pep-0282.rst:50
msgid ""
"This proposal was put together after having studied the following logging"
" packages:"
msgstr ""

#: ../../peps/pep-0282.rst:53
msgid "java.util.logging in JDK 1.4 (a.k.a. JSR047) [1]_"
msgstr ""

#: ../../peps/pep-0282.rst:54
msgid "log4j [2]_"
msgstr ""

#: ../../peps/pep-0282.rst:55
msgid "the Syslog package from the Protomatter project [3]_"
msgstr ""

#: ../../peps/pep-0282.rst:56
msgid "MAL's mx.Log package [4]_"
msgstr ""

#: ../../peps/pep-0282.rst:60
msgid "Simple Example"
msgstr ""

#: ../../peps/pep-0282.rst:62
msgid ""
"This shows a very simple example of how the logging package can be used "
"to generate simple logging output on stderr."
msgstr ""

#: ../../peps/pep-0282.rst:110
msgid ""
"The above example shows the default output format.  All aspects of the "
"output format should be configurable, so that you could have output "
"formatted like this:"
msgstr ""

#: ../../peps/pep-0282.rst:124
msgid "Control Flow"
msgstr ""

#: ../../peps/pep-0282.rst:126
msgid ""
"Applications make logging calls on **Logger** objects.  Loggers are "
"organized in a hierarchical namespace and child Loggers inherit some "
"logging properties from their parents in the namespace."
msgstr ""

#: ../../peps/pep-0282.rst:130
msgid ""
"Logger names fit into a \"dotted name\" namespace, with dots (periods) "
"indicating sub-namespaces.  The namespace of logger objects therefore "
"corresponds to a single tree data structure."
msgstr ""

#: ../../peps/pep-0282.rst:134
msgid "``\"\"`` is the root of the namespace"
msgstr ""

#: ../../peps/pep-0282.rst:135
msgid "``\"Zope\"`` would be a child node of the root"
msgstr ""

#: ../../peps/pep-0282.rst:136
msgid "``\"Zope.ZODB\"`` would be a child node of ``\"Zope\"``"
msgstr ""

#: ../../peps/pep-0282.rst:138
msgid ""
"These Logger objects create **LogRecord** objects which are passed to "
"**Handler** objects for output.  Both Loggers and Handlers may use "
"logging **levels** and (optionally) **Filters** to decide if they are "
"interested in a particular LogRecord.  When it is necessary to output a "
"LogRecord externally, a Handler can (optionally) use a **Formatter** to "
"localize and format the message before sending it to an I/O stream."
msgstr ""

#: ../../peps/pep-0282.rst:146
msgid ""
"Each Logger keeps track of a set of output Handlers.  By default all "
"Loggers also send their output to all Handlers of their ancestor Loggers."
"  Loggers may, however, also be configured to ignore Handlers higher up "
"the tree."
msgstr ""

#: ../../peps/pep-0282.rst:151
msgid ""
"The APIs are structured so that calls on the Logger APIs can be cheap "
"when logging is disabled.  If logging is disabled for a given log level, "
"then the Logger can make a cheap comparison test and return.  If logging "
"is enabled for a given log level, the Logger is still careful to minimize"
" costs before passing the LogRecord into the Handlers.  In particular, "
"localization and formatting (which are relatively expensive) are deferred"
" until the Handler requests them."
msgstr ""

#: ../../peps/pep-0282.rst:160
msgid ""
"The overall Logger hierarchy can also have a level associated with it, "
"which takes precedence over the levels of individual Loggers. This is "
"done through a module-level function::"
msgstr ""

#: ../../peps/pep-0282.rst:173
msgid "Levels"
msgstr ""

#: ../../peps/pep-0282.rst:175
msgid "The logging levels, in increasing order of importance, are:"
msgstr ""

#: ../../peps/pep-0282.rst:177
msgid "DEBUG"
msgstr ""

#: ../../peps/pep-0282.rst:178
msgid "INFO"
msgstr ""

#: ../../peps/pep-0282.rst:179
msgid "WARN"
msgstr ""

#: ../../peps/pep-0282.rst:180
msgid "ERROR"
msgstr ""

#: ../../peps/pep-0282.rst:181
msgid "CRITICAL"
msgstr ""

#: ../../peps/pep-0282.rst:183
msgid ""
"The term CRITICAL is used in preference to FATAL, which is used by log4j."
"  The levels are conceptually the same - that of a serious, or very "
"serious, error.  However, FATAL implies death, which in Python implies a "
"raised and uncaught exception, traceback, and exit.  Since the logging "
"module does not enforce such an outcome from a FATAL-level log entry, it "
"makes sense to use CRITICAL in preference to FATAL."
msgstr ""

#: ../../peps/pep-0282.rst:191
msgid ""
"These are just integer constants, to allow simple comparison of "
"importance.  Experience has shown that too many levels can be confusing, "
"as they lead to subjective interpretation of which level should be "
"applied to any particular log request."
msgstr ""

#: ../../peps/pep-0282.rst:196
msgid ""
"Although the above levels are strongly recommended, the logging system "
"should not be prescriptive.  Users may define their own levels, as well "
"as the textual representation of any levels.  User defined levels must, "
"however, obey the constraints that they are all positive integers and "
"that they increase in order of increasing severity."
msgstr ""

#: ../../peps/pep-0282.rst:203
msgid ""
"User-defined logging levels are supported through two module-level "
"functions::"
msgstr ""

#: ../../peps/pep-0282.rst:218
msgid "Loggers"
msgstr ""

#: ../../peps/pep-0282.rst:220
msgid ""
"Each Logger object keeps track of a log level (or threshold) that it is "
"interested in, and discards log requests below that level."
msgstr ""

#: ../../peps/pep-0282.rst:223
msgid ""
"A **Manager** class instance maintains the hierarchical namespace of "
"named Logger objects.  Generations are denoted with dot-separated names: "
"Logger \"foo\" is the parent of Loggers \"foo.bar\" and \"foo.baz\"."
msgstr ""

#: ../../peps/pep-0282.rst:228
msgid ""
"The Manager class instance is a singleton and is not directly exposed to "
"users, who interact with it using various module-level functions."
msgstr ""

#: ../../peps/pep-0282.rst:232
msgid "The general logging method is::"
msgstr ""

#: ../../peps/pep-0282.rst:239
msgid "However, convenience functions are defined for each logging level::"
msgstr ""

#: ../../peps/pep-0282.rst:248
msgid ""
"Only one keyword argument is recognized at present - \"exc_info\". If "
"true, the caller wants exception information to be provided in the "
"logging output.  This mechanism is only needed if exception information "
"needs to be provided at **any** logging level.  In the more common case, "
"where exception information needs to be added to the log only when errors"
" occur, i.e. at the ERROR level, then another convenience method is "
"provided::"
msgstr ""

#: ../../peps/pep-0282.rst:259
msgid ""
"This should only be called in the context of an exception handler, and is"
" the preferred way of indicating a desire for exception information in "
"the log.  The other convenience methods are intended to be called with "
"exc_info only in the unusual situation where you might want to provide "
"exception information in the context of an INFO message, for example."
msgstr ""

#: ../../peps/pep-0282.rst:266
msgid ""
"The \"msg\" argument shown above will normally be a format string; "
"however, it can be any object x for which ``str(x)`` returns the format "
"string.  This facilitates, for example, the use of an object which "
"fetches a locale- specific message for an internationalized/localized "
"application, perhaps using the standard gettext module.  An outline "
"example::"
msgstr ""

#: ../../peps/pep-0282.rst:285
msgid ""
"Gathering and formatting data for a log message may be expensive, and a "
"waste if the logger was going to discard the message anyway. To see if a "
"request will be honoured by the logger, the ``isEnabledFor()`` method can"
" be used::"
msgstr ""

#: ../../peps/pep-0282.rst:298
msgid "so instead of this expensive and possibly wasteful DOM to XML conversion::"
msgstr ""

#: ../../peps/pep-0282.rst:306
msgid "one can do this::"
msgstr ""

#: ../../peps/pep-0282.rst:312
msgid ""
"When new loggers are created, they are initialized with a level which "
"signifies \"no level\".  A level can be set explicitly using the "
"``setLevel()`` method::"
msgstr ""

#: ../../peps/pep-0282.rst:319
msgid ""
"If a logger's level is not set, the system consults all its ancestors, "
"walking up the hierarchy until an explicitly set level is found.  That is"
" regarded as the \"effective level\" of the logger, and can be queried "
"via the getEffectiveLevel() method::"
msgstr ""

#: ../../peps/pep-0282.rst:326
msgid ""
"Loggers are never instantiated directly.  Instead, a module-level "
"function is used::"
msgstr ""

#: ../../peps/pep-0282.rst:331
msgid ""
"If no name is specified, the root logger is returned.  Otherwise, if a "
"logger with that name exists, it is returned.  If not, a new logger is "
"initialized and returned.  Here, \"name\" is synonymous with \"channel "
"name\"."
msgstr ""

#: ../../peps/pep-0282.rst:336
msgid ""
"Users can specify a custom subclass of Logger to be used by the system "
"when instantiating new loggers::"
msgstr ""

#: ../../peps/pep-0282.rst:341
msgid ""
"The passed class should be a subclass of Logger, and its ``__init__`` "
"method should call ``Logger.__init__``."
msgstr ""

#: ../../peps/pep-0282.rst:346
msgid "Handlers"
msgstr ""

#: ../../peps/pep-0282.rst:348
msgid ""
"Handlers are responsible for doing something useful with a given "
"``LogRecord``.  The following core Handlers will be implemented:"
msgstr ""

#: ../../peps/pep-0282.rst:351
msgid "``StreamHandler``: A handler for writing to a file-like object."
msgstr ""

#: ../../peps/pep-0282.rst:352
msgid ""
"``FileHandler``: A handler for writing to a single file or set of "
"rotating files."
msgstr ""

#: ../../peps/pep-0282.rst:354
msgid "``SocketHandler``: A handler for writing to remote TCP ports."
msgstr ""

#: ../../peps/pep-0282.rst:355
msgid ""
"``DatagramHandler``: A handler for writing to UDP sockets, for low-cost "
"logging.  Jeff Bauer already had such a system [5]_."
msgstr ""

#: ../../peps/pep-0282.rst:357
msgid ""
"``MemoryHandler``: A handler that buffers log records in memory until the"
" buffer is full or a particular condition occurs [1]_."
msgstr ""

#: ../../peps/pep-0282.rst:360
msgid "``SMTPHandler``: A handler for sending to email addresses via SMTP."
msgstr ""

#: ../../peps/pep-0282.rst:361
msgid "``SysLogHandler``: A handler for writing to Unix syslog via UDP."
msgstr ""

#: ../../peps/pep-0282.rst:362
msgid ""
"``NTEventLogHandler``: A handler for writing to event logs on Windows NT,"
" 2000 and XP."
msgstr ""

#: ../../peps/pep-0282.rst:364
msgid ""
"``HTTPHandler``: A handler for writing to a Web server with either GET or"
" POST semantics."
msgstr ""

#: ../../peps/pep-0282.rst:367
msgid ""
"Handlers can also have levels set for them using the ``setLevel()`` "
"method::"
msgstr ""

#: ../../peps/pep-0282.rst:373
msgid ""
"The FileHandler can be set up to create a rotating set of log files.  In "
"this case, the file name passed to the constructor is taken as a \"base\""
" file name.  Additional file names for the rotation are created by "
"appending .1, .2, etc. to the base file name, up to a maximum as "
"specified when rollover is requested. The setRollover method is used to "
"specify a maximum size for a log file and a maximum number of backup "
"files in the rotation."
msgstr ""

#: ../../peps/pep-0282.rst:385
msgid ""
"If maxBytes is specified as zero, no rollover ever occurs and the log "
"file grows indefinitely.  If a non-zero size is specified, when that size"
" is about to be exceeded, rollover occurs.  The rollover method ensures "
"that the base file name is always the most recent, .1 is the next most "
"recent, .2 the next most recent after that, and so on."
msgstr ""

#: ../../peps/pep-0282.rst:392
msgid ""
"There are many additional handlers implemented in the test/example "
"scripts provided with [6]_ - for example, XMLHandler and SOAPHandler."
msgstr ""

#: ../../peps/pep-0282.rst:398
msgid "LogRecords"
msgstr ""

#: ../../peps/pep-0282.rst:400
msgid ""
"A LogRecord acts as a receptacle for information about a logging event.  "
"It is little more than a dictionary, though it does define a "
"``getMessage`` method which merges a message with optional runarguments."
msgstr ""

#: ../../peps/pep-0282.rst:407
msgid "Formatters"
msgstr ""

#: ../../peps/pep-0282.rst:409
msgid ""
"A Formatter is responsible for converting a LogRecord to a string "
"representation.  A Handler may call its Formatter before writing a "
"record.  The following core Formatters will be implemented:"
msgstr ""

#: ../../peps/pep-0282.rst:413
#, python-format
msgid "``Formatter``: Provide printf-like formatting, using the % operator."
msgstr ""

#: ../../peps/pep-0282.rst:415
msgid ""
"``BufferingFormatter``: Provide formatting for multiple messages, with "
"header and trailer formatting support."
msgstr ""

#: ../../peps/pep-0282.rst:418
msgid ""
"Formatters are associated with Handlers by calling ``setFormatter()`` on "
"a handler::"
msgstr ""

#: ../../peps/pep-0282.rst:423
#, python-format
msgid ""
"Formatters use the % operator to format the logging message.  The format "
"string should contain ``%(name)x`` and the attribute dictionary of the "
"LogRecord is used to obtain message-specific data.  The following "
"attributes are provided:"
msgstr ""

#: ../../peps/pep-0282.rst:429
#, python-format
msgid "``%(name)s``"
msgstr ""

#: ../../peps/pep-0282.rst:429
msgid "Name of the logger (logging channel)"
msgstr ""

#: ../../peps/pep-0282.rst:431
#, python-format
msgid "``%(levelno)s``"
msgstr ""

#: ../../peps/pep-0282.rst:431
msgid "Numeric logging level for the message (DEBUG, INFO, WARN, ERROR, CRITICAL)"
msgstr ""

#: ../../peps/pep-0282.rst:434
#, python-format
msgid "``%(levelname)s``"
msgstr ""

#: ../../peps/pep-0282.rst:434
msgid ""
"Text logging level for the message (\"DEBUG\", \"INFO\", \"WARN\", "
"\"ERROR\", \"CRITICAL\")"
msgstr ""

#: ../../peps/pep-0282.rst:437
#, python-format
msgid "``%(pathname)s``"
msgstr ""

#: ../../peps/pep-0282.rst:437
msgid ""
"Full pathname of the source file where the logging call was issued (if "
"available)"
msgstr ""

#: ../../peps/pep-0282.rst:440
#, python-format
msgid "``%(filename)s``"
msgstr ""

#: ../../peps/pep-0282.rst:440
msgid "Filename portion of pathname"
msgstr ""

#: ../../peps/pep-0282.rst:442
#, python-format
msgid "``%(module)s``"
msgstr ""

#: ../../peps/pep-0282.rst:442
msgid "Module from which logging call was made"
msgstr ""

#: ../../peps/pep-0282.rst:444
#, python-format
msgid "``%(lineno)d``"
msgstr ""

#: ../../peps/pep-0282.rst:444
msgid "Source line number where the logging call was issued (if available)"
msgstr ""

#: ../../peps/pep-0282.rst:447
#, python-format
msgid "``%(created)f``"
msgstr ""

#: ../../peps/pep-0282.rst:447
msgid "Time when the LogRecord was created (``time.time()`` return value)"
msgstr ""

#: ../../peps/pep-0282.rst:450
#, python-format
msgid "``%(asctime)s``"
msgstr ""

#: ../../peps/pep-0282.rst:450
msgid "Textual time when the LogRecord was created"
msgstr ""

#: ../../peps/pep-0282.rst:452
#, python-format
msgid "``%(msecs)d``"
msgstr ""

#: ../../peps/pep-0282.rst:452
msgid "Millisecond portion of the creation time"
msgstr ""

#: ../../peps/pep-0282.rst:454
#, python-format
msgid "``%(relativeCreated)d``"
msgstr ""

#: ../../peps/pep-0282.rst:454
msgid ""
"Time in milliseconds when the LogRecord was created, relative to the time"
" the logging module was loaded (typically at application startup time)"
msgstr ""

#: ../../peps/pep-0282.rst:458
#, python-format
msgid "``%(thread)d``"
msgstr ""

#: ../../peps/pep-0282.rst:458
msgid "Thread ID (if available)"
msgstr ""

#: ../../peps/pep-0282.rst:460
#, python-format
msgid "``%(message)s``"
msgstr ""

#: ../../peps/pep-0282.rst:460
msgid "The result of record.getMessage(), computed just as the record is emitted"
msgstr ""

#: ../../peps/pep-0282.rst:464
#, python-format
msgid ""
"If a formatter sees that the format string includes \"(asctime)s\", the "
"creation time is formatted into the LogRecord's asctime attribute.  To "
"allow flexibility in formatting dates, Formatters are initialized with a "
"format string for the message as a whole, and a separate format string "
"for date/time.  The date/time format string should be in time.strftime "
"format.  The default value for the message format is \"%(message)s\".  "
"The default date/time format is ISO8601."
msgstr ""

#: ../../peps/pep-0282.rst:473
msgid ""
"The formatter uses a class attribute, \"converter\", to indicate how to "
"convert a time from seconds to a tuple.  By default, the value of "
"\"converter\" is \"time.localtime\".  If needed, a different converter "
"(e.g.  \"time.gmtime\") can be set on an individual formatter instance, "
"or the class attribute changed to affect all formatter instances."
msgstr ""

#: ../../peps/pep-0282.rst:482
msgid "Filters"
msgstr ""

#: ../../peps/pep-0282.rst:484
msgid ""
"When level-based filtering is insufficient, a Filter can be called by a "
"Logger or Handler to decide if a LogRecord should be output. Loggers and "
"Handlers can have multiple filters installed, and any one of them can "
"veto a LogRecord being output."
msgstr ""

#: ../../peps/pep-0282.rst:499
msgid ""
"The default behaviour allows a Filter to be initialized with a Logger "
"name.  This will only allow through events which are generated using the "
"named logger or any of its children.  For example, a filter initialized "
"with \"A.B\" will allow events logged by loggers \"A.B\", \"A.B.C\", "
"\"A.B.C.D\", \"A.B.D\" etc. but not \"A.BB\", \"B.A.B\" etc.  If "
"initialized with the empty string, all events are passed by the Filter.  "
"This filter behaviour is useful when it is desired to focus attention on "
"one particular area of an application; the focus can be changed simply by"
" changing a filter attached to the root logger."
msgstr ""

#: ../../peps/pep-0282.rst:510
msgid "There are many examples of Filters provided in [6]_."
msgstr ""

#: ../../peps/pep-0282.rst:514
msgid "Configuration"
msgstr ""

#: ../../peps/pep-0282.rst:516
msgid ""
"The main benefit of a logging system like this is that one can control "
"how much and what logging output one gets from an application without "
"changing that application's source code. Therefore, although "
"configuration can be performed through the logging API, it must also be "
"possible to change the logging configuration without changing an "
"application at all.  For long-running programs like Zope, it should be "
"possible to change the logging configuration while the program is "
"running."
msgstr ""

#: ../../peps/pep-0282.rst:525
msgid "Configuration includes the following:"
msgstr ""

#: ../../peps/pep-0282.rst:527
msgid "What logging level a logger or handler should be interested in."
msgstr ""

#: ../../peps/pep-0282.rst:528
msgid "What handlers should be attached to which loggers."
msgstr ""

#: ../../peps/pep-0282.rst:529
msgid "What filters should be attached to which handlers and loggers."
msgstr ""

#: ../../peps/pep-0282.rst:530
msgid "Specifying attributes specific to certain handlers and filters."
msgstr ""

#: ../../peps/pep-0282.rst:532
msgid ""
"In general each application will have its own requirements for how a user"
" may configure logging output.  However, each application will specify "
"the required configuration to the logging system through a standard "
"mechanism."
msgstr ""

#: ../../peps/pep-0282.rst:537
msgid ""
"The most simple configuration is that of a single handler, writing to "
"stderr, attached to the root logger.  This configuration is set up by "
"calling the ``basicConfig()`` function once the logging module has been "
"imported."
msgstr ""

#: ../../peps/pep-0282.rst:546
msgid ""
"For more sophisticated configurations, this PEP makes no specific "
"proposals, for the following reasons:"
msgstr ""

#: ../../peps/pep-0282.rst:549
msgid "A specific proposal may be seen as prescriptive."
msgstr ""

#: ../../peps/pep-0282.rst:550
msgid ""
"Without the benefit of wide practical experience in the Python community,"
" there is no way to know whether any given configuration approach is a "
"good one.  That practice can't really come until the logging module is "
"used, and that means until **after** Python 2.3 has shipped."
msgstr ""

#: ../../peps/pep-0282.rst:555
msgid ""
"There is a likelihood that different types of applications may require "
"different configuration approaches, so that no \"one size fits all\"."
msgstr ""

#: ../../peps/pep-0282.rst:559
msgid ""
"The reference implementation [6]_ has a working configuration file "
"format, implemented for the purpose of proving the concept and suggesting"
" one possible alternative.  It may be that separate extension modules, "
"not part of the core Python distribution, are created for logging "
"configuration and log viewing, supplemental handlers and other features "
"which are not of interest to the bulk of the community."
msgstr ""

#: ../../peps/pep-0282.rst:569
msgid "Thread Safety"
msgstr ""

#: ../../peps/pep-0282.rst:571
msgid ""
"The logging system should support thread-safe operation without any "
"special action needing to be taken by its users."
msgstr ""

#: ../../peps/pep-0282.rst:576
msgid "Module-Level Functions"
msgstr ""

#: ../../peps/pep-0282.rst:578
msgid ""
"To support use of the logging mechanism in short scripts and small "
"applications, module-level functions ``debug()``, ``info()``, ``warn()``,"
" ``error()``, ``critical()`` and ``exception()`` are provided.  These "
"work in the same way as the correspondingly named methods of Logger - in "
"fact they delegate to the corresponding methods on the root logger.  A "
"further convenience provided by these functions is that if no "
"configuration has been done, ``basicConfig()`` is automatically called."
msgstr ""

#: ../../peps/pep-0282.rst:587
msgid "At application exit, all handlers can be flushed by calling the function::"
msgstr ""

#: ../../peps/pep-0282.rst:591
msgid "This will flush and close all handlers."
msgstr ""

#: ../../peps/pep-0282.rst:595
msgid "Implementation"
msgstr ""

#: ../../peps/pep-0282.rst:597
msgid "The reference implementation is Vinay Sajip's logging module [6]_."
msgstr ""

#: ../../peps/pep-0282.rst:601
msgid "Packaging"
msgstr ""

#: ../../peps/pep-0282.rst:603
msgid ""
"The reference implementation is implemented as a single module. This "
"offers the simplest interface - all users have to do is \"import "
"logging\" and they are in a position to use all the functionality "
"available."
msgstr ""

#: ../../peps/pep-0282.rst:610
msgid "References"
msgstr "Referências"

#: ../../peps/pep-0282.rst:612
msgid "java.util.logging http://java.sun.com/j2se/1.4/docs/guide/util/logging/"
msgstr ""

#: ../../peps/pep-0282.rst:615
msgid "log4j: a Java logging package https://logging.apache.org/log4j/"
msgstr ""

#: ../../peps/pep-0282.rst:618
msgid ""
"Protomatter's Syslog http://protomatter.sourceforge.net/1.1.6/index.html "
"http://protomatter.sourceforge.net/1.1.6/javadoc/com/protomatter/syslog"
"/syslog-whitepaper.html"
msgstr ""

#: ../../peps/pep-0282.rst:622
msgid ""
"MAL mentions his mx.Log logging module: https://mail.python.org/pipermail"
"/python-dev/2002-February/019767.html"
msgstr ""

#: ../../peps/pep-0282.rst:625
msgid "Jeff Bauer's Mr. Creosote http://starship.python.net/crew/jbauer/creosote/"
msgstr ""

#: ../../peps/pep-0282.rst:628
msgid "Vinay Sajip's logging module. https://old.red-dove.com/python_logging.html"
msgstr ""

#: ../../peps/pep-0282.rst:633
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0282.rst:635
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid ""
#~ "log4j: a Java logging package "
#~ "http://jakarta.apache.org/log4j/docs/index.html"
#~ msgstr ""

