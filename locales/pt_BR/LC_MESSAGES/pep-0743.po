# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-14 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: pt_BR\n"
"Language-Team: pt_BR <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../peps/peps/pep-0743.rst
msgid "Author"
msgstr ""

#: ../../peps/peps/pep-0743.rst:3
msgid "Victor Stinner <vstinner@python.org>"
msgstr ""

#: ../../peps/peps/pep-0743.rst
msgid "Status"
msgstr ""

#: ../../peps/peps/pep-0743.rst:4
msgid "Draft"
msgstr ""

#: ../../peps/peps/pep-0743.rst
msgid "Type"
msgstr ""

#: ../../peps/peps/pep-0743.rst:5
msgid "Standards Track"
msgstr ""

#: ../../peps/peps/pep-0743.rst
msgid "Created"
msgstr ""

#: ../../peps/peps/pep-0743.rst:6
msgid "11-Mar-2024"
msgstr ""

#: ../../peps/peps/pep-0743.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/peps/pep-0743.rst:7
msgid "3.13"
msgstr ""

#: ../../peps/peps/pep-0743.rst:13
msgid "Abstract"
msgstr ""

#: ../../peps/peps/pep-0743.rst:15
msgid ""
"Add ``Py_COMPAT_API_VERSION`` and ``Py_COMPAT_API_VERSION_MAX`` macros to "
"opt-in for planned incompatible C API changes in a C extension. Maintainers "
"can decide when they make their C extension compatible and also decide which "
"future Python version they want to be compatible with."
msgstr ""

#: ../../peps/peps/pep-0743.rst:23
msgid "Rationale"
msgstr ""

#: ../../peps/peps/pep-0743.rst:26
msgid "Python releases enforce C API changes"
msgstr ""

#: ../../peps/peps/pep-0743.rst:28
msgid ""
"Every Python 3.x release has a long list of C API changes, including "
"incompatible changes. C extensions have to be updated to work on the newly "
"released Python."
msgstr ""

#: ../../peps/peps/pep-0743.rst:32
msgid ""
"Some incompatible changes are driven by new features: they cannot be "
"avoided, unless we decide to not add these features. Other reasons:"
msgstr ""

#: ../../peps/peps/pep-0743.rst:35
msgid "Remove deprecated API (see :pep:`387`)."
msgstr ""

#: ../../peps/peps/pep-0743.rst:36
msgid "Ease the implementation of another change."
msgstr ""

#: ../../peps/peps/pep-0743.rst:37
msgid "Change or remove error-prone API."
msgstr ""

#: ../../peps/peps/pep-0743.rst:39
msgid ""
"Currently, there is no middle ground between \"not change the C API\" and "
"\"incompatible C API changes impact everybody\". Either a C extension is "
"updated or the new Python version cannot be used. Such all-or-nothing deal "
"does not satisfy C extension maintainers nor C extensions users."
msgstr ""

#: ../../peps/peps/pep-0743.rst:46
msgid "Limited C API"
msgstr ""

#: ../../peps/peps/pep-0743.rst:48
msgid ""
"The limited C API is versioned: the ``Py_LIMITED_API`` macro can be set to a "
"Python version to select which API is available. On the Python side, it "
"allows introducing incompatible changes at a specific ``Py_LIMITED_API`` "
"version. For example, if ``Py_LIMITED_API`` is set to Python 3.11 or newer, "
"the ``<stdio.h>`` is no longer included by ``Python.h``, whereas C "
"extensions targeting Python 3.10 are not affected."
msgstr ""

#: ../../peps/peps/pep-0743.rst:56
msgid ""
"The difference here is that upgrading Python does not change if ``<stdio."
"h>`` is included or not, but updating ``Py_LIMITED_API`` does. Updating "
"``Py_LIMITED_API`` is an deliberate action made by the C extension "
"maintainer. It gives more freedom to decide **when** the maintainer is ready "
"to deal with the latest batch of incompatible changes."
msgstr ""

#: ../../peps/peps/pep-0743.rst:63
msgid "A similar version can be used with the regular (non-limited) C API."
msgstr ""

#: ../../peps/peps/pep-0743.rst:67
msgid "Deprecation and compiler warnings"
msgstr ""

#: ../../peps/peps/pep-0743.rst:69
msgid ""
"Deprecated functions are marked with ``Py_DEPRECATED()``. Using a deprecated "
"function emits a compiler warning."
msgstr ""

#: ../../peps/peps/pep-0743.rst:72
msgid ""
"The problem is that ``pip`` and ``build`` tools hide compiler logs by "
"default, unless a build fails.  Moreover, it's easy to miss a single warning "
"in the middle of hundred lines of logs."
msgstr ""

#: ../../peps/peps/pep-0743.rst:77
msgid "Schedule changes"
msgstr ""

#: ../../peps/peps/pep-0743.rst:79
msgid ""
"Currently, there is no way to schedule a C API change: announce it but also "
"provide a way to maintainers to test their C extensions with the change. "
"Either a change is not made, or everybody must update their code if they "
"want to update Python."
msgstr ""

#: ../../peps/peps/pep-0743.rst:86
msgid "Specification"
msgstr ""

#: ../../peps/peps/pep-0743.rst:89
msgid "New macros"
msgstr ""

#: ../../peps/peps/pep-0743.rst:91
msgid ""
"Add new ``Py_COMPAT_API_VERSION`` and ``Py_COMPAT_API_VERSION_MAX`` macros. "
"They can be set to test if a C extension is prepared for future C API "
"changes: compatible with future Python versions."
msgstr ""

#: ../../peps/peps/pep-0743.rst:95
msgid ""
"The ``Py_COMPAT_API_VERSION`` macro can be set to a specific Python version. "
"For example, ``Py_COMPAT_API_VERSION=0x030e0000`` tests C API changes "
"scheduled in Python 3.14."
msgstr ""

#: ../../peps/peps/pep-0743.rst:99
msgid ""
"If the ``Py_COMPAT_API_VERSION`` macro is set to "
"``Py_COMPAT_API_VERSION_MAX``, all scheduled C API changes are tested at "
"once."
msgstr ""

#: ../../peps/peps/pep-0743.rst:103
msgid ""
"If the ``Py_COMPAT_API_VERSION`` macro is not set, it is to "
"``PY_VERSION_HEX`` by default."
msgstr ""

#: ../../peps/peps/pep-0743.rst:106
msgid ""
"The ``Py_COMPAT_API_VERSION`` macro can be set in a single C file or for a "
"whole project in compiler flags. The macro does not affected other projects "
"or Python itself."
msgstr ""

#: ../../peps/peps/pep-0743.rst:112
msgid "Example in Python"
msgstr ""

#: ../../peps/peps/pep-0743.rst:114
msgid ""
"For example, the ``PyImport_ImportModuleNoBlock()`` function is deprecated "
"in Python 3.13 and scheduled for removal in Python 3.15. The function can be "
"declared in the Python C API with the following declaration:"
msgstr ""

#: ../../peps/peps/pep-0743.rst:127
msgid ""
"If ``if Py_COMPAT_API_VERSION`` is equal to or greater than Python 3.15 "
"(``0x030f0000``), the ``PyImport_ImportModuleNoBlock()`` function is not "
"declared, and so using it fails with a build error."
msgstr ""

#: ../../peps/peps/pep-0743.rst:132
msgid "Goals"
msgstr ""

#: ../../peps/peps/pep-0743.rst:134
msgid ""
"Reduce the number of C API changes affecting C extensions when updating "
"Python."
msgstr ""

#: ../../peps/peps/pep-0743.rst:136
msgid ""
"When testing C extensions (for example, optional CI test), "
"``Py_COMPAT_API_VERSION`` can be set to ``Py_COMPAT_API_VERSION_MAX`` to "
"detect future incompatibilities. For mandatory tests, it is recommended to "
"set ``Py_COMPAT_API_VERSION`` to a specific Python version."
msgstr ""

#: ../../peps/peps/pep-0743.rst:141
msgid ""
"For core developers, make sure that the C API can still evolve without being "
"afraid of breaking an unknown number of C extensions."
msgstr ""

#: ../../peps/peps/pep-0743.rst:145
msgid "Non-goals"
msgstr ""

#: ../../peps/peps/pep-0743.rst:147
msgid ""
"Freeze the API forever: this is not the stable ABI. For example, deprecated "
"functions will continue to be removed on a regular basis."
msgstr ""

#: ../../peps/peps/pep-0743.rst:149
msgid ""
"C extensions maintainers not using ``Py_COMPAT_API_VERSION`` will still be "
"affected by C API changes when updating Python."
msgstr ""

#: ../../peps/peps/pep-0743.rst:151
msgid ""
"Provide a stable ABI: the macro only impacts the regular (non-limited) API."
msgstr ""

#: ../../peps/peps/pep-0743.rst:153
msgid "Silver bullet solving all C API issues."
msgstr ""

#: ../../peps/peps/pep-0743.rst:157
msgid "Examples of ``Py_COMPAT_API_VERSION`` usages"
msgstr ""

#: ../../peps/peps/pep-0743.rst:159
msgid "Remove deprecated functions."
msgstr ""

#: ../../peps/peps/pep-0743.rst:160
msgid ""
"Remove deprecated structure members, such as ``PyBytesObject.ob_shash``."
msgstr ""

#: ../../peps/peps/pep-0743.rst:162
msgid ""
"Remove a standard ``#include``, such as ``#include <string.h>``, from "
"``<Python.h>``."
msgstr ""

#: ../../peps/peps/pep-0743.rst:164
msgid ""
"Change the behavior of a function or a macro. For example, calling "
"``PyObject_SetAttr(obj, name, NULL)`` can fail, to enforce the usage of the "
"``PyObject_DelAttr()`` function instead to delete an attribute."
msgstr ""

#: ../../peps/peps/pep-0743.rst:170
msgid "Implementation"
msgstr ""

#: ../../peps/peps/pep-0743.rst:172
msgid "`Issue gh-116587 <https://github.com/python/cpython/issues/116587>`_"
msgstr ""

#: ../../peps/peps/pep-0743.rst:173
msgid ""
"PR: `Add Py_COMPAT_API_VERSION and Py_COMPAT_API_VERSION_MAX macros <https://"
"github.com/python/cpython/pull/116588>`_"
msgstr ""

#: ../../peps/peps/pep-0743.rst:178
msgid "Backwards Compatibility"
msgstr ""

#: ../../peps/peps/pep-0743.rst:180
msgid "There is no impact on backward compatibility."
msgstr ""

#: ../../peps/peps/pep-0743.rst:182
msgid ""
"Adding ``Py_COMPAT_API_VERSION`` and ``Py_COMPAT_API_VERSION_MAX`` macros "
"has no effect on backward compatibility. Only developers setting the "
"``Py_COMPAT_API_VERSION`` macro in their project will be impacted by effects "
"of this macro which is the expected behavior."
msgstr ""

#: ../../peps/peps/pep-0743.rst:189
msgid "Discussions"
msgstr ""

#: ../../peps/peps/pep-0743.rst:191
msgid ""
"C API Evolutions: `Macro to hide deprecated functions <https://github.com/"
"capi-workgroup/api-evolution/issues/24>`_ (October 2023)"
msgstr ""

#: ../../peps/peps/pep-0743.rst:194
msgid ""
"C API Problems: `Opt-in macro for a new clean API? Subset of functions with "
"no known issues <https://github.com/capi-workgroup/problems/issues/54>`_ "
"(June 2023)"
msgstr ""

#: ../../peps/peps/pep-0743.rst:201
msgid "Prior Art"
msgstr ""

#: ../../peps/peps/pep-0743.rst:203
msgid "``Py_LIMITED_API`` macro of :pep:`384` \"Defining a Stable ABI\"."
msgstr ""

#: ../../peps/peps/pep-0743.rst:204
msgid ""
"Rejected :pep:`606` \"Python Compatibility Version\" which has a global "
"scope."
msgstr ""

#: ../../peps/peps/pep-0743.rst:209
msgid "Copyright"
msgstr ""

#: ../../peps/peps/pep-0743.rst:211
msgid ""
"This document is placed in the public domain or under the CC0-1.0-Universal "
"license, whichever is more permissive."
msgstr ""
