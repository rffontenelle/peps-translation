# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0536.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0536.rst:5
msgid "Philipp Angerer <phil.angerer@gmail.com>"
msgstr ""

#: ../../peps/pep-0536.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0536.rst:6
msgid "Withdrawn"
msgstr ""

#: ../../peps/pep-0536.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0536.rst:7
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0536.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0536.rst:9
msgid "11-Dec-2016"
msgstr ""

#: ../../peps/pep-0536.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-0536.rst:10
msgid "3.7"
msgstr ""

#: ../../peps/pep-0536.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0536.rst:11
msgid ""
"`18-Aug-2016 <https://mail.python.org/archives/list/python-"
"ideas@python.org/thread/FOYKXOFWEINPVQSK2XGEHKXSTEVO5WWA/>`__, "
"`23-Dec-2016 <https://mail.python.org/archives/list/python-"
"ideas@python.org/thread/YKKEA5NIMMKHZTMRE5UFHST4WQ4NN3XJ/>`__, "
"`15-Mar-2019 <https://mail.python.org/archives/list/python-"
"dev@python.org/thread/N43O4KNLZW4U7YZC4NVPCETZIVRDUVU2/>`__"
msgstr ""

#: ../../peps/pep-0536.rst
msgid "Resolution"
msgstr ""

#: ../../peps/pep-0536.rst:14
msgid "https://discuss.python.org/t/pep-536-should-be-marked-as-rejected/35226/4"
msgstr ""

#: ../../peps/pep-0536.rst:17
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0536.rst:19
msgid ""
":pep:`498` introduced Literal String Interpolation (or “f-strings”). The "
"expression portions of those literals however are subject to certain "
"restrictions.  This PEP proposes a formal grammar lifting those "
"restrictions, promoting “f-strings” to “f expressions” or f-literals."
msgstr ""

#: ../../peps/pep-0536.rst:24
msgid ""
"This PEP expands upon the f-strings introduced by :pep:`498`, so this "
"text requires familiarity with :pep:`498`."
msgstr ""

#: ../../peps/pep-0536.rst:28
msgid "PEP Withdrawal"
msgstr ""

#: ../../peps/pep-0536.rst:30
msgid ""
"This PEP has been withdrawn in favour of :pep:`701`. :pep:`701` addresses"
" all important points of this PEP."
msgstr ""

#: ../../peps/pep-0536.rst:35
msgid "Terminology"
msgstr ""

#: ../../peps/pep-0536.rst:37
msgid ""
"This text will refer to the existing grammar as “f-strings”, and the "
"proposed one as “f-literals”."
msgstr ""

#: ../../peps/pep-0536.rst:40
msgid ""
"Furthermore, it will refer to the ``{}``-delimited expressions in "
"f-literals/f-strings as “expression portions” and the static string "
"content around them as “string portions”."
msgstr ""

#: ../../peps/pep-0536.rst:45
msgid "Motivation"
msgstr ""

#: ../../peps/pep-0536.rst:47
msgid ""
"The current implementation of f-strings in CPython relies on the existing"
" string parsing machinery and a post processing of its tokens.  This "
"results in several restrictions to the possible expressions usable within"
" f-strings:"
msgstr ""

#: ../../peps/pep-0536.rst:51
msgid ""
"It is impossible to use the quote character delimiting the f-string "
"within the expression portion::"
msgstr ""

#: ../../peps/pep-0536.rst:58
msgid ""
"A previously considered way around it would lead to escape sequences in "
"executed code and is prohibited in f-strings::"
msgstr ""

#: ../../peps/pep-0536.rst:64
msgid "Comments are forbidden even in multi-line f-strings::"
msgstr ""

#: ../../peps/pep-0536.rst:71
msgid "Expression portions need to wrap ``':'`` and ``'!'`` in braces::"
msgstr ""

#: ../../peps/pep-0536.rst:76
msgid ""
"These limitations serve no purpose from a language user perspective and "
"can be lifted by giving f-literals a regular grammar without exceptions "
"and implementing it using dedicated parse code."
msgstr ""

#: ../../peps/pep-0536.rst:81
msgid "Rationale"
msgstr ""

#: ../../peps/pep-0536.rst:85
msgid ""
"The restrictions mentioned in Motivation_ are non-obvious and counter-"
"intuitive unless the user is familiar with the f-literals’ implementation"
" details."
msgstr ""

#: ../../peps/pep-0536.rst:88
msgid ""
"As mentioned, a previous version of :pep:`498` allowed escape sequences "
"anywhere in f-strings, including as ways to encode the braces delimiting "
"the expression portions and in their code.  They would be expanded before"
" the code is parsed, which would have had several important "
"ramifications:"
msgstr ""

#: ../../peps/pep-0536.rst:93
msgid ""
"#. It would not be clear to human readers which portions are Expressions "
"and which are strings.  Great material for an “obfuscated/underhanded "
"Python challenge” #. Syntax highlighters are good in parsing nested "
"grammar, but not in recognizing escape sequences.  ECMAScript 2016 "
"(JavaScript) allows escape sequences in its identifiers [1]_ and the "
"author knows of no syntax highlighter able to correctly highlight code "
"making use of this."
msgstr ""

#: ../../peps/pep-0536.rst:101
msgid ""
"As a consequence, the expression portions would be harder to recognize "
"with and without the aid of syntax highlighting.  With the new grammar, "
"it is easy to extend syntax highlighters to correctly parse and display "
"f-literals:"
msgstr ""

#: ../../peps/pep-0536.rst:113
msgid ""
"Highlighting expression portions with possible escape sequences would "
"mean to create a modified copy of all rules of the complete expression "
"grammar, accounting for the possibility of escape sequences in key words,"
" delimiters, and all other language syntax. One such duplication would "
"yield one level of escaping depth and have to be repeated for a deeper "
"escaping in a recursive f-literal. This is the case since no highlighting"
" engine known to the author supports expanding escape sequences before "
"applying rules to a certain context. Nesting contexts however is a "
"standard feature of all highlighting engines."
msgstr ""

#: ../../peps/pep-0536.rst:123
msgid ""
"Familiarity also plays a role: Arbitrary nesting of expressions without "
"expansion of escape sequences is available in every single other language"
" employing a string interpolation method that uses expressions instead of"
" just variable names. [2]_"
msgstr ""

#: ../../peps/pep-0536.rst:129
msgid "Specification"
msgstr ""

#: ../../peps/pep-0536.rst:131
msgid ""
":pep:`498` specified f-strings as the following, but places restrictions "
"on it::"
msgstr ""

#: ../../peps/pep-0536.rst:135
msgid ""
"All restrictions mentioned in the PEP are lifted from f-literals, as "
"explained below:"
msgstr ""

#: ../../peps/pep-0536.rst:138
msgid ""
"Expression portions may now contain strings delimited with the same kind "
"of quote that is used to delimit the f-literal."
msgstr ""

#: ../../peps/pep-0536.rst:140
msgid ""
"Backslashes may now appear within expressions just like anywhere else in "
"Python code.  In case of strings nested within f-literals, escape "
"sequences are expanded when the innermost string is evaluated."
msgstr ""

#: ../../peps/pep-0536.rst:143
msgid ""
"Comments, using the ``'#'`` character, are possible only in multi-line "
"f-literals, since comments are terminated by the end of the line (which "
"makes closing a single-line f-literal impossible)."
msgstr ""

#: ../../peps/pep-0536.rst:146
msgid ""
"Expression portions may contain ``':'`` or ``'!'`` wherever syntactically"
" valid.  The first ``':'`` or ``'!'`` that is not part of an expression "
"has to be followed a valid coercion or format specifier."
msgstr ""

#: ../../peps/pep-0536.rst:150
msgid ""
"A remaining restriction not explicitly mentioned by :pep:`498` is line "
"breaks in expression portions.  Since strings delimited by single ``'`` "
"or ``\"`` characters are expected to be single line, line breaks remain "
"illegal in expression portions of single line strings."
msgstr ""

#: ../../peps/pep-0536.rst:155
msgid ""
"Is lifting of the restrictions sufficient, or should we specify a more "
"complete grammar?"
msgstr ""

#: ../../peps/pep-0536.rst:159
msgid "Backwards Compatibility"
msgstr ""

#: ../../peps/pep-0536.rst:161
msgid ""
"f-literals are fully backwards compatible to f-strings, and expands the "
"syntax considered legal."
msgstr ""

#: ../../peps/pep-0536.rst:165
msgid "Reference Implementation"
msgstr ""

#: ../../peps/pep-0536.rst:167
msgid "TBD"
msgstr ""

#: ../../peps/pep-0536.rst:170
msgid "References"
msgstr "Referências"

#: ../../peps/pep-0536.rst:172
msgid ""
"ECMAScript ``IdentifierName`` specification ( http://ecma-"
"international.org/ecma-262/6.0/#sec-names-and-keywords )"
msgstr ""

#: ../../peps/pep-0536.rst:175
msgid ""
"Yes, ``const cthulhu = { "
"H̹̙̦̮͉̩̗̗ͧ̇̏̊̾Eͨ͆͒̆ͮ̃͏̷̮̣̫̤̣Cͯ̂͐͏̨̛͔̦̟͈̻O̜͎͍͙͚̬̝̣̽ͮ͐͗̀ͤ̍̀͢M̴̡̲̭͍͇̼̟̯̦̉̒͠Ḛ̛̙̞̪̗ͥͤͩ̾͑̔͐ͅṮ̴̷̷̗̼͍̿̿̓̽͐H̙̙̔̄͜\\u0042:"
" 42 }`` is valid ECMAScript 2016"
msgstr ""

#: ../../peps/pep-0536.rst:177
msgid ""
"Wikipedia article on string interpolation ( "
"https://en.wikipedia.org/wiki/String_interpolation )"
msgstr ""

#: ../../peps/pep-0536.rst:181
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0536.rst:183
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid "Deferred"
#~ msgstr ""

#~ msgid "12-Dec-2016"
#~ msgstr ""

#~ msgid "PEP Status"
#~ msgstr ""

#~ msgid "This PEP is deferred until an implementation is available."
#~ msgstr ""

