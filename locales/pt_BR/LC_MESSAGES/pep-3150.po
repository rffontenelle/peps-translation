# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-3150.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-3150.rst:5
msgid "Alyssa Coghlan <ncoghlan@gmail.com>"
msgstr ""

#: ../../peps/pep-3150.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-3150.rst:6
msgid "Deferred"
msgstr ""

#: ../../peps/pep-3150.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-3150.rst:7
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-3150.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-3150.rst:9
msgid "09-Jul-2010"
msgstr ""

#: ../../peps/pep-3150.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-3150.rst:10
msgid "3.4"
msgstr ""

#: ../../peps/pep-3150.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-3150.rst:11
msgid "14-Jul-2010, 21-Apr-2011, 13-Jun-2011"
msgstr ""

#: ../../peps/pep-3150.rst:15
msgid "Abstract"
msgstr ""

#: ../../peps/pep-3150.rst:17
msgid ""
"This PEP proposes the addition of an optional ``given`` clause to several"
" Python statements that do not currently have an associated code suite. "
"This clause will create a statement local namespace for additional names "
"that are accessible in the associated statement, but do not become part "
"of the containing namespace."
msgstr ""

#: ../../peps/pep-3150.rst:23
msgid ""
"Adoption of a new symbol, ``?``, is proposed to denote a forward "
"reference to the namespace created by running the associated code suite. "
"It will be a reference to a ``types.SimpleNamespace`` object."
msgstr ""

#: ../../peps/pep-3150.rst:27
msgid ""
"The primary motivation is to enable a more declarative style of "
"programming, where the operation to be performed is presented to the "
"reader first, and the details of the necessary subcalculations are "
"presented in the following indented suite. As a key example, this would "
"elevate ordinary assignment statements to be on par with ``class`` and "
"``def`` statements where the name of the item to be defined is presented "
"to the reader in advance of the details of how the value of that item is "
"calculated. It also allows named functions to be used in a \"multi-line "
"lambda\" fashion, where the name is used solely as a placeholder in the "
"current expression and then defined in the following suite."
msgstr ""

#: ../../peps/pep-3150.rst:38
msgid ""
"A secondary motivation is to simplify interim calculations in module and "
"class level code without polluting the resulting namespaces."
msgstr ""

#: ../../peps/pep-3150.rst:41
msgid ""
"The intent is that the relationship between a given clause and a separate"
" function definition that performs the specified operation will be "
"similar to the existing relationship between an explicit while loop and a"
" generator that produces the same sequence of operations as that while "
"loop."
msgstr ""

#: ../../peps/pep-3150.rst:46
msgid ""
"The specific proposal in this PEP has been informed by various "
"explorations of this and related concepts over the years (e.g. [1]_, "
"[2]_, [3]_, [6]_, [8]_), and is inspired to some degree by the ``where`` "
"and ``let`` clauses in Haskell. It avoids some problems that have been "
"identified in past proposals, but has not yet itself been subject to the "
"test of implementation."
msgstr ""

#: ../../peps/pep-3150.rst:54
msgid "Proposal"
msgstr ""

#: ../../peps/pep-3150.rst:56
msgid ""
"This PEP proposes the addition of an optional ``given`` clause to the "
"syntax for simple statements which may contain an expression, or may "
"substitute for such a statement for purely syntactic purposes. The "
"current list of simple statements that would be affected by this addition"
" is as follows:"
msgstr ""

#: ../../peps/pep-3150.rst:62
msgid "expression statement"
msgstr ""

#: ../../peps/pep-3150.rst:63
msgid "assignment statement"
msgstr ""

#: ../../peps/pep-3150.rst:64
msgid "augmented assignment statement"
msgstr ""

#: ../../peps/pep-3150.rst:65
msgid "del statement"
msgstr ""

#: ../../peps/pep-3150.rst:66
msgid "return statement"
msgstr ""

#: ../../peps/pep-3150.rst:67
msgid "yield statement"
msgstr ""

#: ../../peps/pep-3150.rst:68
msgid "raise statement"
msgstr ""

#: ../../peps/pep-3150.rst:69
msgid "assert statement"
msgstr ""

#: ../../peps/pep-3150.rst:70
msgid "pass statement"
msgstr ""

#: ../../peps/pep-3150.rst:72
msgid ""
"The ``given`` clause would allow subexpressions to be referenced by name "
"in the header line, with the actual definitions following in the indented"
" clause. As a simple example::"
msgstr ""

#: ../../peps/pep-3150.rst:80
msgid ""
"The new symbol ``?`` is used to refer to the given namespace. It would be"
" a ``types.SimpleNamespace`` instance, so ``?.sort_key`` functions as a "
"forward reference to a name defined in the ``given`` clause."
msgstr ""

#: ../../peps/pep-3150.rst:84
msgid ""
"A docstring would be permitted in the given clause, and would be attached"
" to the result namespace as its ``__doc__`` attribute."
msgstr ""

#: ../../peps/pep-3150.rst:87
msgid ""
"The ``pass`` statement is included to provide a consistent way to skip "
"inclusion of a meaningful expression in the header line. While this is "
"not an intended use case, it isn't one that can be prevented as multiple "
"alternatives (such as ``...`` and ``()``) remain available even if "
"``pass`` itself is disallowed."
msgstr ""

#: ../../peps/pep-3150.rst:93
msgid ""
"The body of the given clause will execute in a new scope, using normal "
"function closure semantics. To support early binding of loop variables "
"and global references, as well as to allow access to other names defined "
"at class scope, the ``given`` clause will also allow explicit binding "
"operations in the header line::"
msgstr ""

#: ../../peps/pep-3150.rst:109
msgid "Semantics"
msgstr ""

#: ../../peps/pep-3150.rst:111
msgid "The following statement::"
msgstr ""

#: ../../peps/pep-3150.rst:119
msgid ""
"Would be roughly equivalent to the following code (``__var`` denotes a "
"hidden compiler variable or simply an entry on the interpreter stack)::"
msgstr ""

#: ../../peps/pep-3150.rst:134
msgid ""
"A ``given`` clause is essentially a nested function which is created and "
"then immediately executed. Unless explicitly passed in, names are looked "
"up using normal scoping rules, and thus names defined at class scope will"
" not be visible. Names declared as forward references are returned and "
"used in the header statement, without being bound locally in the "
"surrounding namespace."
msgstr ""

#: ../../peps/pep-3150.rst:143
msgid "Syntax Change"
msgstr ""

#: ../../peps/pep-3150.rst:145
msgid "Current::"
msgstr ""

#: ../../peps/pep-3150.rst:157
msgid "New::"
msgstr ""

#: ../../peps/pep-3150.rst:169
msgid ""
"(Note that ``expr_stmt`` in the grammar is a slight misnomer, as it "
"covers assignment and augmented assignment in addition to simple "
"expression statements)"
msgstr ""

#: ../../peps/pep-3150.rst:174
msgid ""
"These proposed grammar changes don't yet cover the forward reference "
"expression syntax for accessing names defined in the statement local "
"namespace."
msgstr ""

#: ../../peps/pep-3150.rst:179
msgid ""
"The new clause is added as an optional element of the existing statements"
" rather than as a new kind of compound statement in order to avoid "
"creating an ambiguity in the grammar. It is applied only to the specific "
"elements listed so that nonsense like the following is disallowed::"
msgstr ""

#: ../../peps/pep-3150.rst:190
msgid ""
"However, the precise Grammar change described above is inadequate, as it "
"creates problems for the definition of simple_stmt (which allows chaining"
" of multiple single line statements with \";\" rather than \"\\\\n\")."
msgstr ""

#: ../../peps/pep-3150.rst:194
msgid ""
"So the above syntax change should instead be taken as a statement of "
"intent. Any actual proposal would need to resolve the simple_stmt parsing"
" problem before it could be seriously considered. This would likely "
"require a non-trivial restructuring of the grammar, breaking up "
"small_stmt and flow_stmt to separate the statements that potentially "
"contain arbitrary subexpressions and then allowing a single one of those "
"statements with a ``given`` clause at the simple_stmt level. Something "
"along the lines of::"
msgstr ""

#: ../../peps/pep-3150.rst:213
msgid "For reference, here are the current definitions at that level::"
msgstr ""

#: ../../peps/pep-3150.rst:221
msgid ""
"In addition to the above changes, the definition of ``atom`` would be "
"changed to also allow ``?``. The restriction of this usage to statements "
"with an associated ``given`` clause would be handled by a later stage of "
"the compilation process (likely AST construction, which already enforces "
"other restrictions where the grammar is overly permissive in order to "
"simplify the initial parsing step)."
msgstr ""

#: ../../peps/pep-3150.rst:230
msgid "New PEP 8 Guidelines"
msgstr ""

#: ../../peps/pep-3150.rst:232
msgid ""
"As discussed on python-ideas ([7]_, [9]_) new :pep:`8` guidelines would "
"also need to be developed to provide appropriate direction on when to use"
" the ``given`` clause over ordinary variable assignments."
msgstr ""

#: ../../peps/pep-3150.rst:236
msgid ""
"Based on the similar guidelines already present for ``try`` statements, "
"this PEP proposes the following additions for ``given`` statements to the"
" \"Programming Conventions\" section of :pep:`8`:"
msgstr ""

#: ../../peps/pep-3150.rst:240
msgid ""
"for code that could reasonably be factored out into a separate function, "
"but is not currently reused anywhere, consider using a ``given`` clause. "
"This clearly indicates which variables are being used only to define "
"subcomponents of another statement rather than to hold algorithm or "
"application state. This is an especially useful technique when passing "
"multi-line functions to operations which take callable arguments."
msgstr ""

#: ../../peps/pep-3150.rst:248
msgid ""
"keep ``given`` clauses concise. If they become unwieldy, either break "
"them up into multiple steps or else move the details into a separate "
"function."
msgstr ""

#: ../../peps/pep-3150.rst:254
msgid "Rationale"
msgstr ""

#: ../../peps/pep-3150.rst:256
msgid ""
"Function and class statements in Python have a unique property relative "
"to ordinary assignment statements: to some degree, they are "
"*declarative*. They present the reader of the code with some critical "
"information about a name that is about to be defined, before proceeding "
"on with the details of the actual definition in the function or class "
"body."
msgstr ""

#: ../../peps/pep-3150.rst:263
msgid ""
"The *name* of the object being declared is the first thing stated after "
"the keyword. Other important information is also given the honour of "
"preceding the implementation details:"
msgstr ""

#: ../../peps/pep-3150.rst:267
msgid ""
"decorators (which can greatly affect the behaviour of the created object,"
" and were placed ahead of even the keyword and name as a matter of "
"practicality more so than aesthetics)"
msgstr ""

#: ../../peps/pep-3150.rst:270
msgid "the docstring (on the first line immediately following the header line)"
msgstr ""

#: ../../peps/pep-3150.rst:271
msgid "parameters, default values and annotations for function definitions"
msgstr ""

#: ../../peps/pep-3150.rst:272
msgid ""
"parent classes, metaclass and optionally other details (depending on the "
"metaclass) for class definitions"
msgstr ""

#: ../../peps/pep-3150.rst:275
msgid ""
"This PEP proposes to make a similar declarative style available for "
"arbitrary assignment operations, by permitting the inclusion of a "
"\"given\" suite following any simple assignment statement::"
msgstr ""

#: ../../peps/pep-3150.rst:282
msgid ""
"By convention, code in the body of the suite should be oriented solely "
"towards correctly defining the assignment operation carried out in the "
"header line. The header line operation should also be adequately "
"descriptive (e.g. through appropriate choices of variable names) to give "
"a reader a reasonable idea of the purpose of the operation without "
"reading the body of the suite."
msgstr ""

#: ../../peps/pep-3150.rst:289
msgid ""
"However, while they are the initial motivating use case, limiting this "
"feature solely to simple assignments would be overly restrictive. Once "
"the feature is defined at all, it would be quite arbitrary to prevent its"
" use for augmented assignments, return statements, yield expressions, "
"comprehensions and arbitrary expressions that may modify the application "
"state."
msgstr ""

#: ../../peps/pep-3150.rst:296
msgid ""
"The ``given`` clause may also function as a more readable alternative to "
"some uses of lambda expressions and similar constructs when passing one-"
"off functions to operations like ``sorted()`` or in callback based event-"
"driven programming."
msgstr ""

#: ../../peps/pep-3150.rst:301
msgid ""
"In module and class level code, the ``given`` clause will serve as a "
"clear and reliable replacement for usage of the ``del`` statement to keep"
" interim working variables from polluting the resulting namespace."
msgstr ""

#: ../../peps/pep-3150.rst:305
msgid ""
"One potentially useful way to think of the proposed clause is as a middle"
" ground between conventional in-line code and separation of an operation "
"out into a dedicated function, just as an inline while loop may "
"eventually be factored out into a dedicated generator."
msgstr ""

#: ../../peps/pep-3150.rst:312
msgid "Design Discussion"
msgstr ""

#: ../../peps/pep-3150.rst:315
msgid "Keyword Choice"
msgstr ""

#: ../../peps/pep-3150.rst:317
msgid ""
"This proposal initially used ``where`` based on the name of a similar "
"construct in Haskell. However, it has been pointed out that there are "
"existing Python libraries (such as Numpy [4]_) that already use ``where``"
" in the SQL query condition sense, making that keyword choice potentially"
" confusing."
msgstr ""

#: ../../peps/pep-3150.rst:323
msgid ""
"While ``given`` may also be used as a variable name (and hence would be "
"deprecated using the usual ``__future__`` dance for introducing new "
"keywords), it is associated much more strongly with the desired \"here "
"are some extra variables this expression may use\" semantics for the new "
"clause."
msgstr ""

#: ../../peps/pep-3150.rst:329
msgid ""
"Reusing the ``with`` keyword has also been proposed. This has the "
"advantage of avoiding the addition of a new keyword, but also has a high "
"potential for confusion as the ``with`` clause and ``with`` statement "
"would look similar but do completely different things. That way lies C++ "
"and Perl :)"
msgstr ""

#: ../../peps/pep-3150.rst:337
msgid "Relation to PEP 403"
msgstr ""

#: ../../peps/pep-3150.rst:339
msgid ""
":pep:`403` (General Purpose Decorator Clause) attempts to achieve the "
"main goals of this PEP using a less radical language change inspired by "
"the existing decorator syntax."
msgstr ""

#: ../../peps/pep-3150.rst:343
msgid ""
"Despite having the same author, the two PEPs are in direct competition "
"with each other. :pep:`403` represents a minimalist approach that "
"attempts to achieve useful functionality with a minimum of change from "
"the status quo. This PEP instead aims for a more flexible standalone "
"statement design, which requires a larger degree of change to the "
"language."
msgstr ""

#: ../../peps/pep-3150.rst:349
msgid ""
"Note that where :pep:`403` is better suited to explaining the behaviour "
"of generator expressions correctly, this PEP is better able to explain "
"the behaviour of decorator clauses in general. Both PEPs support adequate"
" explanations for the semantics of container comprehensions."
msgstr ""

#: ../../peps/pep-3150.rst:356
msgid "Explaining Container Comprehensions and Generator Expressions"
msgstr ""

#: ../../peps/pep-3150.rst:358
msgid ""
"One interesting feature of the proposed construct is that it can be used "
"as a primitive to explain the scoping and execution order semantics of "
"container comprehensions::"
msgstr ""

#: ../../peps/pep-3150.rst:374
msgid ""
"The important point in this expansion is that it explains why "
"comprehensions appear to misbehave at class scope: only the outermost "
"iterator is evaluated at class scope, while all predicates, nested "
"iterators and value expressions are evaluated inside a nested scope."
msgstr ""

#: ../../peps/pep-3150.rst:379
msgid ""
"Not that, unlike :pep:`403`, the current version of this PEP *cannot* "
"provide a precisely equivalent expansion for a generator expression. The "
"closest it can get is to define an additional level of scoping::"
msgstr ""

#: ../../peps/pep-3150.rst:391
msgid ""
"This limitation could be remedied by permitting the given clause to be a "
"generator function, in which case ? would refer to a generator-iterator "
"object rather than a simple namespace::"
msgstr ""

#: ../../peps/pep-3150.rst:402
msgid ""
"However, this would make the meaning of \"?\" quite ambiguous, even more "
"so than is already the case for the meaning of ``def`` statements (which "
"will usually have a docstring indicating whether or not a function "
"definition is actually a generator)"
msgstr ""

#: ../../peps/pep-3150.rst:408
msgid "Explaining Decorator Clause Evaluation and Application"
msgstr ""

#: ../../peps/pep-3150.rst:410
msgid ""
"The standard explanation of decorator clause evaluation and application "
"has to deal with the idea of hidden compiler variables in order to show "
"steps in their order of execution. The given statement allows a decorated"
" function definition like::"
msgstr ""

#: ../../peps/pep-3150.rst:419
msgid "To instead be explained as roughly equivalent to::"
msgstr ""

#: ../../peps/pep-3150.rst:427
msgid "Anticipated Objections"
msgstr ""

#: ../../peps/pep-3150.rst:431
msgid "Two Ways To Do It"
msgstr ""

#: ../../peps/pep-3150.rst:433
msgid ""
"A lot of code may now be written with values defined either before the "
"expression where they are used or afterwards in a ``given`` clause, "
"creating two ways to do it, perhaps without an obvious way of choosing "
"between them."
msgstr ""

#: ../../peps/pep-3150.rst:437
msgid ""
"On reflection, I feel this is a misapplication of the \"one obvious way\""
" aphorism. Python already offers *lots* of ways to write code. We can use"
" a for loop or a while loop, a functional style or an imperative style or"
" an object oriented style. The language, in general, is designed to let "
"people write code that matches the way they think. Since different people"
" think differently, the way they write their code will change "
"accordingly."
msgstr ""

#: ../../peps/pep-3150.rst:444
msgid ""
"Such stylistic questions in a code base are rightly left to the "
"development group responsible for that code. When does an expression get "
"so complicated that the subexpressions should be taken out and assigned "
"to variables, even though those variables are only going to be used once?"
" When should an inline while loop be replaced with a generator that "
"implements the same logic? Opinions differ, and that's OK."
msgstr ""

#: ../../peps/pep-3150.rst:451
msgid ""
"However, explicit :pep:`8` guidance will be needed for CPython and the "
"standard library, and that is discussed in the proposal above."
msgstr ""

#: ../../peps/pep-3150.rst:456
msgid "Out of Order Execution"
msgstr ""

#: ../../peps/pep-3150.rst:458
msgid ""
"The ``given`` clause makes execution jump around a little strangely, as "
"the body of the ``given`` clause is executed before the simple statement "
"in the clause header. The closest any other part of Python comes to this "
"is the out of order evaluation in list comprehensions, generator "
"expressions and conditional expressions and the delayed application of "
"decorator functions to the function they decorate (the decorator "
"expressions themselves are executed in the order they are written)."
msgstr ""

#: ../../peps/pep-3150.rst:466
msgid ""
"While this is true, the syntax is intended for cases where people are "
"themselves *thinking* about a problem out of sequence (at least as far as"
" the language is concerned). As an example of this, consider the "
"following thought in the mind of a Python user:"
msgstr ""

#: ../../peps/pep-3150.rst:471
msgid ""
"I want to sort the items in this sequence according to the values of "
"attr1 and attr2 on each item."
msgstr ""

#: ../../peps/pep-3150.rst:474
msgid ""
"If they're comfortable with Python's ``lambda`` expressions, then they "
"might choose to write it like this::"
msgstr ""

#: ../../peps/pep-3150.rst:479
msgid ""
"That gets the job done, but it hardly reaches the standard of "
"``executable pseudocode`` that fits Python's reputation."
msgstr ""

#: ../../peps/pep-3150.rst:482
msgid ""
"If they don't like ``lambda`` specifically, the ``operator`` module "
"offers an alternative that still allows the key function to be defined "
"inline::"
msgstr ""

#: ../../peps/pep-3150.rst:488
msgid ""
"Again, it gets the job done, but even the most generous of readers would "
"not consider that to be \"executable pseudocode\"."
msgstr ""

#: ../../peps/pep-3150.rst:491
msgid ""
"If they think both of the above options are ugly and confusing, or they "
"need logic in their key function that can't be expressed as an expression"
" (such as catching an exception), then Python currently forces them to "
"reverse the order of their original thought and define the sorting "
"criteria first::"
msgstr ""

#: ../../peps/pep-3150.rst:501
msgid ""
"\"Just define a function\" has been the rote response to requests for "
"multi-line lambda support for years. As with the above options, it gets "
"the job done, but it really does represent a break between what the user "
"is thinking and what the language allows them to express."
msgstr ""

#: ../../peps/pep-3150.rst:506
msgid ""
"I believe the proposal in this PEP would finally let Python get close to "
"the \"executable pseudocode\" bar for the kind of thought expressed "
"above::"
msgstr ""

#: ../../peps/pep-3150.rst:513
msgid ""
"Everything is in the same order as it was in the user's original thought,"
" and they don't even need to come up with a name for the sorting "
"criteria: it is possible to reuse the keyword argument name directly."
msgstr ""

#: ../../peps/pep-3150.rst:517
msgid ""
"A possible enhancement to those proposal would be to provide a convenient"
" shorthand syntax to say \"use the given clause contents as keyword "
"arguments\". Even without dedicated syntax, that can be written simply as"
" ``**vars(?)``."
msgstr ""

#: ../../peps/pep-3150.rst:524
msgid "Harmful to Introspection"
msgstr ""

#: ../../peps/pep-3150.rst:526
msgid ""
"Poking around in module and class internals is an invaluable tool for "
"white-box testing and interactive debugging. The ``given`` clause will be"
" quite effective at preventing access to temporary state used during "
"calculations (although no more so than current usage of ``del`` "
"statements in that regard)."
msgstr ""

#: ../../peps/pep-3150.rst:532
msgid ""
"While this is a valid concern, design for testability is an issue that "
"cuts across many aspects of programming. If a component needs to be "
"tested independently, then a ``given`` statement should be refactored in "
"to separate statements so that information is exposed to the test suite. "
"This isn't significantly different from refactoring an operation hidden "
"inside a function or generator out into its own function purely to allow "
"it to be tested in isolation."
msgstr ""

#: ../../peps/pep-3150.rst:542
msgid "Lack of Real World Impact Assessment"
msgstr ""

#: ../../peps/pep-3150.rst:544
msgid ""
"The examples in the current PEP are almost all relatively small \"toy\" "
"examples. The proposal in this PEP needs to be subjected to the test of "
"application to a large code base (such as the standard library or a large"
" Twisted application) in a search for examples where the readability of "
"real world code is genuinely enhanced."
msgstr ""

#: ../../peps/pep-3150.rst:550
msgid ""
"This is more of a deficiency in the PEP rather than the idea, though. If "
"it wasn't a real world problem, we wouldn't get so many complaints about "
"the lack of multi-line lambda support and Ruby's block construct probably"
" wouldn't be quite so popular."
msgstr ""

#: ../../peps/pep-3150.rst:557
msgid "Open Questions"
msgstr ""

#: ../../peps/pep-3150.rst:560
msgid "Syntax for Forward References"
msgstr ""

#: ../../peps/pep-3150.rst:562
msgid ""
"The ``?`` symbol is proposed for forward references to the given "
"namespace as it is short, currently unused and suggests \"there's "
"something missing here that will be filled in later\"."
msgstr ""

#: ../../peps/pep-3150.rst:566
msgid ""
"The proposal in the PEP doesn't neatly parallel any existing Python "
"feature, so reusing an already used symbol has been deliberately avoided."
msgstr ""

#: ../../peps/pep-3150.rst:571
msgid "Handling of ``nonlocal`` and ``global``"
msgstr ""

#: ../../peps/pep-3150.rst:573
msgid ""
"``nonlocal`` and ``global`` are explicitly disallowed in the ``given`` "
"clause suite and will be syntax errors if they occur. They will work "
"normally if they appear within a ``def`` statement within that suite."
msgstr ""

#: ../../peps/pep-3150.rst:577
msgid ""
"Alternatively, they could be defined as operating as if the anonymous "
"functions were defined as in the expansion above."
msgstr ""

#: ../../peps/pep-3150.rst:582
msgid "Handling of ``break`` and ``continue``"
msgstr ""

#: ../../peps/pep-3150.rst:584
msgid ""
"``break`` and ``continue`` will operate as if the anonymous functions "
"were defined as in the expansion above. They will be syntax errors if "
"they occur in the ``given`` clause suite but will work normally if they "
"appear within a ``for`` or ``while`` loop as part of that suite."
msgstr ""

#: ../../peps/pep-3150.rst:591
msgid "Handling of ``return`` and ``yield``"
msgstr ""

#: ../../peps/pep-3150.rst:593
msgid ""
"``return`` and ``yield`` are explicitly disallowed in the ``given`` "
"clause suite and will be syntax errors if they occur. They will work "
"normally if they appear within a ``def`` statement within that suite."
msgstr ""

#: ../../peps/pep-3150.rst:599
msgid "Examples"
msgstr ""

#: ../../peps/pep-3150.rst:601
msgid "Defining callbacks for event driven programming::"
msgstr ""

#: ../../peps/pep-3150.rst:620
msgid "Defining \"one-off\" classes which typically only have a single instance::"
msgstr ""

#: ../../peps/pep-3150.rst:642
msgid ""
"Calculating attributes without polluting the local namespace (from "
"os.py)::"
msgstr ""

#: ../../peps/pep-3150.rst:656
msgid "Replacing default argument hack (from functools.lru_cache)::"
msgstr ""

#: ../../peps/pep-3150.rst:677
msgid "Possible Additions"
msgstr ""

#: ../../peps/pep-3150.rst:679
msgid ""
"The current proposal allows the addition of a ``given`` clause only for "
"simple statements. Extending the idea to allow the use of compound "
"statements would be quite possible (by appending the given clause as an "
"independent suite at the end), but doing so raises serious readability "
"concerns (as values defined in the ``given`` clause may be used well "
"before they are defined, exactly the kind of readability trap that other "
"features like decorators and ``with`` statements are designed to "
"eliminate)"
msgstr ""

#: ../../peps/pep-3150.rst:688
msgid ""
"The \"explicit early binding\" variant may be applicable to the "
"discussions on python-ideas on how to eliminate the default argument "
"hack. A ``given`` clause in the header line for functions (after the "
"return type annotation) may be the answer to that question."
msgstr ""

#: ../../peps/pep-3150.rst:695
msgid "Rejected Alternatives"
msgstr ""

#: ../../peps/pep-3150.rst:697
msgid ""
"An earlier version of this PEP allowed implicit forward references to the"
" names in the trailing suite, and also used implicit early binding "
"semantics. Both of these ideas substantially complicated the proposal "
"without providing a sufficient increase in expressive power. The current "
"proposing with explicit forward references and early binding brings the "
"new construct into line with existing scoping semantics, greatly "
"improving the chances the idea can actually be implemented."
msgstr ""

#: ../../peps/pep-3150.rst:705
msgid ""
"In addition to the proposals made here, there have also been suggestions "
"of two suite \"in-order\" variants which provide the limited scoping of "
"names without supporting out-of-order execution. I believe these "
"suggestions largely miss the point of what people are complaining about "
"when they ask for multi-line lambda support - it isn't that coming up "
"with a name for the subexpression is especially difficult, it's that "
"naming the function before the statement that uses it means the code no "
"longer matches the way the developer thinks about the problem at hand."
msgstr ""

#: ../../peps/pep-3150.rst:714
msgid ""
"I've made some unpublished attempts to allow direct references to the "
"closure implicitly created by the ``given`` clause, while still retaining"
" the general structure of the syntax as defined in this PEP (For example,"
" allowing a subexpression like ``?given`` or ``:given`` to be used in "
"expressions to indicate a direct reference to the implied closure, thus "
"preventing it from being called automatically to create the local "
"namespace). All such attempts have appeared unattractive and confusing "
"compared to the simpler decorator-inspired proposal in :pep:`403`."
msgstr ""

#: ../../peps/pep-3150.rst:724
msgid "Reference Implementation"
msgstr ""

#: ../../peps/pep-3150.rst:726
msgid ""
"None as yet. If you want a crash course in Python namespace semantics and"
" code compilation, feel free to try ;)"
msgstr ""

#: ../../peps/pep-3150.rst:731
msgid "TO-DO"
msgstr ""

#: ../../peps/pep-3150.rst:733
msgid "Mention :pep:`359` and possible uses for locals() in the ``given`` clause"
msgstr ""

#: ../../peps/pep-3150.rst:735
msgid ""
"Figure out if this can be used internally to make the implementation of "
"zero-argument super() calls less awful"
msgstr ""

#: ../../peps/pep-3150.rst:739
msgid "References"
msgstr "Referências"

#: ../../peps/pep-3150.rst:741
msgid ""
"`Explicitation lines in Python <https://mail.python.org/pipermail/python-"
"ideas/2010-June/007476.html>`__"
msgstr ""

#: ../../peps/pep-3150.rst:744
msgid ""
"`'where' statement in Python <https://mail.python.org/pipermail/python-"
"ideas/2010-July/007584.html>`__"
msgstr ""

#: ../../peps/pep-3150.rst:747
msgid ""
"`Where-statement (Proposal for function expressions) "
"<https://mail.python.org/pipermail/python-ideas/2009-July/005132.html>`__"
msgstr ""

#: ../../peps/pep-3150.rst:750
msgid ""
"`Name conflict with NumPy for 'where' keyword choice "
"<https://mail.python.org/pipermail/python-ideas/2010-July/007596.html>`__"
msgstr ""

#: ../../peps/pep-3150.rst:753
msgid ""
"`Assignments in list/generator expressions "
"<https://mail.python.org/pipermail/python-"
"ideas/2011-April/009863.html>`__"
msgstr ""

#: ../../peps/pep-3150.rst:756
msgid ""
"`Possible PEP 3150 style guidelines (#1) "
"<https://mail.python.org/pipermail/python-"
"ideas/2011-April/009869.html>`__"
msgstr ""

#: ../../peps/pep-3150.rst:759
msgid ""
"`Discussion of PEP 403 (statement local function definition) "
"<https://mail.python.org/pipermail/python-"
"ideas/2011-October/012276.html>`__"
msgstr ""

#: ../../peps/pep-3150.rst:762
msgid ""
"`Possible PEP 3150 style guidelines (#2) "
"<https://mail.python.org/pipermail/python-"
"ideas/2011-October/012341.html>`__"
msgstr ""

#: ../../peps/pep-3150.rst:765
msgid ""
"`The \"Status quo wins a stalemate\" design principle "
"<https://www.curiousefficiency.org/posts/2011/02/status-quo-wins-"
"stalemate.html>`__"
msgstr ""

#: ../../peps/pep-3150.rst:768
msgid ""
"`Multi-line lambdas (again!) <https://mail.python.org/pipermail/python-"
"ideas/2013-August/022526.html>`__"
msgstr ""

#: ../../peps/pep-3150.rst:772
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-3150.rst:774
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid "Nick Coghlan <ncoghlan@gmail.com>"
#~ msgstr ""

