# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-14 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: pt_BR\n"
"Language-Team: pt_BR <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../peps/peps/pep-0741.rst
msgid "Author"
msgstr ""

#: ../../peps/peps/pep-0741.rst:3
msgid "Victor Stinner <vstinner@python.org>"
msgstr ""

#: ../../peps/peps/pep-0741.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/peps/pep-0741.rst:4
msgid ""
"https://discuss.python.org/t/pep-741-python-configuration-c-api-second-"
"version/45403"
msgstr ""

#: ../../peps/peps/pep-0741.rst
msgid "Status"
msgstr ""

#: ../../peps/peps/pep-0741.rst:5
msgid "Draft"
msgstr ""

#: ../../peps/peps/pep-0741.rst ../../peps/peps/pep-0741.rst:272
#: ../../peps/peps/pep-0741.rst:366
msgid "Type"
msgstr ""

#: ../../peps/peps/pep-0741.rst:6
msgid "Standards Track"
msgstr ""

#: ../../peps/peps/pep-0741.rst
msgid "Created"
msgstr ""

#: ../../peps/peps/pep-0741.rst:7
msgid "18-Jan-2024"
msgstr ""

#: ../../peps/peps/pep-0741.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/peps/pep-0741.rst:8
msgid "3.14"
msgstr ""

#: ../../peps/peps/pep-0741.rst
msgid "Post-History"
msgstr ""

#: ../../peps/peps/pep-0741.rst:9
msgid ""
"`19-Jan-2024 <https://discuss.python.org/t/pep-741-python-configuration-c-"
"api/43637>`__, `08-Feb-2024 <https://discuss.python.org/t/pep-741-python-"
"configuration-c-api-second-version/45403>`__,"
msgstr ""

#: ../../peps/peps/pep-0741.rst:13
msgid "Abstract"
msgstr ""

#: ../../peps/peps/pep-0741.rst:15
msgid ""
"Add a C API to configure the Python initialization without relying on C "
"structures and the ability to make ABI-compatible changes in the future."
msgstr ""

#: ../../peps/peps/pep-0741.rst:18
msgid ""
"Complete :pep:`587` API by adding ``PyInitConfig_AddModule()`` which can be "
"used to add a built-in extension module; feature previously referred to as "
"the \"inittab\"."
msgstr ""

#: ../../peps/peps/pep-0741.rst:22
msgid ""
"Add ``PyConfig_Get()`` and ``PyConfig_Set()`` functions to get and set the "
"current runtime configuration."
msgstr ""

#: ../../peps/peps/pep-0741.rst:25
msgid ""
":pep:`587` \"Python Initialization Configuration\" unified all the ways to "
"configure the Python **initialization**. This PEP unifies also the "
"configuration of the Python **preinitialization** and the Python "
"**initialization** in a single API. Moreover, this PEP only provides a "
"single choice to embed Python, instead of having two \"Python\" and "
"\"Isolated\" choices (:pep:`587`), to simplify the API further."
msgstr ""

#: ../../peps/peps/pep-0741.rst:32
msgid ""
"This new API replaces the deprecated and incomplete legacy API which is "
"scheduled for removal between Python 3.13 and Python 3.15."
msgstr ""

#: ../../peps/peps/pep-0741.rst:35
msgid ""
"The lower level :pep:`587` ``PyConfig`` API remains available for use cases "
"with an intentionally higher level of coupling to CPython implementation "
"details (such as emulating the full functionality of CPython's CLI, "
"including its configuration mechanisms)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:42
msgid "Rationale"
msgstr ""

#: ../../peps/peps/pep-0741.rst:45
msgid "Get the runtime configuration"
msgstr ""

#: ../../peps/peps/pep-0741.rst:47
msgid ""
":pep:`587` has no API to **get** the **current** runtime configuration, only "
"to **configure** the Python **initialization**."
msgstr ""

#: ../../peps/peps/pep-0741.rst:50
msgid ""
"For example, the global configuration variable ``Py_UnbufferedStdioFlag`` "
"was deprecated in Python 3.12 and using ``PyConfig.buffered_stdio`` is "
"recommended instead. It only works to configure Python, there is no public "
"API to get ``PyConfig.buffered_stdio``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:56
msgid ""
"Users of the limited C API are asking for a public API to get the current "
"runtime configuration."
msgstr ""

#: ../../peps/peps/pep-0741.rst:59
msgid ""
"Cython needs to get the ``optimization_level`` configuration option: `issue "
"<https://github.com/python/cpython/issues/99872>`_."
msgstr ""

#: ../../peps/peps/pep-0741.rst:62
msgid ""
"When global configuration variables were deprecated in 2022, `Marc-André "
"Lemburg requested <https://github.com/python/cpython/"
"issues/93103#issuecomment-1136462708>`__ a C API to access these "
"configuration variables at runtime (not only during Python initialization)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:70
msgid "Security fix"
msgstr ""

#: ../../peps/peps/pep-0741.rst:72
msgid ""
"To fix `CVE-2020-10735 <https://cve.mitre.org/cgi-bin/cvename.cgi?"
"name=CVE-2020-10735>`_, a denial-of-service when converting very a large "
"string to an integer (in base 10), it was discussed to add a new "
"``PyConfig`` member to stable branches which affects the ABI."
msgstr ""

#: ../../peps/peps/pep-0741.rst:78
msgid ""
"Gregory P. Smith proposed a different API using text based configuration "
"file to not be limited by ``PyConfig`` members: `FR: Allow private runtime "
"config to enable extending without breaking the PyConfig ABI <https://"
"discuss.python.org/t/fr-allow-private-runtime-config-to-enable-extending-"
"without-breaking-the-pyconfig-abi/18004>`__ (August 2022)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:84
msgid ""
"In the end, it was decided to not add a new ``PyConfig`` member to stable "
"branches, but only add a new ``PyConfig.int_max_str_digits`` member to the "
"development branch (which became Python 3.12). A dedicated private global "
"variable (unrelated to ``PyConfig``) is used in stable branches."
msgstr ""

#: ../../peps/peps/pep-0741.rst:92
msgid "Redundancy between PyPreConfig and PyConfig"
msgstr ""

#: ../../peps/peps/pep-0741.rst:94
msgid ""
"The Python preinitialization uses the ``PyPreConfig`` structure and the "
"Python initialization uses the ``PyConfig`` structure. Both structures have "
"four duplicated members: ``dev_mode``, ``parse_argv``, ``isolated`` and "
"``use_environment``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:99
msgid ""
"The redundancy is caused by the fact that the two structures are separated, "
"whereas some ``PyConfig`` members are needed by the preinitialization."
msgstr ""

#: ../../peps/peps/pep-0741.rst:105
msgid "Embedding Python"
msgstr ""

#: ../../peps/peps/pep-0741.rst:108
msgid "Applications embedding Python"
msgstr ""

#: ../../peps/peps/pep-0741.rst:110 ../../peps/peps/pep-0741.rst:138
msgid "Examples:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:112
msgid "`Blender 3D graphics <https://www.blender.org/>`_."
msgstr ""

#: ../../peps/peps/pep-0741.rst:113
msgid "`fontforge <https://fontforge.org/>`_ font editor."
msgstr ""

#: ../../peps/peps/pep-0741.rst:114
msgid "`Gimp <https://www.gimp.org/>`_."
msgstr ""

#: ../../peps/peps/pep-0741.rst:115
msgid "`LibreOffice <https://www.libreoffice.org/>`_."
msgstr ""

#: ../../peps/peps/pep-0741.rst:116
msgid "`OBS Studio <https://obsproject.com/>`_."
msgstr ""

#: ../../peps/peps/pep-0741.rst:117
msgid "`Tiled <https://www.mapeditor.org/>`_."
msgstr ""

#: ../../peps/peps/pep-0741.rst:118
msgid "`vim <https://www.vim.org/>`_ text editor."
msgstr ""

#: ../../peps/peps/pep-0741.rst:120
msgid ""
"On Linux, FreeBSD and macOS, applications are usually either statically "
"linked to a ``libpython``, or load dynamically a ``libpython`` . The "
"``libpython`` shared library is versioned, example: ``libpython3.12.so`` for "
"Python 3.12 on Linux."
msgstr ""

#: ../../peps/peps/pep-0741.rst:125
msgid ""
"The vim project can target the stable ABI. Usually, the \"system Python\" "
"version is used. It's not currently possible to select which Python version "
"to use. Users would like the ability to select a newer Python on demand."
msgstr ""

#: ../../peps/peps/pep-0741.rst:130
msgid ""
"On Linux, another approach to deploy an application embedding Python, such "
"as GIMP, is to include Python in Flatpack, AppImage or Snap \"container\". "
"In this case, the application brings its own copy of Python version with the "
"container."
msgstr ""

#: ../../peps/peps/pep-0741.rst:136
msgid "Libraries embedding Python"
msgstr ""

#: ../../peps/peps/pep-0741.rst:140
msgid ""
"`Apache mod_wsgi <https://modwsgi.readthedocs.io/>`_ (`source <https://"
"github.com/GrahamDumpleton/mod_wsgi/blob/"
"f54eadd6da8e3da0faccd497d4165de435b97242/src/server/wsgi_interp.c#L2367-"
"L2404>`__)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:142
msgid "`nimpy <https://github.com/yglukhov/nimpy>`_: Nim - Python bridge."
msgstr ""

#: ../../peps/peps/pep-0741.rst:144
msgid ""
"`PyO3 <https://github.com/PyO3/pyo3>`__: Rust bindings for the Python "
"interpreter."
msgstr ""

#: ../../peps/peps/pep-0741.rst:148
msgid "Utilities creating standalone applications"
msgstr ""

#: ../../peps/peps/pep-0741.rst:150
msgid "`py2app <https://py2app.readthedocs.io/>`_ for macOS."
msgstr ""

#: ../../peps/peps/pep-0741.rst:151
msgid "`py2exe <http://www.py2exe.org/>`_ for Windows."
msgstr ""

#: ../../peps/peps/pep-0741.rst:152
msgid "`pyinstaller <https://pyinstaller.org/>`_."
msgstr ""

#: ../../peps/peps/pep-0741.rst:153
msgid ""
"`PyOxidizer <https://github.com/indygreg/PyOxidizer>`_: it uses the PEP 587 "
"PyConfig API."
msgstr ""

#: ../../peps/peps/pep-0741.rst:156
msgid ""
"These utilities create standalone applications, they are not linked to "
"libpython."
msgstr ""

#: ../../peps/peps/pep-0741.rst:160
msgid "Set the runtime configuration"
msgstr ""

#: ../../peps/peps/pep-0741.rst:162
msgid ""
"`Marc-André Lemburg requested <https://discuss.python.org/t/fr-allow-private-"
"runtime-config-to-enable-extending-without-breaking-the-pyconfig-"
"abi/18004/34>`__ a C API to **set** the value of some configuration options "
"at runtime:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:166 ../../peps/peps/pep-0741.rst:309
msgid "``optimization_level``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:167 ../../peps/peps/pep-0741.rst:333
msgid "``verbose``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:168 ../../peps/peps/pep-0741.rst:312
msgid "``parser_debug``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:169 ../../peps/peps/pep-0741.rst:295
msgid "``inspect``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:170 ../../peps/peps/pep-0741.rst:339
msgid "``write_bytecode``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:172
msgid ""
"Previously, it was possible to set directly global configuration variables:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:175
msgid "``Py_OptimizeFlag``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:176
msgid "``Py_VerboseFlag``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:177
msgid "``Py_DebugFlag``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:178
msgid "``Py_InspectFlag``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:179
msgid "``Py_DontWriteBytecodeFlag``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:181
msgid ""
"But these configuration flags were deprecated in Python 3.12 and are "
"scheduled for removal in Python 3.14."
msgstr ""

#: ../../peps/peps/pep-0741.rst:186
msgid "Specification"
msgstr ""

#: ../../peps/peps/pep-0741.rst:188
msgid ""
"Add C API functions and structure to configure the Python initialization:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:191
msgid "Create config:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:193
msgid "``PyInitConfig`` opaque structure."
msgstr ""

#: ../../peps/peps/pep-0741.rst:194
msgid "``PyInitConfig_Create()``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:195
msgid "``PyInitConfig_Free(config)``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:197
msgid "Get options:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:199
msgid "``PyInitConfig_HasOption(config, name)``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:200
msgid "``PyInitConfig_GetInt(config, name, &value)``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:201
msgid "``PyInitConfig_GetStr(config, name, &value)``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:202
msgid "``PyInitConfig_GetStrList(config, name, &length, &items)``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:203
msgid "``PyInitConfig_FreeStrList()``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:205
msgid "Set options:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:207
msgid "``PyInitConfig_SetInt(config, name, value)``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:208
msgid "``PyInitConfig_SetStr(config, name, value)``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:209
msgid "``PyInitConfig_SetStrList(config, name, length, items)``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:210
msgid "``PyInitConfig_AddModule(config, name, initfunc)``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:212
msgid "Initialize:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:214
msgid "``Py_InitializeFromInitConfig(config)``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:216
msgid "Error handling:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:218
msgid "``PyInitConfig_GetError(config, &err_msg)``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:219
msgid "``PyInitConfig_GetExitcode(config, &exitcode)``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:221
msgid "Add C API functions to get and set the current runtime configuration:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:223
msgid "``PyConfig_Get(name)``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:224
msgid "``PyConfig_GetInt(name, &value)``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:225
msgid "``PyConfig_Set(name)``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:226
msgid "``PyConfig_Names()``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:228
msgid ""
"The C API uses null-terminated UTF-8 encoded strings to refer to a "
"configuration option name."
msgstr ""

#: ../../peps/peps/pep-0741.rst:231
msgid "These C API functions are excluded from the limited C API."
msgstr ""

#: ../../peps/peps/pep-0741.rst:234
msgid "PyInitConfig structure"
msgstr ""

#: ../../peps/peps/pep-0741.rst:236
msgid ""
"The ``PyInitConfig`` structure is implemented by combining the four "
"structures of the ``PyConfig`` API and has an ``inittab`` member as well:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:240
msgid "``PyPreConfig preconfig``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:241
msgid "``PyConfig config``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:242
msgid "``PyStatus status``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:243
msgid "``struct _inittab *inittab`` for ``PyInitConfig_AddModule()``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:245
msgid ""
"The ``PyStatus`` status is no longer separated, but part of the unified "
"``PyInitConfig`` structure, which makes the API easier to use."
msgstr ""

#: ../../peps/peps/pep-0741.rst:250
msgid "Configuration Options"
msgstr ""

#: ../../peps/peps/pep-0741.rst:252
msgid ""
"Configuration options are named after ``PyPreConfig`` and ``PyConfig`` "
"structure members. See the `PyPreConfig documentation <https://docs.python."
"org/dev/c-api/init_config.html#pypreconfig>`_ and the `PyConfig "
"documentation <https://docs.python.org/dev/c-api/init_config."
"html#pyconfig>`_."
msgstr ""

#: ../../peps/peps/pep-0741.rst:258
msgid ""
"Deprecating and removing configuration options is out of the scope of the "
"PEP and should be discussed on a case by case basis."
msgstr ""

#: ../../peps/peps/pep-0741.rst:262
msgid "Public configuration options"
msgstr ""

#: ../../peps/peps/pep-0741.rst:264
msgid ""
"Following options can be get by ``PyConfig_Get()`` and set and "
"``PyConfig_Set()``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:271 ../../peps/peps/pep-0741.rst:365
msgid "Option"
msgstr ""

#: ../../peps/peps/pep-0741.rst:273 ../../peps/peps/pep-0741.rst:367
msgid "Comment"
msgstr ""

#: ../../peps/peps/pep-0741.rst:274
msgid "``argv``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:275 ../../peps/peps/pep-0741.rst:307
#: ../../peps/peps/pep-0741.rst:337 ../../peps/peps/pep-0741.rst:441
msgid "``list[str]``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:276
msgid "API: ``sys.argv``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:277
msgid "``base_exec_prefix``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:278 ../../peps/peps/pep-0741.rst:281
#: ../../peps/peps/pep-0741.rst:284 ../../peps/peps/pep-0741.rst:290
#: ../../peps/peps/pep-0741.rst:293 ../../peps/peps/pep-0741.rst:316
#: ../../peps/peps/pep-0741.rst:319 ../../peps/peps/pep-0741.rst:322
#: ../../peps/peps/pep-0741.rst:328 ../../peps/peps/pep-0741.rst:375
#: ../../peps/peps/pep-0741.rst:402 ../../peps/peps/pep-0741.rst:408
#: ../../peps/peps/pep-0741.rst:411 ../../peps/peps/pep-0741.rst:417
#: ../../peps/peps/pep-0741.rst:453 ../../peps/peps/pep-0741.rst:456
#: ../../peps/peps/pep-0741.rst:459 ../../peps/peps/pep-0741.rst:462
#: ../../peps/peps/pep-0741.rst:465 ../../peps/peps/pep-0741.rst:468
#: ../../peps/peps/pep-0741.rst:483 ../../peps/peps/pep-0741.rst:487
#: ../../peps/peps/pep-0741.rst:491
msgid "``str``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:279
msgid "API: ``sys.base_exec_prefix``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:280
msgid "``base_executable``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:282
msgid "API: ``sys.base_executable``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:283
msgid "``base_prefix``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:285 ../../peps/peps/pep-0741.rst:291
#: ../../peps/peps/pep-0741.rst:320
msgid "API: ``sys.base_prefix``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:286
msgid "``bytes_warning``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:287 ../../peps/peps/pep-0741.rst:299
#: ../../peps/peps/pep-0741.rst:310 ../../peps/peps/pep-0741.rst:334
#: ../../peps/peps/pep-0741.rst:369 ../../peps/peps/pep-0741.rst:393
#: ../../peps/peps/pep-0741.rst:414 ../../peps/peps/pep-0741.rst:494
msgid "``int``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:288
msgid "API: ``sys.flags.bytes_warning``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:289
msgid "``exec_prefix``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:292
msgid "``executable``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:294
msgid "API: ``sys.executable``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:296 ../../peps/peps/pep-0741.rst:304
#: ../../peps/peps/pep-0741.rst:313 ../../peps/peps/pep-0741.rst:325
#: ../../peps/peps/pep-0741.rst:331 ../../peps/peps/pep-0741.rst:340
#: ../../peps/peps/pep-0741.rst:372 ../../peps/peps/pep-0741.rst:378
#: ../../peps/peps/pep-0741.rst:381 ../../peps/peps/pep-0741.rst:384
#: ../../peps/peps/pep-0741.rst:387 ../../peps/peps/pep-0741.rst:390
#: ../../peps/peps/pep-0741.rst:396 ../../peps/peps/pep-0741.rst:399
#: ../../peps/peps/pep-0741.rst:405 ../../peps/peps/pep-0741.rst:420
#: ../../peps/peps/pep-0741.rst:423 ../../peps/peps/pep-0741.rst:426
#: ../../peps/peps/pep-0741.rst:429 ../../peps/peps/pep-0741.rst:432
#: ../../peps/peps/pep-0741.rst:435 ../../peps/peps/pep-0741.rst:438
#: ../../peps/peps/pep-0741.rst:444 ../../peps/peps/pep-0741.rst:447
#: ../../peps/peps/pep-0741.rst:450 ../../peps/peps/pep-0741.rst:471
#: ../../peps/peps/pep-0741.rst:474 ../../peps/peps/pep-0741.rst:477
#: ../../peps/peps/pep-0741.rst:480 ../../peps/peps/pep-0741.rst:497
#: ../../peps/peps/pep-0741.rst:500 ../../peps/peps/pep-0741.rst:503
#: ../../peps/peps/pep-0741.rst:506 ../../peps/peps/pep-0741.rst:509
#: ../../peps/peps/pep-0741.rst:512 ../../peps/peps/pep-0741.rst:515
#: ../../peps/peps/pep-0741.rst:518 ../../peps/peps/pep-0741.rst:521
msgid "``bool``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:297
msgid "API: ``sys.flags.inspect`` (``int``)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:298
msgid "``int_max_str_digits``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:300
msgid ""
"API: ``sys.flags.int_max_str_digits``, ``sys.get_int_max_str_digits()`` and "
"``sys.set_int_max_str_digits()``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:303
msgid "``interactive``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:305
msgid "API: ``sys.flags.interactive``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:306
msgid "``module_search_paths``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:308
msgid "API: ``sys.path``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:311
msgid "API: ``sys.flags.optimize``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:314
msgid "API: ``sys.flags.debug`` (``int``)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:315
msgid "``platlibdir``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:317
msgid "API: ``sys.platlibdir``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:318
msgid "``prefix``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:321
msgid "``pycache_prefix``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:323
msgid "API: ``sys.pycache_prefix``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:324
msgid "``quiet``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:326
msgid "API: ``sys.flags.quiet`` (``int``)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:327
msgid "``stdlib_dir``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:329
msgid "API: ``sys._stdlib_dir``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:330
msgid "``use_environment``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:332
msgid "API: ``sys.flags.ignore_environment`` (``int``)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:335
msgid "API: ``sys.flags.verbose``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:336
msgid "``warnoptions``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:338
msgid "API: ``sys.warnoptions``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:341
msgid ""
"API: ``sys.flags.dont_write_bytecode`` (``int``) and ``sys."
"dont_write_bytecode`` (``bool``)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:342
msgid "``xoptions``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:343
msgid "``dict[str, str]``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:344
msgid "API: ``sys._xoptions``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:346
msgid ""
"Some option names are different than ``sys`` attributes, such as "
"``optimization_level`` option and ``sys.flags.optimize`` attribute. "
"``PyConfig_Set()`` sets the corresponding ``sys`` attribute."
msgstr ""

#: ../../peps/peps/pep-0741.rst:350
msgid ""
"The ``xoptions`` is a list of strings in ``PyInitConfig`` where each string "
"has the format ``key`` (*value* is ``True`` implicitly) or ``key=value``. In "
"the current runtime configuration, it becomes a dictionary (``key: str`` → "
"``value: str | True``)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:356
msgid "Read-only configuration options"
msgstr ""

#: ../../peps/peps/pep-0741.rst:358
msgid ""
"Following options can be get ``PyConfig_Get()``, but cannot be set by "
"``PyConfig_Set()``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:368
msgid "``allocator``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:371
msgid "``buffered_stdio``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:374
msgid "``check_hash_pycs_mode``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:376
msgid "API: ``imp.check_hash_pycs_mode``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:377
msgid "``code_debug_ranges``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:380
msgid "``coerce_c_locale``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:383
msgid "``coerce_c_locale_warn``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:386
msgid "``configure_c_stdio``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:389
msgid "``configure_locale``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:392
msgid "``cpu_count``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:394
msgid "API: ``os.cpu_count()`` (``int | None``)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:395
msgid "``dev_mode``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:397
msgid "API: ``sys.flags.dev_mode``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:398
msgid "``dump_refs``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:401
msgid "``dump_refs_file``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:404
msgid "``faulthandler``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:406
msgid "API: ``faulthandler.is_enabled()``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:407
msgid "``filesystem_encoding``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:409
msgid "API: ``sys.getfilesystemencoding()``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:410
msgid "``filesystem_errors``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:412
msgid "API: ``sys.getfilesystemencodeerrors()``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:413
msgid "``hash_seed``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:416
msgid "``home``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:419
msgid "``import_time``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:422
msgid "``install_signal_handlers``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:425
msgid "``isolated``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:427
msgid "API: ``sys.flags.isolated`` (``int``)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:428
msgid "``legacy_windows_fs_encoding``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:431
msgid "``legacy_windows_stdio``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:433
msgid "Windows only"
msgstr ""

#: ../../peps/peps/pep-0741.rst:434
msgid "``malloc_stats``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:437
msgid "``module_search_paths_set``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:440
msgid "``orig_argv``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:442
msgid "API: ``sys.orig_argv``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:443
msgid "``pathconfig_warnings``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:446
msgid "``parse_argv``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:449
msgid "``perf_profiling``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:451
msgid "API: ``sys.is_stack_trampoline_active()``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:452
msgid "``program_name``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:455
msgid "``pythonpath_env``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:458
msgid "``run_command``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:461
msgid "``run_filename``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:464
msgid "``run_module``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:467
msgid "``run_presite``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:469
msgid "need a debug build."
msgstr ""

#: ../../peps/peps/pep-0741.rst:470
msgid "``safe_path``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:473
msgid "``show_ref_count``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:476
msgid "``site_import``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:478
msgid "API: ``sys.flags.no_site`` (``int``)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:479
msgid "``skip_source_first_line``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:482
msgid "``stdio_encoding``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:484
msgid ""
"API: ``sys.stdin.encoding``, ``sys.stdout.encoding`` and ``sys.stderr."
"encoding``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:486
msgid "``stdio_errors``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:488
msgid ""
"API: ``sys.stdin.errors``, ``sys.stdout.errors`` and ``sys.stderr.errors``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:490
msgid "``sys_path_0``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:493
msgid "``tracemalloc``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:495
msgid "API: ``tracemalloc.is_tracing()`` (``bool``)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:496
msgid "``use_frozen_modules``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:499
msgid "``use_hash_seed``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:502
msgid "``utf8_mode``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:505
msgid "``user_site_directory``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:507
msgid "API: ``sys.flags.no_user_site`` (``int``)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:508
msgid "``warn_default_encoding``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:511
msgid "``_install_importlib``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:514
msgid "``_init_main``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:517
msgid "``_is_python_build``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:520
msgid "``_pystats``"
msgstr ""

#: ../../peps/peps/pep-0741.rst:522
msgid ""
"API: ``sys._stats_on()``, ``sys._stats_off()``. Need a ``Py_STATS`` build."
msgstr ""

#: ../../peps/peps/pep-0741.rst:527
msgid "Create Config"
msgstr ""

#: ../../peps/peps/pep-0741.rst:529
msgid "``PyInitConfig`` structure:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:530
msgid ""
"Opaque structure to configure the Python preinitialization and the Python "
"initialization."
msgstr ""

#: ../../peps/peps/pep-0741.rst:533
msgid "``PyInitConfig* PyInitConfig_Create(void)``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:534
msgid ""
"Create a new initialization configuration using default values of the "
"`Isolated Configuration <https://docs.python.org/dev/c-api/init_config."
"html#isolated-configuration>`_."
msgstr ""

#: ../../peps/peps/pep-0741.rst:538
msgid "It must be freed with ``PyInitConfig_Free()``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:540
msgid "Return ``NULL`` on memory allocation failure."
msgstr ""

#: ../../peps/peps/pep-0741.rst:542
msgid "``void PyInitConfig_Free(PyInitConfig *config)``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:543
msgid "Free memory of an initialization configuration."
msgstr ""

#: ../../peps/peps/pep-0741.rst:546
msgid "Get Options"
msgstr ""

#: ../../peps/peps/pep-0741.rst:548 ../../peps/peps/pep-0741.rst:589
#: ../../peps/peps/pep-0741.rst:685
msgid ""
"The configuration option *name* parameter must be a non-NULL null-terminated "
"UTF-8 encoded string."
msgstr ""

#: ../../peps/peps/pep-0741.rst:551
msgid "``int PyInitConfig_HasOption(PyInitConfig *config, const char *name)``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:552
msgid "Test if the configuration has an option called *name*."
msgstr ""

#: ../../peps/peps/pep-0741.rst:554
msgid "Return ``1`` if the option exists, or return ``0`` otherwise."
msgstr ""

#: ../../peps/peps/pep-0741.rst:556
msgid ""
"``int PyInitConfig_GetInt(PyInitConfig *config, const char *name, int64_t "
"*value)``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:557
msgid "Get an integer configuration option."
msgstr ""

#: ../../peps/peps/pep-0741.rst:559 ../../peps/peps/pep-0741.rst:566
msgid "Set *\\*value*, and return ``0`` on success."
msgstr ""

#: ../../peps/peps/pep-0741.rst:560 ../../peps/peps/pep-0741.rst:567
#: ../../peps/peps/pep-0741.rst:576 ../../peps/peps/pep-0741.rst:601
#: ../../peps/peps/pep-0741.rst:608 ../../peps/peps/pep-0741.rst:615
#: ../../peps/peps/pep-0741.rst:625 ../../peps/peps/pep-0741.rst:641
msgid "Set an error in *config* and return ``-1`` on error."
msgstr ""

#: ../../peps/peps/pep-0741.rst:562
msgid ""
"``int PyInitConfig_GetStr(PyInitConfig *config, const char *name, char "
"**value)``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:563
msgid ""
"Get a string configuration option as a null-terminated UTF-8 encoded string."
msgstr ""

#: ../../peps/peps/pep-0741.rst:569
msgid "On success, the string must be released with ``free(value)``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:571
msgid ""
"``int PyInitConfig_GetStrList(PyInitConfig *config, const char *name, size_t "
"*length, char ***items)``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:572
msgid ""
"Get a string list configuration option as an array of null-terminated UTF-8 "
"encoded strings."
msgstr ""

#: ../../peps/peps/pep-0741.rst:575
msgid "Set *\\*length* and *\\*value*, and return ``0`` on success."
msgstr ""

#: ../../peps/peps/pep-0741.rst:578
msgid ""
"On success, the string list must be released with "
"``PyInitConfig_FreeStrList(length, items)``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:581
msgid "``void PyInitConfig_FreeStrList(size_t length, char **items)``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:582
msgid "Free memory of a string list created by ``PyInitConfig_GetStrList()``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:587
msgid "Set Options"
msgstr ""

#: ../../peps/peps/pep-0741.rst:592
msgid ""
"Some configuration options have side effects on other options. This logic is "
"only implemented when ``Py_InitializeFromInitConfig()`` is called, not by "
"the \"Set\" functions below. For example, setting ``dev_mode`` to ``1`` does "
"not set ``faulthandler`` to ``1``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:597
msgid ""
"``int PyInitConfig_SetInt(PyInitConfig *config, const char *name, int64_t "
"value)``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:598
msgid "Set an integer configuration option."
msgstr ""

#: ../../peps/peps/pep-0741.rst:600 ../../peps/peps/pep-0741.rst:607
#: ../../peps/peps/pep-0741.rst:614 ../../peps/peps/pep-0741.rst:624
#: ../../peps/peps/pep-0741.rst:640
msgid "Return ``0`` on success."
msgstr ""

#: ../../peps/peps/pep-0741.rst:603
msgid ""
"``int PyInitConfig_SetStr(PyInitConfig *config, const char *name, const char "
"*value)``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:604
msgid ""
"Set a string configuration option from a null-terminated UTF-8 encoded "
"string. The string is copied."
msgstr ""

#: ../../peps/peps/pep-0741.rst:610
msgid ""
"``int PyInitConfig_SetStrList(PyInitConfig *config, const char *name, size_t "
"length, char * const *items)``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:611
msgid ""
"Set a string list configuration option from an array of null-terminated "
"UTF-8 encoded strings. The string list is copied."
msgstr ""

#: ../../peps/peps/pep-0741.rst:617
msgid ""
"``int PyInitConfig_AddModule(PyInitConfig *config, const char *name, "
"PyObject* (*initfunc)(void))``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:618
msgid "Add a built-in extension module to the table of built-in modules."
msgstr ""

#: ../../peps/peps/pep-0741.rst:620
msgid ""
"The new module can be imported by the name *name*, and uses the function "
"*initfunc* as the initialization function called on the first attempted "
"import."
msgstr ""

#: ../../peps/peps/pep-0741.rst:627
msgid ""
"If Python is initialized multiple times, ``PyInitConfig_AddModule()`` must "
"be called at each Python initialization."
msgstr ""

#: ../../peps/peps/pep-0741.rst:631
msgid "Similar to the ``PyImport_AppendInittab()`` function."
msgstr ""

#: ../../peps/peps/pep-0741.rst:635 ../../peps/peps/pep-0741.rst:762
msgid "Initialize Python"
msgstr ""

#: ../../peps/peps/pep-0741.rst:637
msgid "``int Py_InitializeFromInitConfig(PyInitConfig *config)``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:638
msgid "Initialize Python from the initialization configuration."
msgstr ""

#: ../../peps/peps/pep-0741.rst:642
msgid "Set an exit code in *config* and return ``-1`` if Python wants to exit."
msgstr ""

#: ../../peps/peps/pep-0741.rst:645
msgid "See ``PyInitConfig_GetExitcode()`` for the exitcode case."
msgstr ""

#: ../../peps/peps/pep-0741.rst:649
msgid "Error Handling"
msgstr ""

#: ../../peps/peps/pep-0741.rst:651
msgid ""
"``int PyInitConfig_GetError(PyInitConfig* config, const char **err_msg)``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:652
msgid "Get the *config* error message."
msgstr ""

#: ../../peps/peps/pep-0741.rst:654
msgid "Set *\\*err_msg* and return ``1`` if an error is set."
msgstr ""

#: ../../peps/peps/pep-0741.rst:655
msgid "Set *\\*err_msg* to ``NULL`` and return ``0`` otherwise."
msgstr ""

#: ../../peps/peps/pep-0741.rst:657
msgid "An error message is an UTF-8 encoded string."
msgstr ""

#: ../../peps/peps/pep-0741.rst:659
msgid "If *config* has an exit code, format the exit code as an error message."
msgstr ""

#: ../../peps/peps/pep-0741.rst:662
msgid ""
"The error message remains valid until another ``PyInitConfig`` function is "
"called with *config*. The caller doesn't have to free the error message."
msgstr ""

#: ../../peps/peps/pep-0741.rst:666
msgid "``int PyInitConfig_GetExitcode(PyInitConfig* config, int *exitcode)``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:667
msgid "Get the *config* exit code."
msgstr ""

#: ../../peps/peps/pep-0741.rst:669
msgid "Set *\\*exitcode* and return ``1`` if Python wants to exit."
msgstr ""

#: ../../peps/peps/pep-0741.rst:670
msgid "Return ``0`` if *config* has no exit code set."
msgstr ""

#: ../../peps/peps/pep-0741.rst:672
msgid ""
"Only the ``Py_InitializeFromInitConfig()`` function can set an exit code if "
"the ``parse_argv`` option is non-zero. For example, an isolated "
"configuration cannot set an exit code by default, since ``parse_argv`` is "
"zero by default."
msgstr ""

#: ../../peps/peps/pep-0741.rst:677
msgid ""
"An exit code can be set when parsing the command line failed (exit code 2) "
"or when a command line option asks to display the command line help (exit "
"code 0)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:683
msgid "Get and Set the Runtime Configuration"
msgstr ""

#: ../../peps/peps/pep-0741.rst:688
msgid "``PyObject* PyConfig_Get(const char *name)``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:689
msgid ""
"Get the current runtime value of a configuration option as a Python object."
msgstr ""

#: ../../peps/peps/pep-0741.rst:692
msgid "Return a new reference on success."
msgstr ""

#: ../../peps/peps/pep-0741.rst:693 ../../peps/peps/pep-0741.rst:712
msgid "Set an exception and return ``NULL`` on error."
msgstr ""

#: ../../peps/peps/pep-0741.rst:695
msgid ""
"The object type depends on the option: see `Configuration Options`_ tables."
msgstr ""

#: ../../peps/peps/pep-0741.rst:698
msgid ""
"Other options are get from internal ``PyPreConfig`` and ``PyConfig`` "
"structures."
msgstr ""

#: ../../peps/peps/pep-0741.rst:700 ../../peps/peps/pep-0741.rst:726
msgid ""
"The caller must hold the GIL. The function cannot be called before Python "
"initialization nor after Python finalization."
msgstr ""

#: ../../peps/peps/pep-0741.rst:703
msgid "``int PyConfig_GetInt(const char *name, int *value)``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:704
msgid "Similar to ``PyConfig_Get()``, but get the value as an integer."
msgstr ""

#: ../../peps/peps/pep-0741.rst:706
msgid "Set ``*value`` and return ``0`` success."
msgstr ""

#: ../../peps/peps/pep-0741.rst:707
msgid "Set an exception and return ``-1`` on error."
msgstr ""

#: ../../peps/peps/pep-0741.rst:709
msgid "``PyObject* PyConfig_Names(void)``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:710
msgid "Get all configuration option names as a ``frozenset``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:714
msgid "The caller must hold the GIL."
msgstr ""

#: ../../peps/peps/pep-0741.rst:716
msgid "``PyObject* PyConfig_Set(const char *name, PyObject *value)``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:717
msgid "Set the current runtime value of a configuration option."
msgstr ""

#: ../../peps/peps/pep-0741.rst:719
msgid "Raise a ``ValueError`` if there is no option *name*."
msgstr ""

#: ../../peps/peps/pep-0741.rst:720
msgid "Raise a ``ValueError`` if *value* is an invalid value."
msgstr ""

#: ../../peps/peps/pep-0741.rst:721
msgid "Raise a ``ValueError`` if the option is read-only: cannot be set."
msgstr ""

#: ../../peps/peps/pep-0741.rst:722
msgid "Raise a ``TypeError`` if *value* has not the proper type."
msgstr ""

#: ../../peps/peps/pep-0741.rst:724
msgid "`Read-only configuration options`_ cannot be set."
msgstr ""

#: ../../peps/peps/pep-0741.rst:731
msgid "Stability"
msgstr ""

#: ../../peps/peps/pep-0741.rst:733
msgid ""
"The behavior of options, the default option values, and the Python behavior "
"can change at each Python version: they are not \"stable\"."
msgstr ""

#: ../../peps/peps/pep-0741.rst:736
msgid ""
"Moreover, configuration options can be added, deprecated and removed "
"following the usual :pep:`387` deprecation process."
msgstr ""

#: ../../peps/peps/pep-0741.rst:741
msgid "Interaction with the PyPreConfig and PyConfig APIs"
msgstr ""

#: ../../peps/peps/pep-0741.rst:743
msgid ""
"The lower level :pep:`587` ``PyPreConfig`` and ``PyConfig`` APIs  remain "
"available and fully supported. As noted in the Abstract, they remain the "
"preferred approach for embedding use cases that are aiming to closely "
"emulate the behaviour of the full CPython CLI, rather than just making a "
"Python runtime available as part of a larger application."
msgstr ""

#: ../../peps/peps/pep-0741.rst:749
msgid ""
"The ``PyPreConfig`` APIs may be used in combination with the initialization "
"API in this PEP. In such cases, the read-only vs read/write restrictions for "
"preconfiguration settings apply to ``PyInitConfig_SetInt`` in addition to "
"``PyConfig_Set`` once the interpreter has been preconfigured (specifically, "
"only ``use_environment`` may be updated, attempting to update any of the "
"other preconfiguration variables will report an error)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:759
msgid "Examples"
msgstr ""

#: ../../peps/peps/pep-0741.rst:764
msgid ""
"Example initializing Python, set configuration options of different types, "
"return -1 on error:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:821
msgid "Increase initialization bytes_warning option"
msgstr ""

#: ../../peps/peps/pep-0741.rst:823
msgid ""
"Example increasing the ``bytes_warning`` option of an initialization "
"configuration:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:843
msgid "Get the runtime verbose option"
msgstr ""

#: ../../peps/peps/pep-0741.rst:845
msgid ""
"Example getting the current runtime value of the configuration option "
"``verbose``:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:861
msgid ""
"On error, the function silently ignores the error and returns ``-1``. In "
"practice, getting the ``verbose`` option cannot fail, unless a future Python "
"version removes the option."
msgstr ""

#: ../../peps/peps/pep-0741.rst:867
msgid "Implementation"
msgstr ""

#: ../../peps/peps/pep-0741.rst:869
msgid ""
"Issue: `No limited C API to customize Python initialization <https://github."
"com/python/cpython/issues/107954>`_"
msgstr ""

#: ../../peps/peps/pep-0741.rst:871
msgid ""
"PR: `Add PyInitConfig C API <https://github.com/python/cpython/pull/110176>`_"
msgstr ""

#: ../../peps/peps/pep-0741.rst:873
msgid ""
"PR: `Add PyConfig_Get() function <https://github.com/python/cpython/"
"pull/112609>`_"
msgstr ""

#: ../../peps/peps/pep-0741.rst:878
msgid "Backwards Compatibility"
msgstr ""

#: ../../peps/peps/pep-0741.rst:880
msgid "Changes are fully backward compatible. Only new APIs are added."
msgstr ""

#: ../../peps/peps/pep-0741.rst:882
msgid ""
"Existing API such as the ``PyConfig`` C API (PEP 587) are left unchanged."
msgstr ""

#: ../../peps/peps/pep-0741.rst:887
msgid "Rejected Ideas"
msgstr ""

#: ../../peps/peps/pep-0741.rst:890
msgid "Configuration as text"
msgstr ""

#: ../../peps/peps/pep-0741.rst:892
msgid ""
"It was proposed to provide the configuration as text to make the API "
"compatible with the stable ABI and to allow custom options."
msgstr ""

#: ../../peps/peps/pep-0741.rst:895
msgid "Example::"
msgstr ""

#: ../../peps/peps/pep-0741.rst:906
msgid ""
"The API would take the configuration as a string, not as a file. Example "
"with a hypothetical ``PyInit_SetConfig()`` function:"
msgstr ""

#: ../../peps/peps/pep-0741.rst:923
msgid "The example ignores error handling to make it easier to read."
msgstr ""

#: ../../peps/peps/pep-0741.rst:925
msgid ""
"The problem is that generating such configuration text requires adding "
"quotes to strings and to escape quotes in strings. Formatting an array of "
"strings becomes non-trivial."
msgstr ""

#: ../../peps/peps/pep-0741.rst:929
msgid ""
"Providing an API to format a string or an array of strings is not really "
"worth it, whereas Python can provide directly an API to set a configuration "
"option where the value is passed directly as a string or an array of "
"strings. It avoids giving special meaning to some characters, such as "
"newline characters, which would have to be escaped."
msgstr ""

#: ../../peps/peps/pep-0741.rst:937
msgid "Refer to an option with an integer"
msgstr ""

#: ../../peps/peps/pep-0741.rst:939
msgid ""
"Using strings to refer to a configuration option requires comparing strings "
"which can be slower than comparing integers."
msgstr ""

#: ../../peps/peps/pep-0741.rst:942
msgid ""
"Use integers, similar to type \"slots\" such as ``Py_tp_doc``, to refer to a "
"configuration option. The ``const char *name`` parameter is replaced with "
"``int option``."
msgstr ""

#: ../../peps/peps/pep-0741.rst:946
msgid ""
"Accepting custom options is more likely to cause conflicts when using "
"integers, since it's harder to maintain \"namespaces\" (ranges) for integer "
"options. Using strings, a simple prefix with a colon separator can be used."
msgstr ""

#: ../../peps/peps/pep-0741.rst:951
msgid ""
"Integers also requires maintaining a list of integer constants and so make "
"the C API and the Python API larger."
msgstr ""

#: ../../peps/peps/pep-0741.rst:954
msgid ""
"Python 3.13 only has around 62 configuration options, and so performance is "
"not really a blocker issue. If better performance is needed later, a hash "
"table can be used to get an option by its name."
msgstr ""

#: ../../peps/peps/pep-0741.rst:958
msgid ""
"If getting a configuration option is used in hot code, the value can be read "
"once and cached. By the way, most configuration options cannot be changed at "
"runtime."
msgstr ""

#: ../../peps/peps/pep-0741.rst:964
msgid "Multi-phase initialization (similar to PEP 432)"
msgstr ""

#: ../../peps/peps/pep-0741.rst:966
msgid ""
"`Eric Snow expressed concerns <https://discuss.python.org/t/pep-741-python-"
"configuration-c-api-second-version/45403/27>`_ that this proposal might "
"reinforce with embedders the idea that initialization is a single monolithic "
"step.  He argued that initialization involves 5 distinct phases and even "
"suggested that the API should reflect this explicitly.  Eric proposed that, "
"at the very least, the implementation of initialization should reflect the "
"phases, in part for improved code health.  Overall, his explanation has some "
"similarities with :pep:`432` and :pep:`587`."
msgstr ""

#: ../../peps/peps/pep-0741.rst:975
msgid ""
"Another of Eric's key points relevant to this PEP was that, ideally, the "
"config passed to ``Py_InitializeFromConfig()`` should be complete before "
"that function is called, whereas currently initialization actually modifies "
"the config."
msgstr ""

#: ../../peps/peps/pep-0741.rst:980
msgid ""
"While Eric wasn't necessarily suggesting an alternative to PEP 741, any "
"proposal to add a granular initialization API around phases is effectively "
"the opposite of what this PEP is trying to accomplish. Such API is more "
"complicated, it requires adding new public structures and new public "
"functions. It makes the Python initialization more complicated, rather than "
"this PEP tries to unifiy existing APIs and make them simpler (the opposite). "
"Having multiple structures for similar purpose can lead to duplicate "
"members, similar issue than duplicated members between existing "
"``PyPreConfig`` and ``PyConfig`` structures."
msgstr ""

#: ../../peps/peps/pep-0741.rst:992
msgid "Locale encoding and wide strings"
msgstr ""

#: ../../peps/peps/pep-0741.rst:994
msgid ""
"Accepting strings encoded to the locale encoding and accepting wide strings "
"(``wchar_t*``) in the ``PyInitConfig`` API was deferred to keep the "
"``PyInitConfig`` API simple and avoid the complexity of the Python "
"preinitialization. These features are also mostly needed when emulating the "
"full CPython CLI behaviour, and hence better served by the lower level :pep:"
"`587` API."
msgstr ""

#: ../../peps/peps/pep-0741.rst:1003
msgid "Discussions"
msgstr ""

#: ../../peps/peps/pep-0741.rst:1005
msgid ""
"`PEP 741: Python Configuration C API (second version) <https://discuss."
"python.org/t/pep-741-python-configuration-c-api-second-version/45403>`_ "
"(February 2024)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:1008
msgid ""
"`PEP 741: Python Configuration C API <https://discuss.python.org/t/pep-741-"
"python-configuration-c-api/43637>`_ (January 2024)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:1011
msgid ""
"`FR: Allow private runtime config to enable extending without breaking the "
"PyConfig ABI <https://discuss.python.org/t/fr-allow-private-runtime-config-"
"to-enable-extending-without-breaking-the-pyconfig-abi/18004>`__ (August "
"2022)."
msgstr ""

#: ../../peps/peps/pep-0741.rst:1018
msgid "Copyright"
msgstr ""

#: ../../peps/peps/pep-0741.rst:1020
msgid ""
"This document is placed in the public domain or under the CC0-1.0-Universal "
"license, whichever is more permissive."
msgstr ""
