# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0406.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0406.rst:5
msgid "Alyssa Coghlan <ncoghlan@gmail.com>, Greg Slodkowicz <jergosh@gmail.com>"
msgstr ""

#: ../../peps/pep-0406.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0406.rst:6
msgid "Withdrawn"
msgstr ""

#: ../../peps/pep-0406.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0406.rst:7
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0406.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0406.rst:9
msgid "04-Jul-2011"
msgstr ""

#: ../../peps/pep-0406.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-0406.rst:10
msgid "3.4"
msgstr ""

#: ../../peps/pep-0406.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0406.rst:11
msgid "31-Jul-2011, 13-Nov-2011, 04-Dec-2011"
msgstr ""

#: ../../peps/pep-0406.rst:14
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0406.rst:16
msgid ""
"This PEP proposes the introduction of a new 'ImportEngine' class as part "
"of ``importlib`` which would encapsulate all state related to importing "
"modules into a single object. Creating new instances of this object would"
" then provide an alternative to completely replacing the built-in "
"implementation of the import statement, by overriding the "
"``__import__()`` function. To work with the builtin import functionality "
"and importing via import engine objects, this PEP proposes a context "
"management based approach to temporarily replacing the global import "
"state."
msgstr ""

#: ../../peps/pep-0406.rst:25
msgid ""
"The PEP also proposes inclusion of a ``GlobalImportEngine`` subclass and "
"a globally accessible instance of that class, which \"writes through\" to"
" the process global state. This provides a backwards compatible bridge "
"between the proposed encapsulated API and the legacy process global "
"state, and allows straightforward support for related state updates (e.g."
" selectively invalidating path cache entries when ``sys.path`` is "
"modified)."
msgstr ""

#: ../../peps/pep-0406.rst:34
msgid "PEP Withdrawal"
msgstr ""

#: ../../peps/pep-0406.rst:36
msgid ""
"The import system has seen substantial changes since this PEP was "
"originally written, as part of :pep:`420` in Python 3.3 and :pep:`451` in"
" Python 3.4."
msgstr ""

#: ../../peps/pep-0406.rst:39
msgid ""
"While providing an encapsulation of the import state is still highly "
"desirable, it is better tackled in a new PEP using :pep:`451` as a "
"foundation, and permitting only the use of :pep:`451` compatible finders "
"and loaders (as those avoid many of the issues of direct manipulation of "
"global state associated with the previous loader API)."
msgstr ""

#: ../../peps/pep-0406.rst:47
msgid "Rationale"
msgstr ""

#: ../../peps/pep-0406.rst:49
msgid ""
"Currently, most state related to the import system is stored as module "
"level attributes in the ``sys`` module. The one exception is the import "
"lock, which is not accessible directly, but only via the related "
"functions in the ``imp`` module. The current process global import state "
"comprises:"
msgstr ""

#: ../../peps/pep-0406.rst:54
msgid "sys.modules"
msgstr ""

#: ../../peps/pep-0406.rst:55
msgid "sys.path"
msgstr ""

#: ../../peps/pep-0406.rst:56
msgid "sys.path_hooks"
msgstr ""

#: ../../peps/pep-0406.rst:57
msgid "sys.meta_path"
msgstr ""

#: ../../peps/pep-0406.rst:58
msgid "sys.path_importer_cache"
msgstr ""

#: ../../peps/pep-0406.rst:59
msgid "the import lock (imp.lock_held()/acquire_lock()/release_lock())"
msgstr ""

#: ../../peps/pep-0406.rst:61
msgid ""
"Isolating this state would allow multiple import states to be "
"conveniently stored within a process. Placing the import functionality in"
" a self-contained object would also allow subclassing to add additional "
"features (e.g. module import notifications or fine-grained control over "
"which modules can be imported). The engine would also be subclassed to "
"make it possible to use the import engine API to interact with the "
"existing process-global state."
msgstr ""

#: ../../peps/pep-0406.rst:69
msgid ""
"The namespace PEPs (especially :pep:`402`) raise a potential need for "
"*additional* process global state, in order to correctly update package "
"paths as ``sys.path`` is modified."
msgstr ""

#: ../../peps/pep-0406.rst:73
msgid ""
"Finally, providing a coherent object for all this state makes it feasible"
" to also provide context management features that allow the import state "
"to be temporarily substituted."
msgstr ""

#: ../../peps/pep-0406.rst:79
msgid "Proposal"
msgstr ""

#: ../../peps/pep-0406.rst:81
msgid ""
"We propose introducing an ImportEngine class to encapsulate import "
"functionality. This includes an ``__import__()`` method which can be used"
" as an alternative to the built-in ``__import__()`` when desired and also"
" an ``import_module()`` method, equivalent to "
"``importlib.import_module()`` [3]_."
msgstr ""

#: ../../peps/pep-0406.rst:87
msgid ""
"Since there are global import state invariants that are assumed and "
"should be maintained, we introduce a ``GlobalImportState`` class with an "
"interface identical to ``ImportEngine`` but directly accessing the "
"current global import state. This can be easily implemented using class "
"properties."
msgstr ""

#: ../../peps/pep-0406.rst:94
msgid "Specification"
msgstr ""

#: ../../peps/pep-0406.rst:97
msgid "ImportEngine API"
msgstr ""

#: ../../peps/pep-0406.rst:99
msgid "The proposed extension consists of the following objects:"
msgstr ""

#: ../../peps/pep-0406.rst:101
msgid "``importlib.engine.ImportEngine``"
msgstr ""

#: ../../peps/pep-0406.rst:103
msgid "``from_engine(self, other)``"
msgstr ""

#: ../../peps/pep-0406.rst:105
msgid ""
"Create a new import object from another ImportEngine instance. The new "
"object is initialised with a copy of the state in ``other``. When called "
"on ``importlib engine.sysengine``, ``from_engine()`` can be used to "
"create an ``ImportEngine`` object with a **copy** of the global import "
"state."
msgstr ""

#: ../../peps/pep-0406.rst:111
msgid "``__import__(self, name, globals={}, locals={}, fromlist=[], level=0)``"
msgstr ""

#: ../../peps/pep-0406.rst:113
msgid ""
"Reimplementation of the builtin ``__import__()`` function. The import of "
"a module will proceed using the state stored in the ImportEngine instance"
" rather than the global import state. For full documentation of "
"``__import__`` functionality, see [2]_ . ``__import__()`` from "
"``ImportEngine`` and its subclasses can be used to customise the "
"behaviour of the ``import`` statement by replacing "
"``__builtin__.__import__`` with ``ImportEngine().__import__``."
msgstr ""

#: ../../peps/pep-0406.rst:121
msgid "``import_module(name, package=None)``"
msgstr ""

#: ../../peps/pep-0406.rst:123
msgid ""
"A reimplementation of ``importlib.import_module()`` which uses the import"
" state stored in the ImportEngine instance. See [3]_ for a full "
"reference."
msgstr ""

#: ../../peps/pep-0406.rst:127
msgid "``modules, path, path_hooks, meta_path, path_importer_cache``"
msgstr ""

#: ../../peps/pep-0406.rst:129
msgid "Instance-specific versions of their process global ``sys`` equivalents"
msgstr ""

#: ../../peps/pep-0406.rst:132
msgid "``importlib.engine.GlobalImportEngine(ImportEngine)``"
msgstr ""

#: ../../peps/pep-0406.rst:134
msgid ""
"Convenience class to provide engine-like access to the global state. "
"Provides ``__import__()``, ``import_module()`` and ``from_engine()`` "
"methods like ``ImportEngine`` but writes through to the global state in "
"``sys``."
msgstr ""

#: ../../peps/pep-0406.rst:139
msgid ""
"To support various namespace package mechanisms, when ``sys.path`` is "
"altered, tools like ``pkgutil.extend_path`` should be used to also modify"
" other parts of the import state (in this case, package ``__path__`` "
"attributes). The path importer cache should also be invalidated when a "
"variety of changes are made."
msgstr ""

#: ../../peps/pep-0406.rst:144
msgid ""
"The ``ImportEngine`` API will provide convenience methods that "
"automatically make related import state updates as part of a single "
"operation."
msgstr ""

#: ../../peps/pep-0406.rst:149
msgid "Global variables"
msgstr ""

#: ../../peps/pep-0406.rst:151
msgid "``importlib.engine.sysengine``"
msgstr ""

#: ../../peps/pep-0406.rst:153
msgid ""
"A precreated instance of ``GlobalImportEngine``. Intended for use by "
"importers and loaders that have been updated to accept optional "
"``engine`` parameters and with ``ImportEngine.from_engine(sysengine)`` to"
" start with a copy of the process global import state."
msgstr ""

#: ../../peps/pep-0406.rst:160
msgid "No changes to finder/loader interfaces"
msgstr ""

#: ../../peps/pep-0406.rst:162
msgid ""
"Rather than attempting to update the :pep:`302` APIs to accept additional"
" state, this PEP proposes that ``ImportEngine`` support the content "
"management protocol (similar to the context substitution mechanisms in "
"the ``decimal`` module)."
msgstr ""

#: ../../peps/pep-0406.rst:167
msgid "The context management mechanism for ``ImportEngine`` would:"
msgstr ""

#: ../../peps/pep-0406.rst:169
msgid ""
"On entry: * Acquire the import lock * Substitute the global import state "
"with the import engine's own state"
msgstr ""

#: ../../peps/pep-0406.rst:172
msgid ""
"On exit: * Restore the previous global import state * Release the import "
"lock"
msgstr ""

#: ../../peps/pep-0406.rst:176
msgid ""
"The precise API for this is TBD (but will probably use a distinct context"
" management object, along the lines of that created by "
"``decimal.localcontext``)."
msgstr ""

#: ../../peps/pep-0406.rst:182
msgid "Open Issues"
msgstr ""

#: ../../peps/pep-0406.rst:186
msgid "API design for falling back to global import state"
msgstr ""

#: ../../peps/pep-0406.rst:188
msgid ""
"The current proposal relies on the ``from_engine()`` API to fall back to "
"the global import state. It may be desirable to offer a variant that "
"instead falls back to the global import state dynamically."
msgstr ""

#: ../../peps/pep-0406.rst:192
msgid ""
"However, one big advantage of starting with an \"as isolated as "
"possible\" design is that it becomes possible to experiment with "
"subclasses that blur the boundaries between the engine instance state and"
" the process global state in various ways."
msgstr ""

#: ../../peps/pep-0406.rst:199
msgid "Builtin and extension modules must be process global"
msgstr ""

#: ../../peps/pep-0406.rst:201
msgid ""
"Due to platform limitations, only one copy of each builtin and extension "
"module can readily exist in each process. Accordingly, it is impossible "
"for each ``ImportEngine`` instance to load such modules independently."
msgstr ""

#: ../../peps/pep-0406.rst:205
msgid ""
"The simplest solution is for ``ImportEngine`` to refuse to load such "
"modules, raising ``ImportError``. ``GlobalImportEngine`` would be able to"
" load them normally."
msgstr ""

#: ../../peps/pep-0406.rst:209
msgid ""
"``ImportEngine`` will still return such modules from a prepopulated "
"module cache - it's only loading them directly which causes problems."
msgstr ""

#: ../../peps/pep-0406.rst:214
msgid "Scope of substitution"
msgstr ""

#: ../../peps/pep-0406.rst:216
msgid ""
"Related to the previous open issue is the question of what state to "
"substitute when using the context management API. It is currently the "
"case that replacing ``sys.modules`` can be unreliable due to cached "
"references and there's the underlying fact that having independent copies"
" of some modules is simply impossible due to platform limitations."
msgstr ""

#: ../../peps/pep-0406.rst:222
msgid "As part of this PEP, it will be necessary to document explicitly:"
msgstr ""

#: ../../peps/pep-0406.rst:224
msgid ""
"Which parts of the global import state can be substituted (and declare "
"code which caches references to that state without dealing with the "
"substitution case buggy)"
msgstr ""

#: ../../peps/pep-0406.rst:227
msgid ""
"Which parts must be modified in-place (and hence are not substituted by "
"the ``ImportEngine`` context management API, or otherwise scoped to "
"``ImportEngine`` instances)"
msgstr ""

#: ../../peps/pep-0406.rst:233
msgid "Reference Implementation"
msgstr ""

#: ../../peps/pep-0406.rst:235
msgid ""
"A reference implementation [4]_ for an earlier draft of this PEP, based "
"on Brett Cannon's importlib has been developed by Greg Slodkowicz as part"
" of the 2011 Google Summer of Code. Note that the current implementation "
"avoids modifying existing code, and hence duplicates a lot of things "
"unnecessarily. An actual implementation would just modify any such "
"affected code in place."
msgstr ""

#: ../../peps/pep-0406.rst:241
msgid ""
"That earlier draft of the PEP proposed change the :pep:`302` APIs to "
"support passing in an optional engine instance. This had the (serious) "
"downside of not correctly affecting further imports from the imported "
"module, hence the change to the context management based proposal for "
"substituting the global state."
msgstr ""

#: ../../peps/pep-0406.rst:248
msgid "References"
msgstr "Referências"

#: ../../peps/pep-0406.rst:250
msgid ""
"__import__() builtin function, The Python Standard Library documentation "
"(http://docs.python.org/library/functions.html#__import__)"
msgstr ""

#: ../../peps/pep-0406.rst:253
msgid ""
"Importlib documentation, Cannon "
"(http://docs.python.org/dev/library/importlib)"
msgstr ""

#: ../../peps/pep-0406.rst:256
msgid ""
"Reference implementation "
"(https://bitbucket.org/jergosh/gsoc_import_engine/src/default/Lib/importlib/engine.py)"
msgstr ""

#: ../../peps/pep-0406.rst:261
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0406.rst:263
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid "Nick Coghlan <ncoghlan@gmail.com>, Greg Slodkowicz <jergosh@gmail.com>"
#~ msgstr ""

