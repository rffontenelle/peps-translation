# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-14 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../peps/peps/pep-0613.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/peps/pep-0613.rst:3
msgid "Shannon Zhu <szhu@fb.com>"
msgstr ""

#: ../../peps/peps/pep-0613.rst
msgid "Sponsor"
msgstr ""

#: ../../peps/peps/pep-0613.rst:4
msgid "Guido van Rossum <guido@python.org>"
msgstr ""

#: ../../peps/peps/pep-0613.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/peps/pep-0613.rst:5
msgid ""
"https://mail.python.org/archives/list/typing-sig@python.org/thread/"
"MWRJOBEEEMFVXE7CAKO7B4P46IPM4AN3/"
msgstr ""

#: ../../peps/peps/pep-0613.rst
msgid "Status"
msgstr "Status"

#: ../../peps/peps/pep-0613.rst:6
msgid "Final"
msgstr ""

#: ../../peps/peps/pep-0613.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/peps/pep-0613.rst:7
msgid "Standards Track"
msgstr ""

#: ../../peps/peps/pep-0613.rst
msgid "Topic"
msgstr ""

#: ../../peps/peps/pep-0613.rst:8
msgid "Typing"
msgstr ""

#: ../../peps/peps/pep-0613.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/peps/pep-0613.rst:9 ../../peps/peps/pep-0613.rst:11
msgid "21-Jan-2020"
msgstr ""

#: ../../peps/peps/pep-0613.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/peps/pep-0613.rst:10
msgid "3.10"
msgstr ""

#: ../../peps/peps/pep-0613.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/peps/pep-0613.rst:17
msgid "Abstract"
msgstr ""

#: ../../peps/peps/pep-0613.rst:19
msgid ""
"Type aliases are user-specified types which may be as complex as any type "
"hint, and are specified with a simple variable assignment on a module top "
"level."
msgstr ""

#: ../../peps/peps/pep-0613.rst:22
msgid ""
"This PEP formalizes a way to explicitly declare an assignment as a type "
"alias."
msgstr ""

#: ../../peps/peps/pep-0613.rst:25
msgid "Motivation"
msgstr ""

#: ../../peps/peps/pep-0613.rst:27
msgid ""
"Type aliases are declared as top level variable assignments. In :pep:`PEP "
"484 <484#type-aliases>`, the distinction between a valid type alias and a "
"global variable was implicitly determined: if a top level assignment is "
"unannotated, and the assigned value is a valid type, then the name being "
"assigned to is a valid type alias. Otherwise, that name is simply a global "
"value that cannot be used as a type hint."
msgstr ""

#: ../../peps/peps/pep-0613.rst:34
msgid ""
"These implicit type alias declaration rules create confusion when type "
"aliases involve forward references, invalid types, or violate other "
"restrictions enforced on type alias declaration. Because the distinction "
"between an unannotated value and a type alias is implicit, ambiguous or "
"incorrect type alias declarations implicitly default to a valid value "
"assignment. This creates expressions that are impossible to express as type "
"aliases and punts error diagnosis of malformed type aliases downstream."
msgstr ""

#: ../../peps/peps/pep-0613.rst:42
msgid ""
"The following examples each include an illustration of some of the "
"suboptimal or confusing behaviors resulting from existing implicit alias "
"declarations. We also introduce explicit aliases of the format ``TypeName: "
"TypeAlias = Expression`` here for the sake of comparison, but the syntax is "
"discussed in further detail in later sections."
msgstr ""

#: ../../peps/peps/pep-0613.rst:49
msgid "Forward References:"
msgstr ""

#: ../../peps/peps/pep-0613.rst:56
msgid ""
"This code snippet should not error so long as ``ClassName`` is defined later "
"on. However, a type checker is forced to assume that MyType is a value "
"assignment rather than a type alias, and therefore may throw spurious errors "
"that (1) ``MyType`` is an unannotated global string, and (2) ``MyType`` "
"cannot be used as a return annotation because it is not a valid type."
msgstr ""

#: ../../peps/peps/pep-0613.rst:67
msgid ""
"Explicit aliases remove ambiguity so neither of the above errors will be "
"thrown. Additionally, if something is wrong with ``ClassName`` (i.e., it’s "
"not actually defined later), the type checker can throw an error."
msgstr ""

#: ../../peps/peps/pep-0613.rst:73
msgid "Error Messaging:"
msgstr ""

#: ../../peps/peps/pep-0613.rst:80
msgid ""
"A type checker should warn on this code snippet that ``InvalidType`` is not "
"a valid type, and therefore cannot be used to annotate an expression or to "
"construct a type alias. Instead, type checkers are forced to throw spurious "
"errors that (1) ``MyType`` is a global expression missing an annotation, and "
"(2) ``MyType`` is not a valid type in all usages of ``MyType`` across the "
"codebase."
msgstr ""

#: ../../peps/peps/pep-0613.rst:92
msgid ""
"With explicit aliases, the type checker has enough information to error on "
"the actual definition of the bad type alias, and explain why: that "
"``MyGeneric(int)`` and ``InvalidType`` are not valid types. When the value "
"expression is no longer evaluated as a global value, unactionable type "
"errors on all usages of ``MyType`` across the codebase can be suppressed."
msgstr ""

#: ../../peps/peps/pep-0613.rst:99
msgid "Scope Restrictions:"
msgstr ""

#: ../../peps/peps/pep-0613.rst:108
msgid ""
"Type aliases are valid within class scope, both implicitly (``x``) and "
"explicitly (``y``). If the line should be interpreted as a class variable, "
"it must be explicitly annotated (``z``)."
msgstr ""

#: ../../peps/peps/pep-0613.rst:118
msgid ""
"The outer ``x`` is a valid type alias, but type checkers must error if the "
"inner ``x`` is ever used as a type because type aliases cannot be defined "
"inside of a function. This is confusing because the alias declaration rule "
"is not explicit, and because a type error will not be thrown on the location "
"of the inner type alias declaration but rather on every one of its "
"subsequent use cases."
msgstr ""

#: ../../peps/peps/pep-0613.rst:133
msgid ""
"With explicit aliases, the outer assignment is still a valid type variable. "
"Inside ``foo``, the inner assignment should be interpreted as ``x: "
"Type[ClassName]``. Inside ``bar``, the type checker should raise a clear "
"error, communicating to the author that type aliases cannot be defined "
"inside a function."
msgstr ""

#: ../../peps/peps/pep-0613.rst:140
msgid "Specification"
msgstr ""

#: ../../peps/peps/pep-0613.rst:142
msgid ""
"The explicit alias declaration syntax clearly differentiates between the "
"three possible kinds of assignments: typed global expressions, untyped "
"global expressions, and type aliases. This avoids the existence of "
"assignments that break type checking when an annotation is added, and avoids "
"classifying the nature of the assignment based on the type of the value."
msgstr ""

#: ../../peps/peps/pep-0613.rst:148
msgid "Implicit syntax (pre-existing):"
msgstr ""

#: ../../peps/peps/pep-0613.rst:159
msgid "Explicit syntax:"
msgstr ""

#: ../../peps/peps/pep-0613.rst:173
msgid ""
"Note: The examples above illustrate implicit and explicit alias declarations "
"in isolation. For the sake of backwards compatibility, type checkers should "
"support both simultaneously, meaning an untyped global expression ``x = "
"int`` will still be considered a valid type alias."
msgstr ""

#: ../../peps/peps/pep-0613.rst:180
msgid "Backwards Compatibility"
msgstr ""

#: ../../peps/peps/pep-0613.rst:182
msgid ""
"Explicit aliases provide an alternative way to declare type aliases, but all "
"pre-existing code and old alias declarations will work as before."
msgstr ""

#: ../../peps/peps/pep-0613.rst:187
msgid "Reference Implementation"
msgstr ""

#: ../../peps/peps/pep-0613.rst:189
msgid ""
"The `Pyre <https://pyre-check.org/>`_ type checker supports explicit type "
"alias declarations."
msgstr ""

#: ../../peps/peps/pep-0613.rst:194
msgid "Rejected Ideas"
msgstr ""

#: ../../peps/peps/pep-0613.rst:196
msgid "Some alternative syntaxes were considered for explicit aliases:"
msgstr ""

#: ../../peps/peps/pep-0613.rst:202
msgid "This looks a lot like an uninitialized variable."
msgstr ""

#: ../../peps/peps/pep-0613.rst:208
msgid ""
"Along with the option above, this format potentially adds confusion around "
"what the runtime value of ``MyType`` is."
msgstr ""

#: ../../peps/peps/pep-0613.rst:212
msgid ""
"In comparison, the chosen syntax option ``MyType: TypeAlias = int`` is "
"appealing because it still sticks with the ``MyType = int`` assignment "
"syntax, and adds some information for the type checker purely as an "
"annotation."
msgstr ""

#: ../../peps/peps/pep-0613.rst:218
msgid "Version History"
msgstr ""

#: ../../peps/peps/pep-0613.rst:220
msgid "2021-11-16"
msgstr ""

#: ../../peps/peps/pep-0613.rst:222
msgid "Allow ``TypeAlias`` inside class scope"
msgstr ""

#: ../../peps/peps/pep-0613.rst:226
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/peps/pep-0613.rst:228
msgid ""
"This document is placed in the public domain or under the CC0-1.0-Universal "
"license, whichever is more permissive."
msgstr ""
