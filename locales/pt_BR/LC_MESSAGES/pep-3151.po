# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-3151.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-3151.rst:5
msgid "Antoine Pitrou <solipsis@pitrou.net>"
msgstr ""

#: ../../peps/pep-3151.rst
msgid "BDFL-Delegate"
msgstr ""

#: ../../peps/pep-3151.rst:6
msgid "Barry Warsaw"
msgstr ""

#: ../../peps/pep-3151.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-3151.rst:7
msgid "Final"
msgstr ""

#: ../../peps/pep-3151.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-3151.rst:8
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-3151.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-3151.rst:10
msgid "21-Jul-2010"
msgstr ""

#: ../../peps/pep-3151.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-3151.rst:11
msgid "3.3"
msgstr ""

#: ../../peps/pep-3151.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-3151.rst
msgid "Resolution"
msgstr ""

#: ../../peps/pep-3151.rst:13
msgid "https://mail.python.org/pipermail/python-dev/2011-October/114033.html"
msgstr ""

#: ../../peps/pep-3151.rst:16
msgid "Abstract"
msgstr ""

#: ../../peps/pep-3151.rst:18
msgid ""
"The standard exception hierarchy is an important part of the Python "
"language.  It has two defining qualities: it is both generic and "
"selective.  Generic in that the same exception type can be raised - and "
"handled - regardless of the context (for example, whether you are trying "
"to add something to an integer, to call a string method, or to write an "
"object on a socket, a TypeError will be raised for bad argument types). "
"Selective in that it allows the user to easily handle (silence, examine, "
"process, store or encapsulate...) specific kinds of error conditions "
"while letting other errors bubble up to higher calling contexts.  For "
"example, you can choose to catch ZeroDivisionErrors without affecting the"
" default handling of other ArithmeticErrors (such as OverflowErrors)."
msgstr ""

#: ../../peps/pep-3151.rst:30
msgid ""
"This PEP proposes changes to a part of the exception hierarchy in order "
"to better embody the qualities mentioned above: the errors related to "
"operating system calls (OSError, IOError, mmap.error, select.error, and "
"all their subclasses)."
msgstr ""

#: ../../peps/pep-3151.rst:37
msgid "Rationale"
msgstr ""

#: ../../peps/pep-3151.rst:40
msgid "Confusing set of OS-related exceptions"
msgstr ""

#: ../../peps/pep-3151.rst:42
msgid ""
"OS-related (or system call-related) exceptions are currently a diversity "
"of classes, arranged in the following sub-hierarchies::"
msgstr ""

#: ../../peps/pep-3151.rst:59
msgid ""
"While some of these distinctions can be explained by implementation "
"considerations, they are often not very logical at a higher level.  The "
"line separating OSError and IOError, for example, is often blurry.  "
"Consider the following::"
msgstr ""

#: ../../peps/pep-3151.rst:73
msgid ""
"The same error condition (a non-existing file) gets cast as two different"
" exceptions depending on which library function was called.  The reason "
"for this is that the ``os`` module exclusively raises OSError (or its "
"subclass WindowsError) while the ``io`` module mostly raises IOError. "
"However, the user is interested in the nature of the error, not in which "
"part of the interpreter it comes from (since the latter is obvious from "
"reading the traceback message or application source code)."
msgstr ""

#: ../../peps/pep-3151.rst:81
msgid ""
"In fact, it is hard to think of any situation where OSError should be "
"caught but not IOError, or the reverse."
msgstr ""

#: ../../peps/pep-3151.rst:84
msgid ""
"A further proof of the ambiguity of this segmentation is that the "
"standard library itself sometimes has problems deciding.  For example, in"
" the ``select`` module, similar failures will raise ``select.error``, "
"``OSError`` or ``IOError`` depending on whether you are using select(), a"
" poll object, a kqueue object, or an epoll object.  This makes user code "
"uselessly complicated since it has to be prepared to catch various "
"exception types, depending on which exact implementation of a single "
"primitive it chooses to use at runtime."
msgstr ""

#: ../../peps/pep-3151.rst:93
msgid ""
"As for WindowsError, it seems to be a pointless distinction.  First, it "
"only exists on Windows systems, which requires tedious compatibility code"
" in cross-platform applications (such code can be found in "
"``Lib/shutil.py``). Second, it inherits from OSError and is raised for "
"similar errors as OSError is raised for on other systems. Third, the user"
" wanting access to low-level exception specifics has to examine the "
"``errno`` or ``winerror`` attribute anyway."
msgstr ""

#: ../../peps/pep-3151.rst:102
msgid ""
"`Appendix B <PEP 3151 Appendix B_>`_ surveys the use of the various "
"exception types across the interpreter and the standard library."
msgstr ""

#: ../../peps/pep-3151.rst:107
msgid "Lack of fine-grained exceptions"
msgstr ""

#: ../../peps/pep-3151.rst:109
msgid ""
"The current variety of OS-related exceptions doesn't allow the user to "
"filter easily for the desired kinds of failures.  As an example, consider"
" the task of deleting a file if it exists.  The Look Before You Leap "
"(LBYL) idiom suffers from an obvious race condition::"
msgstr ""

#: ../../peps/pep-3151.rst:117
msgid ""
"If a file named as ``filename`` is created by another thread or process "
"between the calls to ``os.path.exists`` and ``os.remove``, it won't be "
"deleted.  This can produce bugs in the application, or even security "
"issues."
msgstr ""

#: ../../peps/pep-3151.rst:121
msgid ""
"Therefore, the solution is to try to remove the file, and ignore the "
"error if the file doesn't exist (an idiom known as Easier to Ask "
"Forgiveness than to get Permission, or EAFP).  Careful code will read "
"like the following (which works under both POSIX and Windows systems)::"
msgstr ""

#: ../../peps/pep-3151.rst:132
msgid "or even::"
msgstr ""

#: ../../peps/pep-3151.rst:140
msgid ""
"This is a lot more to type, and also forces the user to remember the "
"various cryptic mnemonics from the ``errno`` module.  It imposes an "
"additional cognitive burden and gets tiresome rather quickly.  "
"Consequently, many programmers will instead write the following code, "
"which silences exceptions too broadly::"
msgstr ""

#: ../../peps/pep-3151.rst:151
msgid ""
"``os.remove`` can raise an OSError not only when the file doesn't exist, "
"but in other possible situations (for example, the filename points to a "
"directory, or the current process doesn't have permission to remove the "
"file), which all indicate bugs in the application logic and therefore "
"shouldn't be silenced.  What the programmer would like to write instead "
"is something such as::"
msgstr ""

#: ../../peps/pep-3151.rst:165
msgid "Compatibility strategy"
msgstr ""

#: ../../peps/pep-3151.rst:167
msgid ""
"Reworking the exception hierarchy will obviously change the exact "
"semantics of at least some existing code.  While it is not possible to "
"improve on the current situation without changing exact semantics, it is "
"possible to define a narrower type of compatibility, which we will call "
"*useful compatibility*."
msgstr ""

#: ../../peps/pep-3151.rst:172
msgid ""
"For this we first must explain what we will call *careful* and *careless*"
" exception handling.  *Careless* (or \"naïve\") code is defined as code "
"which blindly catches any of ``OSError``, ``IOError``, ``socket.error``, "
"``mmap.error``, ``WindowsError``, ``select.error`` without checking the "
"``errno`` attribute.  This is because such exception types are much too "
"broad to signify anything.  Any of them can be raised for error "
"conditions as diverse as: a bad file descriptor (which will usually "
"indicate a programming error), an unconnected socket (ditto), a socket "
"timeout, a file type mismatch, an invalid argument, a transmission "
"failure, insufficient permissions, a non-existent directory, a full "
"filesystem, etc."
msgstr ""

#: ../../peps/pep-3151.rst:183
msgid ""
"(moreover, the use of certain of these exceptions is irregular; `Appendix"
" B <PEP 3151 Appendix B_>`_ exposes the case of the `select`_ module, "
"which raises different exceptions depending on the implementation)"
msgstr ""

#: ../../peps/pep-3151.rst:187
msgid ""
"*Careful* code is defined as code which, when catching any of the above "
"exceptions, examines the ``errno`` attribute to determine the actual "
"error condition and takes action depending on it."
msgstr ""

#: ../../peps/pep-3151.rst:191
msgid "Then we can define *useful compatibility* as follows:"
msgstr ""

#: ../../peps/pep-3151.rst:193
msgid ""
"useful compatibility doesn't make exception catching any narrower, but it"
" can be broader for *careless* exception-catching code.  Given the "
"following kind of snippet, all exceptions caught before this PEP will "
"also be caught after this PEP, but the reverse may be false (because the "
"coalescing of ``OSError``, ``IOError`` and others means the ``except`` "
"clause throws a slightly broader net)::"
msgstr ""

#: ../../peps/pep-3151.rst:207
msgid ""
"useful compatibility doesn't alter the behaviour of *careful* exception-"
"catching code.  Given the following kind of snippet, the same errors "
"should be silenced or re-raised, regardless of whether this PEP has been "
"implemented or not::"
msgstr ""

#: ../../peps/pep-3151.rst:218
msgid ""
"The rationale for this compromise is that careless code can't really be "
"helped, but at least code which \"works\" won't suddenly raise errors and"
" crash.  This is important since such code is likely to be present in "
"scripts used as cron tasks or automated system administration programs."
msgstr ""

#: ../../peps/pep-3151.rst:223
msgid ""
"Careful code, on the other hand, should not be penalized.  Actually, one "
"purpose of this PEP is to ease writing careful code."
msgstr ""

#: ../../peps/pep-3151.rst:230
msgid "Step 1: coalesce exception types"
msgstr ""

#: ../../peps/pep-3151.rst:232
msgid ""
"The first step of the resolution is to coalesce existing exception types."
" The following changes are proposed:"
msgstr ""

#: ../../peps/pep-3151.rst:235
msgid "alias both socket.error and select.error to OSError"
msgstr ""

#: ../../peps/pep-3151.rst:236
msgid "alias mmap.error to OSError"
msgstr ""

#: ../../peps/pep-3151.rst:237
msgid "alias both WindowsError and VMSError to OSError"
msgstr ""

#: ../../peps/pep-3151.rst:238
msgid "alias IOError to OSError"
msgstr ""

#: ../../peps/pep-3151.rst:239
msgid "coalesce EnvironmentError into OSError"
msgstr ""

#: ../../peps/pep-3151.rst:241
msgid ""
"Each of these changes doesn't preserve exact compatibility, but it does "
"preserve *useful compatibility* (see \"compatibility\" section above)."
msgstr ""

#: ../../peps/pep-3151.rst:244
msgid ""
"Each of these changes can be accepted or refused individually, but of "
"course it is considered that the greatest impact can be achieved if this "
"first step is accepted in full.  In this case, the IO exception sub-"
"hierarchy would become::"
msgstr ""

#: ../../peps/pep-3151.rst:257
msgid "Justification"
msgstr ""

#: ../../peps/pep-3151.rst:259
msgid ""
"Not only does this first step present the user a simpler landscape as "
"explained in the rationale_ section, but it also allows for a better and "
"more complete resolution of `Step 2`_ (see Prerequisite_)."
msgstr ""

#: ../../peps/pep-3151.rst:263
msgid ""
"The rationale for keeping ``OSError`` as the official name for generic "
"OS-related exceptions is that it, precisely, is more generic than "
"``IOError``. ``EnvironmentError`` is more tedious to type and also much "
"lesser-known."
msgstr ""

#: ../../peps/pep-3151.rst:267
msgid ""
"The survey in `Appendix B <PEP 3151 Appendix B_>`_ shows that IOError is "
"the dominant error today in the standard library.  As for third-party "
"Python code, Google Code Search shows IOError being ten times more "
"popular than EnvironmentError in user code, and three times more popular "
"than OSError [3]_.  However, with no intention to deprecate IOError in "
"the middle term, the lesser popularity of OSError is not a problem."
msgstr ""

#: ../../peps/pep-3151.rst:275 ../../peps/pep-3151.rst:444
msgid "Exception attributes"
msgstr ""

#: ../../peps/pep-3151.rst:277
msgid ""
"Since WindowsError is coalesced into OSError, the latter gains a "
"``winerror`` attribute under Windows.  It is set to None under situations"
" where it is not meaningful, as is already the case with the ``errno``, "
"``filename`` and ``strerror`` attributes (for example when OSError is "
"raised directly by Python code)."
msgstr ""

#: ../../peps/pep-3151.rst:284
msgid "Deprecation of names"
msgstr ""

#: ../../peps/pep-3151.rst:286
msgid ""
"The following paragraphs outline a possible deprecation strategy for old "
"exception names.  However, it has been decided to keep them as aliases "
"for the time being.  This decision could be revised in time for Python "
"4.0."
msgstr ""

#: ../../peps/pep-3151.rst:291
msgid "built-in exceptions"
msgstr ""

#: ../../peps/pep-3151.rst:293
msgid ""
"Deprecating the old built-in exceptions cannot be done in a "
"straightforward fashion by intercepting all lookups in the builtins "
"namespace, since these are performance-critical.  We also cannot work at "
"the object level, since the deprecated names will be aliased to non-"
"deprecated objects."
msgstr ""

#: ../../peps/pep-3151.rst:298
msgid ""
"A solution is to recognize these names at compilation time, and then emit"
" a separate ``LOAD_OLD_GLOBAL`` opcode instead of the regular "
"``LOAD_GLOBAL``.  This specialized opcode will handle the output of a "
"DeprecationWarning (or PendingDeprecationWarning, depending on the policy"
" decided upon) when the name doesn't exist in the globals namespace, but "
"only in the builtins one.  This will be enough to avoid false positives "
"(for example if someone defines their own ``OSError`` in a module), and "
"false negatives will be rare (for example when someone accesses "
"``OSError`` through the ``builtins`` module rather than directly)."
msgstr ""

#: ../../peps/pep-3151.rst:309
msgid "module-level exceptions"
msgstr ""

#: ../../peps/pep-3151.rst:311
msgid ""
"The above approach cannot be used easily, since it would require special-"
"casing some modules when compiling code objects.  However, these names "
"are by construction much less visible (they don't appear in the builtins "
"namespace), and lesser-known too, so we might decide to let them live in "
"their own namespaces."
msgstr ""

#: ../../peps/pep-3151.rst:321
msgid "Step 2: define additional subclasses"
msgstr ""

#: ../../peps/pep-3151.rst:323
msgid ""
"The second step of the resolution is to extend the hierarchy by defining "
"subclasses which will be raised, rather than their parent, for specific "
"errno values.  Which errno values is subject to discussion, but a survey "
"of existing exception matching practices (see `Appendix A <PEP 3151 "
"Appendix A_>`_) helps us propose a reasonable subset of all values. "
"Trying to map all errno mnemonics, indeed, seems foolish, pointless, and "
"would pollute the root namespace."
msgstr ""

#: ../../peps/pep-3151.rst:331
msgid ""
"Furthermore, in a couple of cases, different errno values could raise the"
" same exception subclass.  For example, EAGAIN, EALREADY, EWOULDBLOCK and"
" EINPROGRESS are all used to signal that an operation on a non-blocking "
"socket would block (and therefore needs trying again later).  They could "
"therefore all raise an identical subclass and let the user examine the "
"``errno`` attribute if (s)he so desires (see below \"exception "
"attributes\")."
msgstr ""

#: ../../peps/pep-3151.rst:340
msgid "Prerequisite"
msgstr ""

#: ../../peps/pep-3151.rst:342
msgid "`Step 1`_ is a loose prerequisite for this."
msgstr ""

#: ../../peps/pep-3151.rst:344
msgid ""
"Prerequisite, because some errnos can currently be attached to different "
"exception classes: for example, ENOENT can be attached to both OSError "
"and IOError, depending on the context.  If we don't want to break *useful"
" compatibility*, we can't make an ``except OSError`` (or IOError) fail to"
" match an exception where it would succeed today."
msgstr ""

#: ../../peps/pep-3151.rst:350
msgid ""
"Loose, because we could decide for a partial resolution of step 2 if "
"existing exception classes are not coalesced: for example, ENOENT could "
"raise a hypothetical FileNotFoundError where an IOError was previously "
"raised, but continue to raise OSError otherwise."
msgstr ""

#: ../../peps/pep-3151.rst:355
msgid ""
"The dependency on step 1 could be totally removed if the new subclasses "
"used multiple inheritance to match with all of the existing superclasses "
"(or, at least, OSError and IOError, which are arguable the most prevalent"
" ones).  It would, however, make the hierarchy more complicated and "
"therefore harder to grasp for the user."
msgstr ""

#: ../../peps/pep-3151.rst:362
msgid "New exception classes"
msgstr ""

#: ../../peps/pep-3151.rst:364
msgid ""
"The following tentative list of subclasses, along with a description and "
"the list of errnos mapped to them, is submitted to discussion:"
msgstr ""

#: ../../peps/pep-3151.rst:367
msgid ""
"``FileExistsError``: trying to create a file or directory which already "
"exists (EEXIST)"
msgstr ""

#: ../../peps/pep-3151.rst:370
msgid ""
"``FileNotFoundError``: for all circumstances where a file and directory "
"is requested but doesn't exist (ENOENT)"
msgstr ""

#: ../../peps/pep-3151.rst:373
msgid ""
"``IsADirectoryError``: file-level operation (open(), os.remove()...) "
"requested on a directory (EISDIR)"
msgstr ""

#: ../../peps/pep-3151.rst:376
msgid ""
"``NotADirectoryError``: directory-level operation requested on something "
"else (ENOTDIR)"
msgstr ""

#: ../../peps/pep-3151.rst:379
msgid ""
"``PermissionError``: trying to run an operation without the adequate "
"access rights - for example filesystem permissions (EACCES, EPERM)"
msgstr ""

#: ../../peps/pep-3151.rst:382
msgid ""
"``BlockingIOError``: an operation would block on an object (e.g. socket) "
"set for non-blocking operation (EAGAIN, EALREADY, EWOULDBLOCK, "
"EINPROGRESS); this is the existing ``io.BlockingIOError`` with an "
"extended role"
msgstr ""

#: ../../peps/pep-3151.rst:386
msgid ""
"``BrokenPipeError``: trying to write on a pipe while the other end has "
"been closed, or trying to write on a socket which has been shutdown for "
"writing (EPIPE, ESHUTDOWN)"
msgstr ""

#: ../../peps/pep-3151.rst:390
msgid ""
"``InterruptedError``: a system call was interrupted by an incoming signal"
" (EINTR)"
msgstr ""

#: ../../peps/pep-3151.rst:393
msgid ""
"``ConnectionAbortedError``: connection attempt aborted by peer "
"(ECONNABORTED)"
msgstr ""

#: ../../peps/pep-3151.rst:395
msgid "``ConnectionRefusedError``: connection reset by peer (ECONNREFUSED)"
msgstr ""

#: ../../peps/pep-3151.rst:397
msgid "``ConnectionResetError``: connection reset by peer (ECONNRESET)"
msgstr ""

#: ../../peps/pep-3151.rst:399
msgid ""
"``TimeoutError``: connection timed out (ETIMEDOUT); this can be re-cast "
"as a generic timeout exception, replacing ``socket.timeout`` and also "
"useful for other types of timeout (for example in Lock.acquire())"
msgstr ""

#: ../../peps/pep-3151.rst:403
msgid ""
"``ChildProcessError``: operation on a child process failed (ECHILD); this"
" is raised mainly by the wait() family of functions."
msgstr ""

#: ../../peps/pep-3151.rst:406
msgid ""
"``ProcessLookupError``: the given process (as identified by, e.g., its "
"process id) doesn't exist (ESRCH)."
msgstr ""

#: ../../peps/pep-3151.rst:409
msgid "In addition, the following exception class is proposed for inclusion:"
msgstr ""

#: ../../peps/pep-3151.rst:411
msgid ""
"``ConnectionError``: a base class for ``ConnectionAbortedError``, "
"``ConnectionRefusedError`` and ``ConnectionResetError``"
msgstr ""

#: ../../peps/pep-3151.rst:414
msgid ""
"The following drawing tries to sum up the proposed additions, along with "
"the corresponding errno values (where applicable).  The root of the sub-"
"hierarchy (OSError, assuming `Step 1`_ is accepted in full) is not "
"shown::"
msgstr ""

#: ../../peps/pep-3151.rst:436
msgid "Naming"
msgstr ""

#: ../../peps/pep-3151.rst:438
msgid ""
"Various naming controversies can arise.  One of them is whether all "
"exception class names should end in \"``Error``\".  In favour is "
"consistency with the rest of the exception hierarchy, against is "
"concision (especially with long names such as "
"``ConnectionAbortedError``)."
msgstr ""

#: ../../peps/pep-3151.rst:446
msgid ""
"In order to preserve *useful compatibility*, these subclasses should "
"still set adequate values for the various exception attributes defined on"
" the superclass (for example ``errno``, ``filename``, and optionally "
"``winerror``)."
msgstr ""

#: ../../peps/pep-3151.rst:452 ../../peps/pep-3151.rst:509
msgid "Implementation"
msgstr ""

#: ../../peps/pep-3151.rst:454
msgid ""
"Since it is proposed that the subclasses are raised based purely on the "
"value of ``errno``, little or no changes should be required in extension "
"modules (either standard or third-party)."
msgstr ""

#: ../../peps/pep-3151.rst:458
msgid ""
"The first possibility is to adapt the ``PyErr_SetFromErrno()`` family of "
"functions (``PyErr_SetFromWindowsErr()`` under Windows) to raise the "
"appropriate OSError subclass.  This wouldn't cover, however, Python code "
"raising OSError directly, using the following idiom (seen in "
"``Lib/tempfile.py``)::"
msgstr ""

#: ../../peps/pep-3151.rst:466
msgid ""
"A second possibility, suggested by Marc-Andre Lemburg, is to adapt "
"``OSError.__new__`` to instantiate the appropriate subclass.  This has "
"the benefit of also covering Python code such as the above."
msgstr ""

#: ../../peps/pep-3151.rst:472
msgid "Possible objections"
msgstr ""

#: ../../peps/pep-3151.rst:475
msgid "Namespace pollution"
msgstr ""

#: ../../peps/pep-3151.rst:477
msgid ""
"Making the exception hierarchy finer-grained makes the root (or builtins)"
" namespace larger.  This is to be moderated, however, as:"
msgstr ""

#: ../../peps/pep-3151.rst:480
msgid "only a handful of additional classes are proposed;"
msgstr ""

#: ../../peps/pep-3151.rst:482
msgid ""
"while standard exception types live in the root namespace, they are "
"visually distinguished by the fact that they use the CamelCase "
"convention, while almost all other builtins use lowercase naming (except "
"True, False, None, Ellipsis and NotImplemented)"
msgstr ""

#: ../../peps/pep-3151.rst:487
msgid ""
"An alternative would be to provide a separate module containing the "
"finer-grained exceptions, but that would defeat the purpose of "
"encouraging careful code over careless code, since the user would first "
"have to import the new module instead of using names already accessible."
msgstr ""

#: ../../peps/pep-3151.rst:494
msgid "Earlier discussion"
msgstr ""

#: ../../peps/pep-3151.rst:496
msgid ""
"While this is the first time such as formal proposal is made, the idea "
"has received informal support in the past [1]_; both the introduction of "
"finer-grained exception classes and the coalescing of OSError and "
"IOError."
msgstr ""

#: ../../peps/pep-3151.rst:501
msgid ""
"The removal of WindowsError alone has been discussed and rejected as part"
" of :pep:`another PEP <348#removing-windowserror>`, but there seemed to "
"be a consensus that the distinction with OSError wasn't meaningful.  This"
" supports at least its aliasing with OSError."
msgstr ""

#: ../../peps/pep-3151.rst:511
msgid ""
"The reference implementation has been integrated into Python 3.3. It was "
"formerly developed in http://hg.python.org/features/pep-3151/ in branch "
"``pep-3151``, and also tracked on the bug tracker at "
"http://bugs.python.org/issue12555. It has been successfully tested on a "
"variety of systems: Linux, Windows, OpenIndiana and FreeBSD buildbots."
msgstr ""

#: ../../peps/pep-3151.rst:518
msgid ""
"One source of trouble has been with the respective constructors of "
"``OSError`` and ``WindowsError``, which were incompatible.  The way it is"
" solved is by keeping the ``OSError`` signature and adding a fourth "
"optional argument to allow passing the Windows error code (which is "
"different from the POSIX errno).  The fourth argument is stored as "
"``winerror`` and its POSIX translation as ``errno``.  The "
"``PyErr_SetFromWindowsErr*`` functions have been adapted to use the right"
" constructor call."
msgstr ""

#: ../../peps/pep-3151.rst:526
msgid ""
"A slight complication is when the ``PyErr_SetExcFromWindowsErr*`` "
"functions are called with ``OSError`` rather than ``WindowsError``: the "
"``errno`` attribute of the exception object would store the Windows error"
" code (such as 109 for ERROR_BROKEN_PIPE) rather than its POSIX "
"translation (such as 32 for EPIPE), which it does now.  For non-socket "
"error codes, this only occurs in the private ``_multiprocessing`` module "
"for which there is no compatibility concern."
msgstr ""

#: ../../peps/pep-3151.rst:535
msgid ""
"For socket errors, the \"POSIX errno\" as reflected by the ``errno`` "
"module is numerically equal to the `Windows Socket error code "
"<http://msdn.microsoft.com/en-us/library/ms740668%28v=vs.85%29.aspx>`_ "
"returned by the ``WSAGetLastError`` system call::"
msgstr ""

#: ../../peps/pep-3151.rst:547
msgid "Possible alternative"
msgstr ""

#: ../../peps/pep-3151.rst:550
msgid "Pattern matching"
msgstr ""

#: ../../peps/pep-3151.rst:552
msgid ""
"Another possibility would be to introduce an advanced pattern matching "
"syntax when catching exceptions.  For example::"
msgstr ""

#: ../../peps/pep-3151.rst:560
msgid "Several problems with this proposal:"
msgstr ""

#: ../../peps/pep-3151.rst:562
msgid ""
"it introduces new syntax, which is perceived by the author to be a "
"heavier change compared to reworking the exception hierarchy"
msgstr ""

#: ../../peps/pep-3151.rst:564
msgid "it doesn't decrease typing effort significantly"
msgstr ""

#: ../../peps/pep-3151.rst:565
msgid ""
"it doesn't relieve the programmer from the burden of having to remember "
"errno mnemonics"
msgstr ""

#: ../../peps/pep-3151.rst:570
msgid "Exceptions ignored by this PEP"
msgstr ""

#: ../../peps/pep-3151.rst:572
msgid ""
"This PEP ignores ``EOFError``, which signals a truncated input stream in "
"various protocol and file format implementations (for example "
"``GzipFile``). ``EOFError`` is not OS- or IO-related, it is a logical "
"error raised at a higher level."
msgstr ""

#: ../../peps/pep-3151.rst:577
msgid ""
"This PEP also ignores ``SSLError``, which is raised by the ``ssl`` module"
" in order to propagate errors signalled by the ``OpenSSL`` library.  "
"Ideally, ``SSLError`` would benefit from a similar but separate treatment"
" since it defines its own constants for error types "
"(``ssl.SSL_ERROR_WANT_READ``, etc.).  In Python 3.2, ``SSLError`` is "
"already replaced with ``socket.timeout`` when it signals a socket timeout"
" (see `issue 10272 <http://bugs.python.org/issue10272>`_)."
msgstr ""

#: ../../peps/pep-3151.rst:584
msgid ""
"Endly, the fate of ``socket.gaierror`` and ``socket.herror`` is not "
"settled. While they would deserve less cryptic names, this can be handled"
" separately from the exception hierarchy reorganization effort."
msgstr ""

#: ../../peps/pep-3151.rst:592
msgid "Appendix A: Survey of common errnos"
msgstr ""

#: ../../peps/pep-3151.rst:594
msgid ""
"This is a quick inventory of the various errno mnemonics checked for in "
"the standard library and its tests, as part of ``except`` clauses."
msgstr ""

#: ../../peps/pep-3151.rst:598
msgid "Common errnos with OSError"
msgstr ""

#: ../../peps/pep-3151.rst:600
msgid ""
"``EBADF``: bad file descriptor (usually means the file descriptor was "
"closed)"
msgstr ""

#: ../../peps/pep-3151.rst:603
msgid "``EEXIST``: file or directory exists"
msgstr ""

#: ../../peps/pep-3151.rst:605 ../../peps/pep-3151.rst:650
#: ../../peps/pep-3151.rst:669
msgid "``EINTR``: interrupted function call"
msgstr ""

#: ../../peps/pep-3151.rst:607
msgid "``EISDIR``: is a directory"
msgstr ""

#: ../../peps/pep-3151.rst:609
msgid "``ENOTDIR``: not a directory"
msgstr ""

#: ../../peps/pep-3151.rst:611
msgid "``ENOENT``: no such file or directory"
msgstr ""

#: ../../peps/pep-3151.rst:613
msgid ""
"``EOPNOTSUPP``: operation not supported on socket (possible confusion "
"with the existing io.UnsupportedOperation)"
msgstr ""

#: ../../peps/pep-3151.rst:616
msgid "``EPERM``: operation not permitted (when using e.g. os.setuid())"
msgstr ""

#: ../../peps/pep-3151.rst:619
msgid "Common errnos with IOError"
msgstr ""

#: ../../peps/pep-3151.rst:621
msgid "``EACCES``: permission denied (for filesystem operations)"
msgstr ""

#: ../../peps/pep-3151.rst:623
msgid ""
"``EBADF``: bad file descriptor (with select.epoll); read operation on a "
"write-only GzipFile, or vice-versa"
msgstr ""

#: ../../peps/pep-3151.rst:626
msgid "``EBUSY``: device or resource busy"
msgstr ""

#: ../../peps/pep-3151.rst:628
msgid "``EISDIR``: is a directory (when trying to open())"
msgstr ""

#: ../../peps/pep-3151.rst:630
msgid "``ENODEV``: no such device"
msgstr ""

#: ../../peps/pep-3151.rst:632
msgid "``ENOENT``: no such file or directory (when trying to open())"
msgstr ""

#: ../../peps/pep-3151.rst:634
msgid "``ETIMEDOUT``: connection timed out"
msgstr ""

#: ../../peps/pep-3151.rst:637
msgid "Common errnos with socket.error"
msgstr ""

#: ../../peps/pep-3151.rst:639
msgid ""
"All these errors may also be associated with a plain IOError, for example"
" when calling read() on a socket's file descriptor."
msgstr ""

#: ../../peps/pep-3151.rst:642
msgid ""
"``EAGAIN``: resource temporarily unavailable (during a non-blocking "
"socket call except connect())"
msgstr ""

#: ../../peps/pep-3151.rst:645
msgid ""
"``EALREADY``: connection already in progress (during a non-blocking "
"connect())"
msgstr ""

#: ../../peps/pep-3151.rst:648
msgid "``EINPROGRESS``: operation in progress (during a non-blocking connect())"
msgstr ""

#: ../../peps/pep-3151.rst:652
msgid "``EISCONN``: the socket is connected"
msgstr ""

#: ../../peps/pep-3151.rst:654
msgid "``ECONNABORTED``: connection aborted by peer (during an accept() call)"
msgstr ""

#: ../../peps/pep-3151.rst:656
msgid "``ECONNREFUSED``: connection refused by peer"
msgstr ""

#: ../../peps/pep-3151.rst:658
msgid "``ECONNRESET``: connection reset by peer"
msgstr ""

#: ../../peps/pep-3151.rst:660
msgid "``ENOTCONN``: socket not connected"
msgstr ""

#: ../../peps/pep-3151.rst:662
msgid "``ESHUTDOWN``: cannot send after transport endpoint shutdown"
msgstr ""

#: ../../peps/pep-3151.rst:664
msgid "``EWOULDBLOCK``: same reasons as ``EAGAIN``"
msgstr ""

#: ../../peps/pep-3151.rst:667
msgid "Common errnos with select.error"
msgstr ""

#: ../../peps/pep-3151.rst:675
msgid "Appendix B: Survey of raised OS and IO errors"
msgstr ""

#: ../../peps/pep-3151.rst:678
msgid "About VMSError"
msgstr ""

#: ../../peps/pep-3151.rst:680
msgid ""
"VMSError is completely unused by the interpreter core and the standard "
"library.  It was added as part of the OpenVMS patches submitted in 2002 "
"by Jean-François Piéronne [4]_; the motivation for including VMSError was"
" that it could be raised by third-party packages."
msgstr ""

#: ../../peps/pep-3151.rst:686
msgid "Interpreter core"
msgstr ""

#: ../../peps/pep-3151.rst:688
msgid "Handling of PYTHONSTARTUP raises IOError (but the error gets discarded)::"
msgstr ""

#: ../../peps/pep-3151.rst:697
msgid ""
"``PyObject_Print()`` raises IOError when ferror() signals an error on the"
" ``FILE *`` parameter (which, in the source tree, is always either stdout"
" or stderr)."
msgstr ""

#: ../../peps/pep-3151.rst:701
msgid ""
"Unicode encoding and decoding using the ``mbcs`` encoding can raise "
"WindowsError for some error conditions."
msgstr ""

#: ../../peps/pep-3151.rst:705
msgid "Standard library"
msgstr ""

#: ../../peps/pep-3151.rst:708
msgid "bz2"
msgstr ""

#: ../../peps/pep-3151.rst:710 ../../peps/pep-3151.rst:858
msgid "Raises IOError throughout (OSError is unused)::"
msgstr ""

#: ../../peps/pep-3151.rst:726
msgid "curses"
msgstr ""

#: ../../peps/pep-3151.rst:728 ../../peps/pep-3151.rst:847
msgid "Not examined."
msgstr ""

#: ../../peps/pep-3151.rst:731
msgid "dbm.gnu, dbm.ndbm"
msgstr ""

#: ../../peps/pep-3151.rst:733
msgid "_dbm.error and _gdbm.error inherit from IOError::"
msgstr ""

#: ../../peps/pep-3151.rst:741
msgid "fcntl"
msgstr ""

#: ../../peps/pep-3151.rst:743
msgid "Raises IOError throughout (OSError is unused)."
msgstr ""

#: ../../peps/pep-3151.rst:746
msgid "imp module"
msgstr ""

#: ../../peps/pep-3151.rst:748
msgid "Raises IOError for bad file descriptors::"
msgstr ""

#: ../../peps/pep-3151.rst:756
msgid "io module"
msgstr ""

#: ../../peps/pep-3151.rst:758
msgid "Raises IOError when trying to open a directory under Unix::"
msgstr ""

#: ../../peps/pep-3151.rst:765
msgid ""
"Raises IOError or io.UnsupportedOperation (which inherits from the "
"former) for unsupported operations::"
msgstr ""

#: ../../peps/pep-3151.rst:781
msgid ""
"Raises either IOError or TypeError when the inferior I/O layer misbehaves"
" (i.e. violates the API it is expected to implement)."
msgstr ""

#: ../../peps/pep-3151.rst:784
msgid "Raises IOError when the underlying OS resource becomes invalid::"
msgstr ""

#: ../../peps/pep-3151.rst:793
msgid "...or for implementation-specific optimizations::"
msgstr ""

#: ../../peps/pep-3151.rst:803
msgid ""
"Raises BlockingIOError (inheriting from IOError) when a call on a non-"
"blocking object would block."
msgstr ""

#: ../../peps/pep-3151.rst:807
msgid "mmap"
msgstr ""

#: ../../peps/pep-3151.rst:809
msgid ""
"Under Unix, raises its own ``mmap.error`` (inheriting from "
"EnvironmentError) throughout::"
msgstr ""

#: ../../peps/pep-3151.rst:821
msgid ""
"Under Windows, however, it mostly raises WindowsError (the source code "
"also shows a few occurrences of ``mmap.error``)::"
msgstr ""

#: ../../peps/pep-3151.rst:845
msgid "multiprocessing"
msgstr ""

#: ../../peps/pep-3151.rst:850
msgid "os / posix"
msgstr ""

#: ../../peps/pep-3151.rst:852
msgid ""
"The ``os`` (or ``posix``) module raises OSError throughout, except under "
"Windows where WindowsError can be raised instead."
msgstr ""

#: ../../peps/pep-3151.rst:856
msgid "ossaudiodev"
msgstr ""

#: ../../peps/pep-3151.rst:866
msgid "readline"
msgstr ""

#: ../../peps/pep-3151.rst:868
msgid "Raises IOError in various file-handling functions::"
msgstr ""

#: ../../peps/pep-3151.rst:884
msgid "select"
msgstr ""

#: ../../peps/pep-3151.rst:886
msgid ""
"select() and poll objects raise ``select.error``, which doesn't inherit "
"from anything (but poll.modify() raises IOError);"
msgstr ""

#: ../../peps/pep-3151.rst:888
msgid "epoll objects raise IOError;"
msgstr ""

#: ../../peps/pep-3151.rst:889
msgid "kqueue objects raise both OSError and IOError."
msgstr ""

#: ../../peps/pep-3151.rst:891
msgid ""
"As a side-note, not deriving from ``EnvironmentError`` means "
"``select.error`` does not get the useful ``errno`` attribute.  User code "
"must check ``args[0]`` instead::"
msgstr ""

#: ../../peps/pep-3151.rst:911
msgid "signal"
msgstr ""

#: ../../peps/pep-3151.rst:913
msgid "``signal.ItimerError`` inherits from IOError."
msgstr ""

#: ../../peps/pep-3151.rst:916
msgid "socket"
msgstr ""

#: ../../peps/pep-3151.rst:918
msgid "``socket.error`` inherits from IOError."
msgstr ""

#: ../../peps/pep-3151.rst:921
msgid "sys"
msgstr ""

#: ../../peps/pep-3151.rst:923
msgid ""
"``sys.getwindowsversion()`` raises WindowsError with a bogus error number"
" if the ``GetVersionEx()`` call fails."
msgstr ""

#: ../../peps/pep-3151.rst:927
msgid "time"
msgstr ""

#: ../../peps/pep-3151.rst:929
msgid "Raises IOError for internal errors in time.time() and time.sleep()."
msgstr ""

#: ../../peps/pep-3151.rst:932
msgid "zipimport"
msgstr ""

#: ../../peps/pep-3151.rst:934
msgid "zipimporter.get_data() can raise IOError."
msgstr ""

#: ../../peps/pep-3151.rst:938
msgid "Acknowledgments"
msgstr ""

#: ../../peps/pep-3151.rst:940
msgid "Significant input has been received from Alyssa Coghlan."
msgstr ""

#: ../../peps/pep-3151.rst:943
msgid "References"
msgstr "Referências"

#: ../../peps/pep-3151.rst:945
msgid ""
"\"IO module precisions and exception hierarchy\": "
"https://mail.python.org/pipermail/python-dev/2009-September/092130.html"
msgstr ""

#: ../../peps/pep-3151.rst:948
#, python-format
msgid ""
"Google Code Search of ``IOError`` in Python code: `around 40000 results "
"<http://www.google.com/codesearch?q=lang%3Apython%20IOError>`_; "
"``OSError``: `around 15200 results "
"<http://www.google.com/codesearch?q=lang%3Apython%20OSError>`_; "
"``EnvironmentError``: `around 3000 results "
"<http://www.google.com/codesearch?q=lang%3Apython%20EnvironmentError>`_"
msgstr ""

#: ../../peps/pep-3151.rst:955
msgid "http://bugs.python.org/issue614055"
msgstr ""

#: ../../peps/pep-3151.rst:958
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-3151.rst:960
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid ""
#~ "`Appendix B`_ surveys the use of "
#~ "the various exception types across the"
#~ " interpreter and the standard library."
#~ msgstr ""

#~ msgid ""
#~ "(moreover, the use of certain of "
#~ "these exceptions is irregular; `Appendix "
#~ "B`_ exposes the case of the "
#~ "`select`_ module, which raises different "
#~ "exceptions depending on the implementation)"
#~ msgstr ""

#~ msgid ""
#~ "The survey in `Appendix B`_ shows "
#~ "that IOError is the dominant error "
#~ "today in the standard library.  As "
#~ "for third-party Python code, Google "
#~ "Code Search shows IOError being ten "
#~ "times more popular than EnvironmentError "
#~ "in user code, and three times more"
#~ " popular than OSError [3]_.  However, "
#~ "with no intention to deprecate IOError"
#~ " in the middle term, the lesser "
#~ "popularity of OSError is not a "
#~ "problem."
#~ msgstr ""

#~ msgid ""
#~ "The second step of the resolution "
#~ "is to extend the hierarchy by "
#~ "defining subclasses which will be "
#~ "raised, rather than their parent, for"
#~ " specific errno values.  Which errno "
#~ "values is subject to discussion, but "
#~ "a survey of existing exception matching"
#~ " practices (see `Appendix A`_) helps "
#~ "us propose a reasonable subset of "
#~ "all values.  Trying to map all "
#~ "errno mnemonics, indeed, seems foolish, "
#~ "pointless, and would pollute the root"
#~ " namespace."
#~ msgstr ""

#~ msgid ""
#~ "``PyObject_Print()`` raises IOError when "
#~ "ferror() signals an error on the "
#~ "`FILE *` parameter (which, in the "
#~ "source tree, is always either stdout "
#~ "or stderr)."
#~ msgstr ""

#~ msgid "Significant input has been received from Nick Coghlan."
#~ msgstr ""

