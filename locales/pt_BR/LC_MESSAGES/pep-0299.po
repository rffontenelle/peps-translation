# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0299.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0299.rst:5
msgid "Jeff Epler <jepler@unpythonic.net>"
msgstr ""

#: ../../peps/pep-0299.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0299.rst:6
msgid "Rejected"
msgstr ""

#: ../../peps/pep-0299.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0299.rst:7
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0299.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0299.rst:9
msgid "12-Aug-2002"
msgstr ""

#: ../../peps/pep-0299.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-0299.rst:10
msgid "2.3"
msgstr ""

#: ../../peps/pep-0299.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0299.rst:11
msgid "29-Mar-2006"
msgstr ""

#: ../../peps/pep-0299.rst:16
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0299.rst:18
msgid ""
"Many Python modules are also intended to be callable as standalone "
"scripts.  This PEP proposes that a special function called ``__main__()``"
" should serve this purpose."
msgstr ""

#: ../../peps/pep-0299.rst:24
msgid "Motivation"
msgstr ""

#: ../../peps/pep-0299.rst:26
msgid ""
"There should be one simple and universal idiom for invoking a module as a"
" standalone script."
msgstr ""

#: ../../peps/pep-0299.rst:29
msgid "The semi-standard idiom::"
msgstr ""

#: ../../peps/pep-0299.rst:34
msgid ""
"is unclear to programmers of languages like C and C++.  It also does not "
"permit invocation of the standalone function when the module is imported."
"  The variant::"
msgstr ""

#: ../../peps/pep-0299.rst:41
msgid ""
"is sometimes seen, but there exists no standard name for the function, "
"and because arguments are taken from sys.argv it is not possible to pass "
"specific arguments without changing the argument list seen by all other "
"modules.  (Imagine a threaded Python program, with two threads wishing to"
" invoke the standalone functionality of different modules with different "
"argument lists)"
msgstr ""

#: ../../peps/pep-0299.rst:50
msgid "Proposal"
msgstr ""

#: ../../peps/pep-0299.rst:52
msgid ""
"The standard name of the 'main function' should be ``__main__``. When a "
"module is invoked on the command line, such as::"
msgstr ""

#: ../../peps/pep-0299.rst:57
msgid ""
"then the module behaves as though the following lines existed at the end "
"of the module (except that the attribute __sys may not be used or assumed"
" to exist elsewhere in the script)::"
msgstr ""

#: ../../peps/pep-0299.rst:65
msgid "Other modules may execute::"
msgstr ""

#: ../../peps/pep-0299.rst:69
msgid ""
"It is up to ``mymodule`` to document thread-safety issues or other issues"
" which might restrict use of ``__main__``.  (Other issues might include "
"use of mutually exclusive GUI modules, non-sharable resources like "
"hardware devices, reassignment of ``sys.stdin``/``stdout``, etc)"
msgstr ""

#: ../../peps/pep-0299.rst:76
msgid "Implementation"
msgstr ""

#: ../../peps/pep-0299.rst:78
msgid ""
"In ``modules/main.c``, the block near line 385 (after the "
"``PyRun_AnyFileExFlags`` call) will be changed so that the above code (or"
" its C equivalent) is executed."
msgstr ""

#: ../../peps/pep-0299.rst:84
msgid "Open Issues"
msgstr ""

#: ../../peps/pep-0299.rst:86
msgid "Should the return value from ``__main__`` be treated as the exit value?"
msgstr ""

#: ../../peps/pep-0299.rst:88
msgid ""
"Yes.  Many ``__main__`` will naturally return ``None``, which "
"``sys.exit`` translates into a \"success\" return code.  In those that "
"return a numeric result, it behaves just like the argument to "
"``sys.exit()`` or the return value from C's main()."
msgstr ""

#: ../../peps/pep-0299.rst:93
msgid ""
"Should the argument list to ``__main__`` include ``argv[0]``, or just the"
" \"real\" arguments ``argv[1:]``?"
msgstr ""

#: ../../peps/pep-0299.rst:96
msgid ""
"``argv[0]`` is included for symmetry with ``sys.argv`` and easy "
"transition to the new standard idiom."
msgstr ""

#: ../../peps/pep-0299.rst:101
msgid "Rejection"
msgstr ""

#: ../../peps/pep-0299.rst:103
msgid ""
"In a short discussion on python-dev [1]_, two major backwards "
"compatibility problems were brought up and Guido pronounced that he "
"doesn't like the idea anyway as it's \"not worth the change (in docs, "
"user habits, etc.) and there's nothing particularly broken.\""
msgstr ""

#: ../../peps/pep-0299.rst:110
msgid "References"
msgstr "Referências"

#: ../../peps/pep-0299.rst:112
msgid ""
"Georg Brandl, \"What about PEP 299\", https://mail.python.org/pipermail"
"/python-dev/2006-March/062951.html"
msgstr ""

#: ../../peps/pep-0299.rst:117
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0299.rst:119
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid ""
#~ "In a short discussion on python-"
#~ "dev [1], two major backwards "
#~ "compatibility problems were brought up "
#~ "and Guido pronounced that he doesn't "
#~ "like the idea anyway as it's \"not"
#~ " worth the change (in docs, user "
#~ "habits, etc.) and there's nothing "
#~ "particularly broken.\""
#~ msgstr ""

