# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0561.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0561.rst:3
msgid "Ethan Smith <ethan@ethanhs.me>"
msgstr ""

#: ../../peps/pep-0561.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0561.rst:4
msgid "Final"
msgstr ""

#: ../../peps/pep-0561.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0561.rst:5
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0561.rst
msgid "Topic"
msgstr ""

#: ../../peps/pep-0561.rst:6
msgid "Packaging, Typing"
msgstr ""

#: ../../peps/pep-0561.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0561.rst:8
msgid "09-Sep-2017"
msgstr ""

#: ../../peps/pep-0561.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-0561.rst:9
msgid "3.7"
msgstr ""

#: ../../peps/pep-0561.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0561.rst:10
msgid "10-Sep-2017, 12-Sep-2017, 06-Oct-2017, 26-Oct-2017, 12-Apr-2018"
msgstr ""

#: ../../peps/pep-0561.rst:14
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0561.rst:16
msgid ""
":pep:`484` introduced type hinting to Python, with goals of making typing"
" gradual and easy to adopt. Currently, typing information must be "
"distributed manually. This PEP provides a standardized means to leverage "
"existing tooling to package and distribute type information with minimal "
"work and an ordering for type checkers to resolve modules and collect "
"this information for type checking."
msgstr ""

#: ../../peps/pep-0561.rst:25
msgid "Rationale"
msgstr ""

#: ../../peps/pep-0561.rst:27
msgid ""
"Currently, package authors wish to distribute code that has inline type "
"information. Additionally, maintainers would like to distribute stub "
"files to keep Python 2 compatibility while using newer annotation syntax."
" However, there is no standard method to distribute packages with type "
"information. Also, if one wished to ship stub files privately the only "
"method available would be via setting ``MYPYPATH`` or the equivalent to "
"manually point to stubs. If the package can be released publicly, it can "
"be added to typeshed [1]_. However, this does not scale and becomes a "
"burden on the maintainers of typeshed. In addition, it ties bug fixes in "
"stubs to releases of the tool using typeshed."
msgstr ""

#: ../../peps/pep-0561.rst:38
msgid ""
":pep:`484` has a brief section on distributing typing information. In "
"this :pep:`section <484#storing-and-distributing-stub-files>` the PEP "
"recommends using ``shared/typehints/pythonX.Y/`` for shipping stub files."
" However, manually adding a path to stub files for each third party "
"library does not scale. The simplest approach people have taken is to add"
" ``site-packages`` to their ``MYPYPATH``, but this causes type checkers "
"to fail on packages that are highly dynamic (e.g. sqlalchemy and Django)."
msgstr ""

#: ../../peps/pep-0561.rst:49
msgid "Definition of Terms"
msgstr ""

#: ../../peps/pep-0561.rst:51
msgid ""
"The definition of \"MAY\", \"MUST\", and \"SHOULD\", and \"SHOULD NOT\" "
"are to be interpreted as described in :rfc:`2119`."
msgstr ""

#: ../../peps/pep-0561.rst:54
msgid ""
"\"inline\" - the types are part of the runtime code using :pep:`526` and "
":pep:`3107` syntax (the filename ends in ``.py``)."
msgstr ""

#: ../../peps/pep-0561.rst:57
msgid ""
"\"stubs\" - files containing only type information, empty of runtime code"
" (the filename ends in ``.pyi``)."
msgstr ""

#: ../../peps/pep-0561.rst:60
msgid ""
"\"Distributions\" are the packaged files which are used to publish and "
"distribute a release. (:pep:`426`)"
msgstr ""

#: ../../peps/pep-0561.rst:63
msgid ""
"\"Module\" a file containing Python runtime code or stubbed type "
"information."
msgstr ""

#: ../../peps/pep-0561.rst:65
msgid ""
"\"Package\" a directory or directories that namespace Python modules. "
"(Note the distinction between packages and distributions.  While most "
"distributions are named after the one package they install, some "
"distributions install multiple packages.)"
msgstr ""

#: ../../peps/pep-0561.rst:72
msgid "Specification"
msgstr ""

#: ../../peps/pep-0561.rst:74
msgid ""
"There are several motivations and methods of supporting typing in a "
"package. This PEP recognizes three types of packages that users of typing"
" wish to create:"
msgstr ""

#: ../../peps/pep-0561.rst:78
msgid "The package maintainer would like to add type information inline."
msgstr ""

#: ../../peps/pep-0561.rst:80
msgid "The package maintainer would like to add type information via stubs."
msgstr ""

#: ../../peps/pep-0561.rst:82
msgid ""
"A third party or package maintainer would like to share stub files for a "
"package, but the maintainer does not want to include them in the source "
"of the package."
msgstr ""

#: ../../peps/pep-0561.rst:86
msgid ""
"This PEP aims to support all three scenarios and make them simple to add "
"to packaging and deployment."
msgstr ""

#: ../../peps/pep-0561.rst:89
msgid ""
"The two major parts of this specification are the packaging "
"specifications and the resolution order for resolving module type "
"information. The type checking spec is meant to replace the "
"``shared/typehints/pythonX.Y/`` :pep:`spec of PEP 484 <484#storing-and-"
"distributing-stub-files>`."
msgstr ""

#: ../../peps/pep-0561.rst:94
msgid ""
"New third party stub libraries SHOULD distribute stubs via the third "
"party packaging methods proposed in this PEP in place of being added to "
"typeshed. Typeshed will remain in use, but if maintainers are found, "
"third party stubs in typeshed MAY be split into their own package."
msgstr ""

#: ../../peps/pep-0561.rst:101
msgid "Packaging Type Information"
msgstr ""

#: ../../peps/pep-0561.rst:103
msgid ""
"In order to make packaging and distributing type information as simple "
"and easy as possible, packaging and distribution is done through existing"
" frameworks."
msgstr ""

#: ../../peps/pep-0561.rst:107
msgid ""
"Package maintainers who wish to support type checking of their code MUST "
"add a marker file named ``py.typed`` to their package supporting typing. "
"This marker applies recursively: if a top-level package includes it, all "
"its sub-packages MUST support type checking as well. To have this file "
"installed with the package, maintainers can use existing packaging "
"options such as ``package_data`` in distutils, shown below."
msgstr ""

#: ../../peps/pep-0561.rst:114
msgid "Distutils option example::"
msgstr ""

#: ../../peps/pep-0561.rst:124
msgid ""
"For namespace packages (see :pep:`420`), the ``py.typed`` file should be "
"in the submodules of the namespace, to avoid conflicts and for clarity."
msgstr ""

#: ../../peps/pep-0561.rst:127
msgid ""
"This PEP does not support distributing typing information as part of "
"module-only distributions or single-file modules within namespace "
"packages."
msgstr ""

#: ../../peps/pep-0561.rst:130
msgid ""
"The single-file module should be refactored into a package and indicate "
"that the package supports typing as described above."
msgstr ""

#: ../../peps/pep-0561.rst:135
msgid "Stub-only Packages"
msgstr ""

#: ../../peps/pep-0561.rst:137
msgid ""
"For package maintainers wishing to ship stub files containing all of "
"their type information, it is preferred that the ``*.pyi`` stubs are "
"alongside the corresponding ``*.py`` files. However, the stubs can also "
"be put in a separate package and distributed separately. Third parties "
"can also find this method useful if they wish to distribute stub files. "
"The name of the stub package MUST follow the scheme ``foopkg-stubs`` for "
"type stubs for the package named ``foopkg``. Note that for stub-only "
"packages adding a ``py.typed`` marker is not needed since the name "
"``*-stubs`` is enough to indicate it is a source of typing information."
msgstr ""

#: ../../peps/pep-0561.rst:147
msgid ""
"Third parties seeking to distribute stub files are encouraged to contact "
"the maintainer of the package about distribution alongside the package. "
"If the maintainer does not wish to maintain or package stub files or type"
" information inline, then a third party stub-only package can be created."
msgstr ""

#: ../../peps/pep-0561.rst:152
msgid ""
"In addition, stub-only distributions SHOULD indicate which version(s) of "
"the runtime package are supported by indicating the runtime "
"distribution's version(s) through normal dependency data. For example, "
"the stub package ``flyingcircus-stubs`` can indicate the versions of the "
"runtime ``flyingcircus`` distribution it supports through "
"``install_requires`` in distutils-based tools, or the equivalent in other"
" packaging tools. Note that in pip 9.0, if you update ``flyingcircus-"
"stubs``, it will update ``flyingcircus``. In pip 9.0, you can use the "
"``--upgrade-strategy=only-if-needed`` flag. In pip 10.0 this is the "
"default behavior."
msgstr ""

#: ../../peps/pep-0561.rst:163
msgid ""
"For namespace packages (see :pep:`420`), stub-only packages should use "
"the ``-stubs`` suffix on only the root namespace package. All stub-only "
"namespace packages should omit ``__init__.pyi`` files. ``py.typed`` "
"marker files are not necessary for stub-only packages, but similarly to "
"packages with inline types, if used, they should be in submodules of the "
"namespace to avoid conflicts and for clarity."
msgstr ""

#: ../../peps/pep-0561.rst:170
msgid ""
"For example, if the ``pentagon`` and ``hexagon`` are separate "
"distributions installing within the namespace package ``shapes.polygons``"
" The corresponding types-only distributions should produce packages laid "
"out as follows::"
msgstr ""

#: ../../peps/pep-0561.rst:188
msgid "Type Checker Module Resolution Order"
msgstr ""

#: ../../peps/pep-0561.rst:190
msgid ""
"The following is the order in which type checkers supporting this PEP "
"SHOULD resolve modules containing type information:"
msgstr ""

#: ../../peps/pep-0561.rst:194
msgid ""
"Stubs or Python source manually put in the beginning of the path. Type "
"checkers SHOULD provide this to allow the user complete control of which "
"stubs to use, and to patch broken stubs/inline types from packages. In "
"mypy the ``$MYPYPATH`` environment variable can be used for this."
msgstr ""

#: ../../peps/pep-0561.rst:199
msgid "User code - the files the type checker is running on."
msgstr ""

#: ../../peps/pep-0561.rst:201
msgid ""
"Stub packages - these packages SHOULD supersede any installed inline "
"package. They can be found at ``foopkg-stubs`` for package ``foopkg``."
msgstr ""

#: ../../peps/pep-0561.rst:204
msgid ""
"Packages with a ``py.typed`` marker file - if there is nothing overriding"
" the installed package, *and* it opts into type checking, the types "
"bundled with the package SHOULD be used (be they in ``.pyi`` type stub "
"files or inline in ``.py`` files)."
msgstr ""

#: ../../peps/pep-0561.rst:209
msgid ""
"Typeshed (if used) - Provides the stdlib types and several third party "
"libraries."
msgstr ""

#: ../../peps/pep-0561.rst:212
msgid ""
"If typecheckers identify a stub-only namespace package without the "
"desired module in step 3, they should continue to step 4/5. Typecheckers "
"should identify namespace packages by the absence of ``__init__.pyi``.  "
"This allows different subpackages to independently opt for inline vs "
"stub-only."
msgstr ""

#: ../../peps/pep-0561.rst:217
msgid ""
"Type checkers that check a different Python version than the version they"
" run on MUST find the type information in the ``site-packages``/``dist-"
"packages`` of that Python version. This can be queried e.g. ``pythonX.Y "
"-c 'import site; print(site.getsitepackages())'``. It is also recommended"
" that the type checker allow for the user to point to a particular Python"
" binary, in case it is not in the path."
msgstr ""

#: ../../peps/pep-0561.rst:226
msgid "Partial Stub Packages"
msgstr ""

#: ../../peps/pep-0561.rst:228
msgid ""
"Many stub packages will only have part of the type interface for "
"libraries completed, especially initially. For the benefit of type "
"checking and code editors, packages can be \"partial\". This means "
"modules not found in the stub package SHOULD be searched for in parts "
"four and five of the module resolution order above, namely inline "
"packages and typeshed."
msgstr ""

#: ../../peps/pep-0561.rst:234
msgid ""
"Type checkers should merge the stub package and runtime package or "
"typeshed directories. This can be thought of as the functional equivalent"
" of copying the stub package into the same directory as the corresponding"
" runtime package or typeshed folder and type checking the combined "
"directory structure. Thus type checkers MUST maintain the normal "
"resolution order of checking ``*.pyi`` before ``*.py`` files."
msgstr ""

#: ../../peps/pep-0561.rst:241
msgid ""
"If a stub package distribution is partial it MUST include ``partial\\n`` "
"in a ``py.typed`` file.  For stub-packages distributing within a "
"namespace package (see :pep:`420`), the ``py.typed`` file should be in "
"the submodules of the namespace."
msgstr ""

#: ../../peps/pep-0561.rst:246
msgid ""
"Type checkers should treat namespace packages within stub-packages as "
"incomplete since multiple distributions may populate them. Regular "
"packages within namespace packages in stub-package distributions are "
"considered complete unless a ``py.typed`` with ``partial\\n`` is "
"included."
msgstr ""

#: ../../peps/pep-0561.rst:253
msgid "Implementation"
msgstr ""

#: ../../peps/pep-0561.rst:255
msgid ""
"The proposed scheme of indicating support for typing is completely "
"backwards compatible, and requires no modification to package tooling. A "
"sample package with inline types is available [typed_package]_, as well "
"as a [stub_package]_. A sample package checker [pkg_checker]_ which reads"
" the metadata of installed packages and reports on their status as either"
" not typed, inline typed, or a stub package."
msgstr ""

#: ../../peps/pep-0561.rst:262
msgid ""
"The mypy type checker has an implementation of :pep:`561` searching which"
" can be read about in the mypy docs [4]_."
msgstr ""

#: ../../peps/pep-0561.rst:265
msgid ""
"[numpy-stubs]_ is an example of a real stub-only package for the numpy "
"distribution."
msgstr ""

#: ../../peps/pep-0561.rst:270
msgid "Acknowledgements"
msgstr ""

#: ../../peps/pep-0561.rst:272
msgid ""
"This PEP would not have been possible without the ideas, feedback, and "
"support of Ivan Levkivskyi, Jelle Zijlstra, Alyssa Coghlan, Daniel F "
"Moisset, Andrey Vlasovskikh, Nathaniel Smith, and Guido van Rossum."
msgstr ""

#: ../../peps/pep-0561.rst:278
msgid "Version History"
msgstr ""

#: ../../peps/pep-0561.rst:280
msgid "2023-01-13"
msgstr ""

#: ../../peps/pep-0561.rst:282
msgid ""
"Clarify that the 4th step of the :ref:`Module Resolution Order <mro>` "
"applies to any package with a ``py.typed`` marker file (and not just "
"inline packages)."
msgstr ""

#: ../../peps/pep-0561.rst:286
msgid "2021-09-20"
msgstr ""

#: ../../peps/pep-0561.rst:288
msgid ""
"Clarify expectations and typechecker behavior for stub-only namespace "
"packages"
msgstr ""

#: ../../peps/pep-0561.rst:289
msgid "Clarify handling of single-file modules within namespace packages."
msgstr ""

#: ../../peps/pep-0561.rst:291
msgid "2018-07-09"
msgstr ""

#: ../../peps/pep-0561.rst:293
msgid "Add links to sample stub-only packages"
msgstr ""

#: ../../peps/pep-0561.rst:295
msgid "2018-06-19"
msgstr ""

#: ../../peps/pep-0561.rst:297
msgid "Partial stub packages can look at typeshed as well as runtime packages"
msgstr ""

#: ../../peps/pep-0561.rst:299
msgid "2018-05-15"
msgstr ""

#: ../../peps/pep-0561.rst:301
msgid "Add partial stub package spec."
msgstr ""

#: ../../peps/pep-0561.rst:303
msgid "2018-04-09"
msgstr ""

#: ../../peps/pep-0561.rst:305
msgid "Add reference to mypy implementation"
msgstr ""

#: ../../peps/pep-0561.rst:306
msgid "Clarify stub package priority."
msgstr ""

#: ../../peps/pep-0561.rst:308
msgid "2018-02-02"
msgstr ""

#: ../../peps/pep-0561.rst:310
msgid "Change stub-only package suffix to be -stubs not _stubs."
msgstr ""

#: ../../peps/pep-0561.rst:311
msgid "Note that py.typed is not needed for stub-only packages."
msgstr ""

#: ../../peps/pep-0561.rst:312
msgid "Add note about pip and upgrading stub packages."
msgstr ""

#: ../../peps/pep-0561.rst:314
msgid "2017-11-12"
msgstr ""

#: ../../peps/pep-0561.rst:316
msgid "Rewritten to use existing tooling only"
msgstr ""

#: ../../peps/pep-0561.rst:317
msgid "No need to indicate kind of type information in metadata"
msgstr ""

#: ../../peps/pep-0561.rst:318
msgid "Name of marker file changed from ``.typeinfo`` to ``py.typed``"
msgstr ""

#: ../../peps/pep-0561.rst:320
msgid "2017-11-10"
msgstr ""

#: ../../peps/pep-0561.rst:322
msgid ""
"Specification re-written to use package metadata instead of distribution "
"metadata."
msgstr ""

#: ../../peps/pep-0561.rst:324
msgid "Removed stub-only packages and merged into third party packages spec."
msgstr ""

#: ../../peps/pep-0561.rst:325
msgid "Removed suggestion for typecheckers to consider checking runtime versions"
msgstr ""

#: ../../peps/pep-0561.rst:326
msgid "Implementations updated to reflect PEP changes."
msgstr ""

#: ../../peps/pep-0561.rst:328
msgid "2017-10-26"
msgstr ""

#: ../../peps/pep-0561.rst:330
msgid "Added implementation references."
msgstr ""

#: ../../peps/pep-0561.rst:331
msgid "Added acknowledgements and version history."
msgstr ""

#: ../../peps/pep-0561.rst:333
msgid "2017-10-06"
msgstr ""

#: ../../peps/pep-0561.rst:335
msgid "Rewritten to use .distinfo/METADATA over a distutils specific command."
msgstr ""

#: ../../peps/pep-0561.rst:336
msgid "Clarify versioning of third party stub packages."
msgstr ""

#: ../../peps/pep-0561.rst:338
msgid "2017-09-11"
msgstr ""

#: ../../peps/pep-0561.rst:340
msgid "Added information about current solutions and typeshed."
msgstr ""

#: ../../peps/pep-0561.rst:341
msgid "Clarify rationale."
msgstr ""

#: ../../peps/pep-0561.rst:345
msgid "References"
msgstr "Referências"

#: ../../peps/pep-0561.rst:346
msgid "Typeshed (https://github.com/python/typeshed)"
msgstr ""

#: ../../peps/pep-0561.rst:348
msgid ""
"Example implementation in a type checker "
"(https://mypy.readthedocs.io/en/latest/installed_packages.html)"
msgstr ""

#: ../../peps/pep-0561.rst:351
msgid "A stub-only package (https://github.com/ethanhs/stub-package)"
msgstr ""

#: ../../peps/pep-0561.rst:354
msgid "Sample typed package (https://github.com/ethanhs/sample-typed-package)"
msgstr ""

#: ../../peps/pep-0561.rst:357
msgid "Stubs for numpy (https://github.com/numpy/numpy-stubs)"
msgstr ""

#: ../../peps/pep-0561.rst:360
msgid "Sample package checker (https://github.com/ethanhs/check_typedpkg)"
msgstr ""

#: ../../peps/pep-0561.rst:364
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0561.rst:366
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid ""
#~ "Inline packages - if there is "
#~ "nothing overriding the installed package, "
#~ "*and* it opts into type checking, "
#~ "inline types SHOULD be used."
#~ msgstr ""

#~ msgid ""
#~ "This PEP would not have been "
#~ "possible without the ideas, feedback, "
#~ "and support of Ivan Levkivskyi, Jelle"
#~ " Zijlstra, Nick Coghlan, Daniel F "
#~ "Moisset, Andrey Vlasovskikh, Nathaniel Smith,"
#~ " and Guido van Rossum."
#~ msgstr ""

