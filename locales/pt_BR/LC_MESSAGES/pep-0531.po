# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0531.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0531.rst:5
msgid "Alyssa Coghlan <ncoghlan@gmail.com>"
msgstr ""

#: ../../peps/pep-0531.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0531.rst:6
msgid "Withdrawn"
msgstr ""

#: ../../peps/pep-0531.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0531.rst:7
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0531.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0531.rst:9
msgid "25-Oct-2016"
msgstr ""

#: ../../peps/pep-0531.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-0531.rst:10
msgid "3.7"
msgstr ""

#: ../../peps/pep-0531.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-0531.rst:11
msgid "28-Oct-2016"
msgstr ""

#: ../../peps/pep-0531.rst:14
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0531.rst:16
msgid ""
"Inspired by :pep:`505` and the related discussions, this PEP proposes the"
" addition of two new control flow operators to Python:"
msgstr ""

#: ../../peps/pep-0531.rst:19
msgid "Existence-checking precondition (\"exists-then\"): ``expr1 ?then expr2``"
msgstr ""

#: ../../peps/pep-0531.rst:20
msgid "Existence-checking fallback (\"exists-else\"): ``expr1 ?else expr2``"
msgstr ""

#: ../../peps/pep-0531.rst:22
msgid ""
"as well as the following abbreviations for common existence checking "
"expressions and statements:"
msgstr ""

#: ../../peps/pep-0531.rst:25
msgid ""
"Existence-checking attribute access: ``obj?.attr`` (for ``obj ?then "
"obj.attr``)"
msgstr ""

#: ../../peps/pep-0531.rst:27
msgid ""
"Existence-checking subscripting: ``obj?[expr]`` (for ``obj ?then "
"obj[expr]``)"
msgstr ""

#: ../../peps/pep-0531.rst:29
msgid ""
"Existence-checking assignment: ``value ?= expr`` (for ``value = value "
"?else expr``)"
msgstr ""

#: ../../peps/pep-0531.rst:32
msgid ""
"The common ``?`` symbol in these new operator definitions indicates that "
"they use a new \"existence checking\" protocol rather than the "
"established truth-checking protocol used by if statements, while loops, "
"comprehensions, generator expressions, conditional expressions, logical "
"conjunction, and logical disjunction."
msgstr ""

#: ../../peps/pep-0531.rst:38
msgid ""
"This new protocol would be made available as ``operator.exists``, with "
"the following characteristics:"
msgstr ""

#: ../../peps/pep-0531.rst:41
msgid ""
"types can define a new ``__exists__`` magic method (Python) or "
"``tp_exists`` slot (C) to override the default behaviour. This optional "
"method has the same signature and possible return values as ``__bool__``."
msgstr ""

#: ../../peps/pep-0531.rst:44
msgid "``operator.exists(None)`` returns ``False``"
msgstr ""

#: ../../peps/pep-0531.rst:45
msgid "``operator.exists(NotImplemented)`` returns ``False``"
msgstr ""

#: ../../peps/pep-0531.rst:46
msgid "``operator.exists(Ellipsis)`` returns ``False``"
msgstr ""

#: ../../peps/pep-0531.rst:47
msgid ""
"``float``, ``complex`` and ``decimal.Decimal`` will override the "
"existence check such that ``NaN`` values return ``False`` and other "
"values (including zero values) return ``True``"
msgstr ""

#: ../../peps/pep-0531.rst:50
msgid ""
"for any other type, ``operator.exists(obj)`` returns True by default. "
"Most importantly, values that evaluate to False in a truth checking "
"context (zeroes, empty containers) will still evaluate to True in an "
"existence checking context"
msgstr ""

#: ../../peps/pep-0531.rst:56
msgid "PEP Withdrawal"
msgstr ""

#: ../../peps/pep-0531.rst:58
msgid ""
"When posting this PEP for discussion on python-ideas [4]_, I asked "
"reviewers to consider 3 high level design questions before moving on to "
"considering the specifics of this particular syntactic proposal:"
msgstr ""

#: ../../peps/pep-0531.rst:62
msgid ""
"1. Do we collectively agree that \"existence checking\" is a useful "
"general concept that exists in software development and is distinct from "
"the concept of \"truth checking\"? 2. Do we collectively agree that the "
"Python ecosystem would benefit from an existence checking protocol that "
"permits generalisation of algorithms (especially short circuiting ones) "
"across different \"data missing\" indicators, including those defined in "
"the language definition, the standard library, and custom user code? 3. "
"Do we collectively agree that it would be easier to use such a protocol "
"effectively if existence-checking equivalents to the truth-checking "
"\"and\" and \"or\" control flow operators were available?"
msgstr ""

#: ../../peps/pep-0531.rst:74
msgid ""
"While the answers to the first question were generally positive, it "
"quickly became clear that the answer to the second question is \"No\"."
msgstr ""

#: ../../peps/pep-0531.rst:77
msgid ""
"Steven D'Aprano articulated the counter-argument well in [5]_, but the "
"general idea is that when checking for \"missing data\" sentinels, we're "
"almost always looking for a *specific* sentinel value, rather than *any* "
"sentinel value."
msgstr ""

#: ../../peps/pep-0531.rst:81
msgid ""
"``NotImplemented`` exists, for example, due to ``None`` being a "
"potentially legitimate result from overloaded arithmetic operators and "
"exception handling imposing too much runtime overhead to be useful for "
"operand coercion."
msgstr ""

#: ../../peps/pep-0531.rst:85
msgid ""
"Similarly, ``Ellipsis`` exists for multi-dimensional slicing support due "
"to ``None`` already have another meaning in a slicing context (indicating"
" the use of the default start or stop indices, or the default step size)."
msgstr ""

#: ../../peps/pep-0531.rst:89
msgid ""
"In mathematics, the value of ``NaN`` is that *programmatically* it "
"behaves like a normal value of its type (e.g. exposing all the usual "
"attributes and methods), while arithmetically it behaves according to the"
" mathematical rules for handling ``NaN`` values."
msgstr ""

#: ../../peps/pep-0531.rst:94
msgid ""
"With that core design concept invalidated, the proposal as a whole "
"doesn't make sense, and it is accordingly withdrawn."
msgstr ""

#: ../../peps/pep-0531.rst:97
msgid ""
"However, the discussion of the proposal did prompt consideration of a "
"potential protocol based approach to make the existing ``and``, ``or`` "
"and ``if-else`` operators more flexible [6]_ without introducing any new "
"syntax, so I'll be writing that up as another possible alternative to "
":pep:`505`."
msgstr ""

#: ../../peps/pep-0531.rst:104
msgid "Relationship with other PEPs"
msgstr ""

#: ../../peps/pep-0531.rst:106
msgid ""
"While this PEP was inspired by and builds on Mark Haase's excellent work "
"in putting together :pep:`505`, it ultimately competes with that PEP due "
"to significant differences in the specifics of the proposed syntax and "
"semantics for the feature."
msgstr ""

#: ../../peps/pep-0531.rst:111
msgid ""
"It also presents a different perspective on the rationale for the change "
"by focusing on the benefits to existing Python users as the typical "
"demands of application and service development activities are genuinely "
"changing. It isn't an accident that similar features are now appearing in"
" multiple programming languages, and while it's a good idea for us to "
"learn from how other language designers are handling the problem, "
"precedents being set elsewhere are more relevant to *how* we would go "
"about tackling this problem than they are to whether or not we think it's"
" a problem we should address in the first place."
msgstr ""

#: ../../peps/pep-0531.rst:123
msgid "Rationale"
msgstr ""

#: ../../peps/pep-0531.rst:126
msgid "Existence checking expressions"
msgstr ""

#: ../../peps/pep-0531.rst:128
msgid ""
"An increasingly common requirement in modern software development is the "
"need to work with \"semi-structured data\": data where the structure of "
"the data is known in advance, but pieces of it may be missing at runtime,"
" and the software manipulating that data is expected to degrade "
"gracefully (e.g. by omitting results that depend on the missing data) "
"rather than failing outright."
msgstr ""

#: ../../peps/pep-0531.rst:134
msgid "Some particularly common cases where this issue arises are:"
msgstr ""

#: ../../peps/pep-0531.rst:136
msgid ""
"handling optional application configuration settings and function "
"parameters"
msgstr ""

#: ../../peps/pep-0531.rst:137
msgid "handling external service failures in distributed systems"
msgstr ""

#: ../../peps/pep-0531.rst:138
msgid "handling data sets that include some partial records"
msgstr ""

#: ../../peps/pep-0531.rst:140
msgid ""
"It is the latter two cases that are the primary motivation for this PEP -"
" while needing to deal with optional configuration settings and "
"parameters is a design requirement at least as old as Python itself, the "
"rise of public cloud infrastructure, the development of software systems "
"as collaborative networks of distributed services, and the availability "
"of large public and private data sets for analysis means that the ability"
" to degrade operations gracefully in the face of partial service failures"
" or partial data availability is becoming an essential feature of modern "
"programming environments."
msgstr ""

#: ../../peps/pep-0531.rst:149
msgid ""
"At the moment, writing such software in Python can be genuinely awkward, "
"as your code ends up littered with expressions like:"
msgstr ""

#: ../../peps/pep-0531.rst:152
msgid "``value1 = expr1.field.of.interest if expr1 is not None else None``"
msgstr ""

#: ../../peps/pep-0531.rst:153
msgid ""
"``value2 = expr2[\"field\"][\"of\"][\"interest\"] if expr2 is not None "
"else None``"
msgstr ""

#: ../../peps/pep-0531.rst:154
msgid ""
"``value3 = expr3 if expr3 is not None else expr4 if expr4 is not None "
"else expr5``"
msgstr ""

#: ../../peps/pep-0531.rst:156
msgid ""
"If these are only occasional, then expanding out to full statement forms "
"may help improve readability, but if you have 4 or 5 of them in a row "
"(which is a fairly common situation in data transformation pipelines), "
"then replacing them with 16 or 20 lines of conditional logic really "
"doesn't help matters."
msgstr ""

#: ../../peps/pep-0531.rst:161
msgid ""
"Expanding the three examples above that way hopefully helps illustrate "
"that::"
msgstr ""

#: ../../peps/pep-0531.rst:179
msgid ""
"The combined impact of the proposals in this PEP is to allow the above "
"sample expressions to instead be written as:"
msgstr ""

#: ../../peps/pep-0531.rst:182
msgid "``value1 = expr1?.field.of.interest``"
msgstr ""

#: ../../peps/pep-0531.rst:183
msgid "``value2 = expr2?[\"field\"][\"of\"][\"interest\"]``"
msgstr ""

#: ../../peps/pep-0531.rst:184
msgid "``value3 = expr3 ?else expr4 ?else expr5``"
msgstr ""

#: ../../peps/pep-0531.rst:186
msgid ""
"In these forms, almost all of the information presented to the reader is "
"immediately relevant to the question \"What does this code do?\", while "
"the boilerplate code to handle missing data by passing it through to the "
"output or falling back to an alternative input, has shrunk to two uses of"
" the ``?`` symbol and two uses of the ``?else`` keyword."
msgstr ""

#: ../../peps/pep-0531.rst:192
msgid ""
"In the first two examples, the 31 character boilerplate clause ``if exprN"
" is not None else None`` (minimally 27 characters for a single letter "
"variable name) has been replaced by a single ``?`` character, "
"substantially improving the signal-to-pattern-noise ratio of the lines "
"(especially if it encourages the use of more meaningful variable and "
"field names rather than making them shorter purely for the sake of "
"expression brevity)."
msgstr ""

#: ../../peps/pep-0531.rst:199
msgid ""
"In the last example, two instances of the 21 character boilerplate, ``if "
"exprN is not None`` (minimally 17 characters) are replaced with single "
"characters, again substantially improving the signal-to-pattern-noise "
"ratio."
msgstr ""

#: ../../peps/pep-0531.rst:203
msgid ""
"Furthermore, each of our 5 \"subexpressions of potential interest\" is "
"included exactly once, rather than 4 of them needing to be duplicated or "
"pulled out to a named variable in order to first check if they exist."
msgstr ""

#: ../../peps/pep-0531.rst:207
msgid ""
"The existence checking precondition operator is mainly defined to provide"
" a clear conceptual basis for the existence checking attribute access and"
" subscripting operators:"
msgstr ""

#: ../../peps/pep-0531.rst:211
msgid "``obj?.attr`` is roughly equivalent to ``obj ?then obj.attr``"
msgstr ""

#: ../../peps/pep-0531.rst:212
msgid "``obj?[expr]`` is roughly equivalent to ``obj ?then obj[expr]``"
msgstr ""

#: ../../peps/pep-0531.rst:214
msgid ""
"The main semantic difference between the shorthand forms and their "
"expanded equivalents is that the common subexpression to the left of the "
"existence checking operator is evaluated only once in the shorthand form "
"(similar to the benefit offered by augmented assignment statements)."
msgstr ""

#: ../../peps/pep-0531.rst:221
msgid "Existence checking assignment"
msgstr ""

#: ../../peps/pep-0531.rst:223
msgid ""
"Existence-checking assignment is proposed as a relatively straightforward"
" expansion of the concepts in this PEP to also cover the common "
"configuration handling idiom:"
msgstr ""

#: ../../peps/pep-0531.rst:227
msgid "``value = value if value is not None else expensive_default()``"
msgstr ""

#: ../../peps/pep-0531.rst:229
msgid "by allowing that to instead be abbreviated as:"
msgstr ""

#: ../../peps/pep-0531.rst:231
msgid "``value ?= expensive_default()``"
msgstr ""

#: ../../peps/pep-0531.rst:233
msgid ""
"This is mainly beneficial when the target is a subscript operation or "
"subattribute, as even without this specific change, the PEP would still "
"permit this idiom to be updated to:"
msgstr ""

#: ../../peps/pep-0531.rst:237
msgid "``value = value ?else expensive_default()``"
msgstr ""

#: ../../peps/pep-0531.rst:239
msgid ""
"The main argument *against* adding this form is that it's arguably "
"ambiguous and could mean either:"
msgstr ""

#: ../../peps/pep-0531.rst:242
msgid "``value = value ?else expensive_default()``; or"
msgstr ""

#: ../../peps/pep-0531.rst:243
msgid "``value = value ?then value.subfield.of.interest``"
msgstr ""

#: ../../peps/pep-0531.rst:245
msgid ""
"The second form isn't at all useful, but if this concern was deemed "
"significant enough to address while still keeping the augmented "
"assignment feature, the full keyword could be included in the syntax:"
msgstr ""

#: ../../peps/pep-0531.rst:249
msgid "``value ?else= expensive_default()``"
msgstr ""

#: ../../peps/pep-0531.rst:251
msgid ""
"Alternatively, augmented assignment could just be dropped from the "
"current proposal entirely and potentially reconsidered at a later date."
msgstr ""

#: ../../peps/pep-0531.rst:256
msgid "Existence checking protocol"
msgstr ""

#: ../../peps/pep-0531.rst:258
msgid ""
"The existence checking protocol is including in this proposal primarily "
"to allow for proxy objects (e.g. local representations of remote "
"resources) and mock objects used in testing to correctly indicate non-"
"existence of target resources, even though the proxy or mock object "
"itself is not None."
msgstr ""

#: ../../peps/pep-0531.rst:263
msgid ""
"However, with that protocol defined, it then seems natural to expand it "
"to provide a type independent way of checking for ``NaN`` values in "
"numeric types - at the moment you need to be aware of the exact data type"
" you're working with (e.g. builtin floats, builtin complex numbers, the "
"decimal module) and use the appropriate operation (e.g. ``math.isnan``, "
"``cmath.isnan``, ``decimal.getcontext().is_nan()``, respectively)"
msgstr ""

#: ../../peps/pep-0531.rst:270
msgid ""
"Similarly, it seems reasonable to declare that the other placeholder "
"builtin singletons, ``Ellipsis`` and ``NotImplemented``, also qualify as "
"objects that represent the absence of data more so than they represent "
"data."
msgstr ""

#: ../../peps/pep-0531.rst:276
msgid "Proposed symbolic notation"
msgstr ""

#: ../../peps/pep-0531.rst:278
msgid ""
"Python has historically only had one kind of implied boolean context: "
"truth checking, which can be invoked directly via the ``bool()`` builtin."
" As this PEP proposes a new kind of control flow operation based on "
"existence checking rather than truth checking, it is considered valuable "
"to have a reminder directly in the code when existence checking is being "
"used rather than truth checking."
msgstr ""

#: ../../peps/pep-0531.rst:284
msgid ""
"The mathematical symbol for existence assertions is U+2203 'THERE "
"EXISTS': ``∃``"
msgstr ""

#: ../../peps/pep-0531.rst:286
msgid ""
"Accordingly, one possible approach to the syntactic additions proposed in"
" this PEP would be to use that already defined mathematical notation:"
msgstr ""

#: ../../peps/pep-0531.rst:289
msgid "``expr1 ∃then expr2``"
msgstr ""

#: ../../peps/pep-0531.rst:290
msgid "``expr1 ∃else expr2``"
msgstr ""

#: ../../peps/pep-0531.rst:291
msgid "``obj∃.attr``"
msgstr ""

#: ../../peps/pep-0531.rst:292
msgid "``obj∃[expr]``"
msgstr ""

#: ../../peps/pep-0531.rst:293
msgid "``target ∃= expr``"
msgstr ""

#: ../../peps/pep-0531.rst:295
msgid ""
"However, there are two major problems with that approach, one practical, "
"and one pedagogical."
msgstr ""

#: ../../peps/pep-0531.rst:298
msgid ""
"The practical problem is the usual one that most keyboards don't offer "
"any easy way of entering mathematical symbols other than those used in "
"basic arithmetic (even the symbols appearing in this PEP were ultimately "
"copied & pasted from [3]_ rather than being entered directly)."
msgstr ""

#: ../../peps/pep-0531.rst:303
msgid ""
"The pedagogical problem is that the symbols for existence assertions "
"(``∃``) and universal assertions (``∀``) aren't going to be familiar to "
"most people the way basic arithmetic operators are, so we wouldn't "
"actually be making the proposed syntax easier to understand by adopting "
"``∃``."
msgstr ""

#: ../../peps/pep-0531.rst:308
msgid ""
"By contrast, ``?`` is one of the few remaining unused ASCII punctuation "
"characters in Python's syntax, making it available as a candidate "
"syntactic marker for \"this control flow operation is based on an "
"existence check, not a truth check\"."
msgstr ""

#: ../../peps/pep-0531.rst:313
msgid ""
"Taking that path would also have the advantage of aligning Python's "
"syntax with corresponding syntax in other languages that offer similar "
"features."
msgstr ""

#: ../../peps/pep-0531.rst:316
msgid ""
"Drawing from the existing summary in :pep:`505` and the Wikipedia "
"articles on the \"safe navigation operator [1]_ and the \"null coalescing"
" operator\" [2]_, we see:"
msgstr ""

#: ../../peps/pep-0531.rst:320
msgid ""
"The ``?.`` existence checking attribute access syntax precisely aligns "
"with:"
msgstr ""

#: ../../peps/pep-0531.rst:322
msgid "the \"safe navigation\" attribute access operator in C# (``?.``)"
msgstr ""

#: ../../peps/pep-0531.rst:323
msgid "the \"optional chaining\" operator in Swift (``?.``)"
msgstr ""

#: ../../peps/pep-0531.rst:324
msgid "the \"safe navigation\" attribute access operator in Groovy (``?.``)"
msgstr ""

#: ../../peps/pep-0531.rst:325
msgid "the \"conditional member access\" operator in Dart (``?.``)"
msgstr ""

#: ../../peps/pep-0531.rst:327
msgid ""
"The ``?[]`` existence checking attribute access syntax precisely aligns "
"with:"
msgstr ""

#: ../../peps/pep-0531.rst:329
msgid "the \"safe navigation\" subscript operator in C# (``?[]``)"
msgstr ""

#: ../../peps/pep-0531.rst:330
msgid "the \"optional subscript\" operator in Swift (``?[].``)"
msgstr ""

#: ../../peps/pep-0531.rst:332
msgid "The ``?else`` existence checking fallback syntax semantically aligns with:"
msgstr ""

#: ../../peps/pep-0531.rst:334
msgid "the \"null-coalescing\" operator in C# (``??``)"
msgstr ""

#: ../../peps/pep-0531.rst:335
msgid "the \"null-coalescing\" operator in PHP (``??``)"
msgstr ""

#: ../../peps/pep-0531.rst:336
msgid "the \"nil-coalescing\" operator in Swift (``??``)"
msgstr ""

#: ../../peps/pep-0531.rst:338
msgid ""
"To be clear, these aren't the only spelling of these operators used in "
"other languages, but they're the most common ones, and the ``?`` symbol "
"is the most common syntactic marker by far (presumably prompted by the "
"use of ``?`` to introduce the \"then\" clause in C-style conditional "
"expressions, which many of these languages also offer)."
msgstr ""

#: ../../peps/pep-0531.rst:346
msgid "Proposed keywords"
msgstr ""

#: ../../peps/pep-0531.rst:348
msgid ""
"Given the symbolic marker ``?``, it would be syntactically unambiguous to"
" spell the existence checking precondition and fallback operations using "
"the same keywords as their truth checking counterparts:"
msgstr ""

#: ../../peps/pep-0531.rst:352
msgid "``expr1 ?and expr2`` (instead of ``expr1 ?then expr2``)"
msgstr ""

#: ../../peps/pep-0531.rst:353
msgid "``expr1 ?or expr2`` (instead of ``expr1 ?else expr2``)"
msgstr ""

#: ../../peps/pep-0531.rst:355
msgid ""
"However, while syntactically unambiguous when written, this approach "
"makes the code incredibly hard to *pronounce* (What's the pronunciation "
"of \"?\"?) and also hard to *describe* (given reused keywords, there's no"
" obvious shorthand terms for \"existence checking precondition (?and)\" "
"and \"existence checking fallback (?or)\" that would distinguish them "
"from \"logical conjunction (and)\" and \"logical disjunction (or)\")."
msgstr ""

#: ../../peps/pep-0531.rst:362
msgid ""
"We could try to encourage folks to pronounce the ``?`` symbol as "
"\"exists\", making the shorthand names the \"exists-and expression\" and "
"the \"exists-or expression\", but there'd be no way of guessing those "
"names purely from seeing them written in a piece of code."
msgstr ""

#: ../../peps/pep-0531.rst:367
msgid ""
"Instead, this PEP takes advantage of the proposed symbolic syntax to "
"introduce a new keyword (``?then``) and borrow an existing one "
"(``?else``) in a way that allows people to refer to \"then expressions\" "
"and \"else expressions\" without ambiguity."
msgstr ""

#: ../../peps/pep-0531.rst:372
msgid ""
"These keywords also align well with the conditional expressions that are "
"semantically equivalent to the proposed expressions."
msgstr ""

#: ../../peps/pep-0531.rst:375
msgid "For ``?else`` expressions, ``expr1 ?else expr2`` is equivalent to::"
msgstr ""

#: ../../peps/pep-0531.rst:380
msgid ""
"Here the parallel is clear, since the ``else expr2`` appears at the end "
"of both the abbreviated and expanded forms."
msgstr ""

#: ../../peps/pep-0531.rst:383
msgid "For ``?then`` expressions, ``expr1 ?then expr2`` is equivalent to::"
msgstr ""

#: ../../peps/pep-0531.rst:388
msgid ""
"Here the parallel isn't as immediately obvious due to Python's "
"traditionally anonymous \"then\" clauses (introduced by ``:`` in ``if`` "
"statements and suffixed by ``if`` in conditional expressions), but it's "
"still reasonably clear as long as you're already familiar with the \"if-"
"then-else\" explanation of conditional control flow."
msgstr ""

#: ../../peps/pep-0531.rst:396
msgid "Risks and concerns"
msgstr ""

#: ../../peps/pep-0531.rst:399
msgid "Readability"
msgstr ""

#: ../../peps/pep-0531.rst:401
msgid ""
"Learning to read and write the new syntax effectively mainly requires "
"internalising two concepts:"
msgstr ""

#: ../../peps/pep-0531.rst:404
msgid ""
"expressions containing ``?`` include an existence check and may short "
"circuit"
msgstr ""

#: ../../peps/pep-0531.rst:405
msgid ""
"if ``None`` or another \"non-existent\" value is an expected input, and "
"the correct handling is to propagate that to the result, then the "
"existence checking operators are likely what you want"
msgstr ""

#: ../../peps/pep-0531.rst:409
msgid ""
"Currently, these concepts aren't explicitly represented at the language "
"level, so it's a matter of learning to recognise and use the various "
"idiomatic patterns based on conditional expressions and statements."
msgstr ""

#: ../../peps/pep-0531.rst:415
msgid "Magic syntax"
msgstr ""

#: ../../peps/pep-0531.rst:417
msgid ""
"There's nothing about ``?`` as a syntactic element that inherently "
"suggests ``is not None`` or ``operator.exists``. The main current use of "
"``?`` as a symbol in Python code is as a trailing suffix in IPython "
"environments to request help information for the result of the preceding "
"expression."
msgstr ""

#: ../../peps/pep-0531.rst:422
msgid ""
"However, the notion of existence checking really does benefit from a "
"pervasive visual marker that distinguishes it from truth checking, and "
"that calls for a single-character symbolic syntax if we're going to do it"
" at all."
msgstr ""

#: ../../peps/pep-0531.rst:428
msgid "Conceptual complexity"
msgstr ""

#: ../../peps/pep-0531.rst:430
msgid ""
"This proposal takes the currently ad hoc and informal concept of "
"\"existence checking\" and elevates it to the status of being a syntactic"
" language feature with a clearly defined operator protocol."
msgstr ""

#: ../../peps/pep-0531.rst:434
msgid ""
"In many ways, this should actually *reduce* the overall conceptual "
"complexity of the language, as many more expectations will map correctly "
"between truth checking with ``bool(expr)`` and existence checking with "
"``operator.exists(expr)`` than currently map between truth checking and "
"existence checking with ``expr is not None`` (or ``expr is not "
"NotImplemented`` in the context of operand coercion, or the various NaN-"
"checking operations in mathematical libraries)."
msgstr ""

#: ../../peps/pep-0531.rst:442
msgid "As a simple example of the new parallels introduced by this PEP, compare::"
msgstr ""

#: ../../peps/pep-0531.rst:451
msgid "Design Discussion"
msgstr ""

#: ../../peps/pep-0531.rst:454
msgid "Subtleties in chaining existence checking expressions"
msgstr ""

#: ../../peps/pep-0531.rst:456
msgid ""
"Similar subtleties arise in chaining existence checking expressions as "
"already exist in chaining logical operators: the behaviour can be "
"surprising if the right hand side of one of the expressions in the chain "
"itself returns a value that doesn't exist."
msgstr ""

#: ../../peps/pep-0531.rst:461
msgid ""
"As a result, ``value = arg1 ?then f(arg1) ?else default()`` would be "
"dubious for essentially the same reason that ``value = cond and expr1 or "
"expr2`` is dubious: the former will evaluate ``default()`` if ``f(arg1)``"
" returns ``None``, just as the latter will evaluate ``expr2`` if "
"``expr1`` evaluates to ``False`` in a boolean context."
msgstr ""

#: ../../peps/pep-0531.rst:469
msgid "Ambiguous interaction with conditional expressions"
msgstr ""

#: ../../peps/pep-0531.rst:471
msgid "In the proposal as currently written, the following is a syntax error:"
msgstr ""

#: ../../peps/pep-0531.rst:473
msgid "``value = f(arg) if arg ?else default``"
msgstr ""

#: ../../peps/pep-0531.rst:475
msgid ""
"While the following is a valid operation that checks a second condition "
"if the first doesn't exist rather than merely being false:"
msgstr ""

#: ../../peps/pep-0531.rst:478
msgid "``value = expr1 if cond1 ?else cond2 else expr2``"
msgstr ""

#: ../../peps/pep-0531.rst:480
msgid ""
"The expression chaining problem described above means that the argument "
"can be made that the first operation should instead be equivalent to:"
msgstr ""

#: ../../peps/pep-0531.rst:483
msgid "``value = f(arg) if operator.exists(arg) else default``"
msgstr ""

#: ../../peps/pep-0531.rst:485
msgid "requiring the second to be written in the arguably clearer form:"
msgstr ""

#: ../../peps/pep-0531.rst:487
msgid "``value = expr1 if (cond1 ?else cond2) else expr2``"
msgstr ""

#: ../../peps/pep-0531.rst:489
msgid ""
"Alternatively, the first form could remain a syntax error, and the "
"existence checking symbol could instead be attached to the ``if`` "
"keyword:"
msgstr ""

#: ../../peps/pep-0531.rst:492
msgid "``value = expr1 if? cond else expr2``"
msgstr ""

#: ../../peps/pep-0531.rst:496
msgid "Existence checking in other truth-checking contexts"
msgstr ""

#: ../../peps/pep-0531.rst:498
msgid ""
"The truth-checking protocol is currently used in the following syntactic "
"constructs:"
msgstr ""

#: ../../peps/pep-0531.rst:501
msgid "logical conjunction (and-expressions)"
msgstr ""

#: ../../peps/pep-0531.rst:502
msgid "logical disjunction (or-expressions)"
msgstr ""

#: ../../peps/pep-0531.rst:503
msgid "conditional expressions (if-else expressions)"
msgstr ""

#: ../../peps/pep-0531.rst:504
msgid "if statements"
msgstr ""

#: ../../peps/pep-0531.rst:505
msgid "while loops"
msgstr ""

#: ../../peps/pep-0531.rst:506
msgid "filter clauses in comprehensions and generator expressions"
msgstr ""

#: ../../peps/pep-0531.rst:508
msgid ""
"In the current PEP, switching from truth-checking with ``and`` and ``or``"
" to existence-checking is a matter of substituting in the new keywords, "
"``?then`` and ``?else`` in the appropriate places."
msgstr ""

#: ../../peps/pep-0531.rst:512
msgid ""
"For other truth-checking contexts, it proposes either importing and using"
" the ``operator.exists`` API, or else continuing with the current idiom "
"of checking specifically for ``expr is not None`` (or the context "
"appropriate equivalent)."
msgstr ""

#: ../../peps/pep-0531.rst:517
msgid ""
"The simplest possible enhancement in that regard would be to elevate the "
"proposed ``exists()`` API from an operator module function to a new "
"builtin function."
msgstr ""

#: ../../peps/pep-0531.rst:521
msgid ""
"Alternatively, the ``?`` existence checking symbol could be supported as "
"a modifier on the ``if`` and ``while`` keywords to indicate the use of an"
" existence check rather than a truth check."
msgstr ""

#: ../../peps/pep-0531.rst:525
msgid ""
"However, it isn't at all clear that the potential consistency benefits "
"gained for either suggestion would justify the additional disruption, so "
"they've currently been omitted from the proposal."
msgstr ""

#: ../../peps/pep-0531.rst:531
msgid ""
"Defining expected invariant relations between ``__bool__`` and "
"``__exists__``"
msgstr ""

#: ../../peps/pep-0531.rst:533
msgid ""
"The PEP currently leaves the definition of ``__bool__`` on all existing "
"types unmodified, which ensures the entire proposal remains backwards "
"compatible, but results in the following cases where ``bool(obj)`` "
"returns ``True``, but the proposed ``operator.exists(obj)`` would return "
"``False``:"
msgstr ""

#: ../../peps/pep-0531.rst:538
msgid "``NaN`` values for ``float``, ``complex``, and ``decimal.Decimal``"
msgstr ""

#: ../../peps/pep-0531.rst:539
msgid "``Ellipsis``"
msgstr ""

#: ../../peps/pep-0531.rst:540
msgid "``NotImplemented``"
msgstr ""

#: ../../peps/pep-0531.rst:542
msgid ""
"The main argument for potentially changing these is that it becomes "
"easier to reason about potential code behaviour if we have a recommended "
"invariant in place saying that values which indicate they don't exist in "
"an existence checking context should also report themselves as being "
"``False`` in a truth checking context."
msgstr ""

#: ../../peps/pep-0531.rst:548
msgid ""
"Failing to define such an invariant would lead to arguably odd outcomes "
"like ``float(\"NaN\") ?else 0.0`` returning ``0.0`` while "
"``float(\"NaN\") or 0.0`` returns ``NaN``."
msgstr ""

#: ../../peps/pep-0531.rst:554
msgid "Limitations"
msgstr ""

#: ../../peps/pep-0531.rst:557
msgid "Arbitrary sentinel objects"
msgstr ""

#: ../../peps/pep-0531.rst:559
msgid ""
"This proposal doesn't attempt to provide syntactic support for the "
"\"sentinel object\" idiom, where ``None`` is a permitted explicit value, "
"so a separate sentinel object is defined to indicate missing values::"
msgstr ""

#: ../../peps/pep-0531.rst:567
msgid ""
"This could potentially be supported at the expense of making the "
"existence protocol definition significantly more complex, both to define "
"and to use:"
msgstr ""

#: ../../peps/pep-0531.rst:570
msgid ""
"at the Python layer, ``operator.exists`` and ``__exists__`` "
"implementations would return the empty tuple to indicate non-existence, "
"and otherwise return a singleton tuple containing a reference to the "
"object to be used as the result of the existence check"
msgstr ""

#: ../../peps/pep-0531.rst:574
msgid ""
"at the C layer, ``tp_exists`` implementations would return NULL to "
"indicate non-existence, and otherwise return a ``PyObject *`` pointer as "
"the result of the existence check"
msgstr ""

#: ../../peps/pep-0531.rst:578
msgid "Given that change, the sentinel object idiom could be rewritten as::"
msgstr ""

#: ../../peps/pep-0531.rst:590
msgid ""
"However, I don't think cases where the 3 proposed standard sentinel "
"values (i.e. ``None``, ``Ellipsis`` and ``NotImplemented``) can't be used"
" are going to be anywhere near common enough for the additional protocol "
"complexity and the loss of symmetry between ``__bool__`` and "
"``__exists__`` to be worth it."
msgstr ""

#: ../../peps/pep-0531.rst:597
msgid "Specification"
msgstr ""

#: ../../peps/pep-0531.rst:599
msgid ""
"The Abstract already gives the gist of the proposal and the Rationale "
"gives some specific examples. If there's enough interest in the basic "
"idea, then a full specification will need to provide a precise "
"correspondence between the proposed syntactic sugar and the underlying "
"conditional expressions that is sufficient to guide the creation of a "
"reference implementation."
msgstr ""

#: ../../peps/pep-0531.rst:605 ../../peps/pep-0531.rst:619
msgid "...TBD..."
msgstr ""

#: ../../peps/pep-0531.rst:609
msgid "Implementation"
msgstr ""

#: ../../peps/pep-0531.rst:611
msgid ""
"As with :pep:`505`, actual implementation has been deferred pending in-"
"principle interest in the idea of adding these operators - the "
"implementation isn't the hard part of these proposals, the hard part is "
"deciding whether or not this is a change where the long term benefits for"
" new and existing Python users outweigh the short term costs involved in "
"the wider ecosystem (including developers of other implementations, "
"language curriculum developers, and authors of other Python related "
"educational material) adjusting to the change."
msgstr ""

#: ../../peps/pep-0531.rst:623
msgid "References"
msgstr "Referências"

#: ../../peps/pep-0531.rst:625
msgid ""
"Wikipedia: Safe navigation operator "
"(https://en.wikipedia.org/wiki/Safe_navigation_operator)"
msgstr ""

#: ../../peps/pep-0531.rst:628
msgid ""
"Wikipedia: Null coalescing operator "
"(https://en.wikipedia.org/wiki/Null_coalescing_operator)"
msgstr ""

#: ../../peps/pep-0531.rst:631
msgid ""
"FileFormat.info: Unicode Character 'THERE EXISTS' (U+2203) "
"(http://www.fileformat.info/info/unicode/char/2203/index.htm)"
msgstr ""

#: ../../peps/pep-0531.rst:634
msgid ""
"python-ideas discussion thread (https://mail.python.org/pipermail/python-"
"ideas/2016-October/043415.html)"
msgstr ""

#: ../../peps/pep-0531.rst:637
msgid ""
"Steven D'Aprano's critique of the proposal "
"(https://mail.python.org/pipermail/python-ideas/2016-October/043453.html)"
msgstr ""

#: ../../peps/pep-0531.rst:640
msgid ""
"Considering a link to the idea of overloadable Boolean operators "
"(https://mail.python.org/pipermail/python-ideas/2016-October/043447.html)"
msgstr ""

#: ../../peps/pep-0531.rst:644
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0531.rst:646
msgid ""
"This document has been placed in the public domain under the terms of the"
" CC0 1.0 license: https://creativecommons.org/publicdomain/zero/1.0/"
msgstr ""

#~ msgid "Nick Coghlan <ncoghlan@gmail.com>"
#~ msgstr ""

#~ msgid ""
#~ "at the C layer, ``tp_exists`` "
#~ "implementations would return NULL to "
#~ "indicate non-existence, and otherwise "
#~ "return a `PyObject *` pointer as "
#~ "the result of the existence check"
#~ msgstr ""

