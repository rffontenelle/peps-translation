# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0620.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0620.rst:3
msgid "Victor Stinner <vstinner@python.org>"
msgstr ""

#: ../../peps/pep-0620.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0620.rst:4
msgid "Withdrawn"
msgstr ""

#: ../../peps/pep-0620.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0620.rst:5
msgid "Standards Track"
msgstr ""

#: ../../peps/pep-0620.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0620.rst:7
msgid "19-Jun-2020"
msgstr ""

#: ../../peps/pep-0620.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/pep-0620.rst:8
msgid "3.12"
msgstr ""

#: ../../peps/pep-0620.rst:11
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0620.rst:13
msgid "Introduce C API incompatible changes to hide implementation details."
msgstr ""

#: ../../peps/pep-0620.rst:15
msgid ""
"Once most implementation details will be hidden, evolution of CPython "
"internals would be less limited by C API backward compatibility issues. "
"It will be way easier to add new features."
msgstr ""

#: ../../peps/pep-0620.rst:19
msgid ""
"It becomes possible to experiment with more advanced optimizations in "
"CPython than just micro-optimizations, like tagged pointers."
msgstr ""

#: ../../peps/pep-0620.rst:22
msgid "Define a process to reduce the number of broken C extensions."
msgstr ""

#: ../../peps/pep-0620.rst:24
msgid ""
"The implementation of this PEP is expected to be done carefully over "
"multiple Python versions. It already started in Python 3.7 and most "
"changes are already completed. The `Process to reduce the number of "
"broken C extensions`_ dictates the rhythm."
msgstr ""

#: ../../peps/pep-0620.rst:31
msgid "PEP withdrawn"
msgstr ""

#: ../../peps/pep-0620.rst:33
msgid ""
"This PEP was withdrawn by its author since the scope is too broad and the"
" work is distributed over multiple Python versions, which makes it "
"difficult to make a decision on the overall PEP. It was split into new "
"PEPs with narrower and better defined scopes, like :pep:`670`."
msgstr ""

#: ../../peps/pep-0620.rst:40
msgid "Motivation"
msgstr ""

#: ../../peps/pep-0620.rst:43
msgid "The C API blocks CPython evolutions"
msgstr ""

#: ../../peps/pep-0620.rst:45
msgid ""
"Adding or removing members of C structures is causing multiple backward "
"compatibility issues."
msgstr ""

#: ../../peps/pep-0620.rst:48
msgid ""
"Adding a new member breaks the stable ABI (:pep:`384`), especially for "
"types declared statically (e.g. ``static PyTypeObject MyType = {...};``)."
" In Python 3.4, the :pep:`442` \"Safe object finalization\" added the "
"``tp_finalize`` member at the end of the ``PyTypeObject`` structure. For "
"ABI backward compatibility, a new ``Py_TPFLAGS_HAVE_FINALIZE`` type flag "
"was required to announce if the type structure contains the "
"``tp_finalize`` member. The flag was removed in Python 3.8 (`bpo-32388 "
"<https://bugs.python.org/issue32388>`_)."
msgstr ""

#: ../../peps/pep-0620.rst:57
msgid ""
"The ``PyTypeObject.tp_print`` member, deprecated since Python 3.0 "
"released in 2009, has been removed in the Python 3.8 development cycle. "
"But the change broke too many C extensions and had to be reverted before "
"3.8 final release. Finally, the member was removed again in Python 3.9."
msgstr ""

#: ../../peps/pep-0620.rst:62
msgid ""
"C extensions rely on the ability to access structure members, indirectly "
"through the C API, or even directly. Modifying structures like "
"``PyListObject`` cannot be even considered."
msgstr ""

#: ../../peps/pep-0620.rst:66
msgid ""
"The ``PyTypeObject`` structure is the one which evolved the most, simply "
"because there was no other way to evolve CPython than modifying it."
msgstr ""

#: ../../peps/pep-0620.rst:69
msgid ""
"A C extension can technically dereference a ``PyObject*`` pointer and "
"access ``PyObject`` members. This prevents experiments like tagged "
"pointers (storing small values as ``PyObject*`` which does not point to a"
" valid ``PyObject`` structure)."
msgstr ""

#: ../../peps/pep-0620.rst:74
msgid ""
"Replacing Python garbage collector with a tracing garbage collector would"
" also need to remove ``PyObject.ob_refcnt`` reference counter, whereas "
"currently ``Py_INCREF()`` and ``Py_DECREF()`` macros access directly to "
"``PyObject.ob_refcnt``."
msgstr ""

#: ../../peps/pep-0620.rst:80
msgid "Same CPython design since 1990: structures and reference counting"
msgstr ""

#: ../../peps/pep-0620.rst:82
msgid ""
"When the CPython project was created, it was written with one principle: "
"keep the implementation simple enough so it can be maintained by a single"
" developer. CPython complexity grew a lot and many micro-optimizations "
"have been implemented, but CPython core design has not changed."
msgstr ""

#: ../../peps/pep-0620.rst:88
msgid ""
"Members of ``PyObject`` and ``PyTupleObject`` structures have not changed"
" since the \"Initial revision\" commit (1990)::"
msgstr ""

#: ../../peps/pep-0620.rst:104
msgid ""
"Only names changed: ``object`` was renamed to ``PyObject`` and "
"``tupleobject`` was renamed to ``PyTupleObject``."
msgstr ""

#: ../../peps/pep-0620.rst:107
msgid ""
"CPython still tracks Python objects lifetime using reference counting "
"internally and for third party C extensions (through the Python C API)."
msgstr ""

#: ../../peps/pep-0620.rst:110
msgid "All Python objects must be allocated on the heap and cannot be moved."
msgstr ""

#: ../../peps/pep-0620.rst:113
msgid "Why is PyPy more efficient than CPython?"
msgstr ""

#: ../../peps/pep-0620.rst:115
msgid ""
"The PyPy project is a Python implementation which is 4.2x faster than "
"CPython on average. PyPy developers chose to not fork CPython, but start "
"from scratch to have more freedom in terms of optimization choices."
msgstr ""

#: ../../peps/pep-0620.rst:119
msgid ""
"PyPy does not use reference counting, but a tracing garbage collector "
"which moves objects. Objects can be allocated on the stack (or even not "
"at all), rather than always having to be allocated on the heap."
msgstr ""

#: ../../peps/pep-0620.rst:123
msgid ""
"Objects layouts are designed with performance in mind. For example, a "
"list strategy stores integers directly as integers, rather than objects."
msgstr ""

#: ../../peps/pep-0620.rst:126
msgid ""
"Moreover, PyPy also has a JIT compiler which emits fast code thanks to "
"the efficient PyPy design."
msgstr ""

#: ../../peps/pep-0620.rst:130
msgid "PyPy bottleneck: the Python C API"
msgstr ""

#: ../../peps/pep-0620.rst:132
msgid ""
"While PyPy is way more efficient than CPython to run pure Python code, it"
" is as efficient or slower than CPython to run C extensions."
msgstr ""

#: ../../peps/pep-0620.rst:135
msgid ""
"Since the C API requires ``PyObject*`` and allows to access directly "
"structure members, PyPy has to associate a CPython object to PyPy objects"
" and maintain both consistent. Converting a PyPy object to a CPython "
"object is inefficient. Moreover, reference counting also has to be "
"implemented on top of PyPy tracing garbage collector."
msgstr ""

#: ../../peps/pep-0620.rst:141
msgid ""
"These conversions are required because the Python C API is too close to "
"the CPython implementation: there is no high-level abstraction. For "
"example, structures members are part of the public C API and nothing "
"prevents a C extension to get or set directly "
"``PyTupleObject.ob_item[0]`` (the first item of a tuple)."
msgstr ""

#: ../../peps/pep-0620.rst:147
msgid ""
"See `Inside cpyext: Why emulating CPython C API is so Hard "
"<https://morepypy.blogspot.com/2018/09/inside-cpyext-why-emulating-"
"cpython-c.html>`_ (Sept 2018) by Antonio Cuni for more details."
msgstr ""

#: ../../peps/pep-0620.rst:153
msgid "Rationale"
msgstr ""

#: ../../peps/pep-0620.rst:156
msgid "Hide implementation details"
msgstr ""

#: ../../peps/pep-0620.rst:158
msgid "Hiding implementation details from the C API has multiple advantages:"
msgstr ""

#: ../../peps/pep-0620.rst:160
msgid ""
"It becomes possible to experiment with more advanced optimizations in "
"CPython than just micro-optimizations. For example, tagged pointers, and "
"replace the garbage collector with a tracing garbage collector which can "
"move objects."
msgstr ""

#: ../../peps/pep-0620.rst:164
msgid "Adding new features in CPython becomes easier."
msgstr ""

#: ../../peps/pep-0620.rst:165
msgid ""
"PyPy should be able to avoid conversions to CPython objects in more "
"cases: keep efficient PyPy objects."
msgstr ""

#: ../../peps/pep-0620.rst:167
msgid "It becomes easier to implement the C API for a new Python implementation."
msgstr ""

#: ../../peps/pep-0620.rst:169
msgid ""
"More C extensions will be compatible with Python implementations other "
"than CPython."
msgstr ""

#: ../../peps/pep-0620.rst:173
msgid "Relationship with the limited C API"
msgstr ""

#: ../../peps/pep-0620.rst:175
msgid ""
"The :pep:`384` \"Defining a Stable ABI\" is implemented in Python 3.4. It"
" introduces the \"limited C API\": a subset of the C API. When the "
"limited C API is used, it becomes possible to build a C extension only "
"once and use it on multiple Python versions: that's the stable ABI."
msgstr ""

#: ../../peps/pep-0620.rst:180
msgid ""
"The main limitation of the :pep:`384` is that C extensions have to opt-in"
" for the limited C API. Only very few projects made this choice, usually "
"to ease distribution of binaries, especially on Windows."
msgstr ""

#: ../../peps/pep-0620.rst:184
msgid "This PEP moves the C API towards the limited C API."
msgstr ""

#: ../../peps/pep-0620.rst:186
msgid ""
"Ideally, the C API will become the limited C API and all C extensions "
"will use the stable ABI, but this is out of this PEP scope."
msgstr ""

#: ../../peps/pep-0620.rst:191
msgid "Specification"
msgstr ""

#: ../../peps/pep-0620.rst:194
msgid "Summary"
msgstr ""

#: ../../peps/pep-0620.rst:196
msgid ""
"(**Completed**) Reorganize the C API header files: create "
"``Include/cpython/`` and ``Include/internal/`` subdirectories."
msgstr ""

#: ../../peps/pep-0620.rst:198
msgid ""
"(**Completed**) Move private functions exposing implementation details to"
" the internal C API."
msgstr ""

#: ../../peps/pep-0620.rst:200
msgid "(**Completed**) Convert macros to static inline functions."
msgstr ""

#: ../../peps/pep-0620.rst:201
msgid ""
"(**Completed**) Add new functions ``Py_SET_TYPE()``, ``Py_SET_REFCNT()`` "
"and ``Py_SET_SIZE()``. The ``Py_TYPE()``, ``Py_REFCNT()`` and "
"``Py_SIZE()`` macros become functions which cannot be used as l-value."
msgstr ""

#: ../../peps/pep-0620.rst:204
msgid "(**Completed**) New C API functions must not return borrowed references."
msgstr ""

#: ../../peps/pep-0620.rst:206
msgid "(**In Progress**) Provide ``pythoncapi_compat.h`` header file."
msgstr ""

#: ../../peps/pep-0620.rst:207
msgid "(**In Progress**) Make structures opaque, add getter and setter functions."
msgstr ""

#: ../../peps/pep-0620.rst:209
msgid "(**Not Started**) Deprecate ``PySequence_Fast_ITEMS()``."
msgstr ""

#: ../../peps/pep-0620.rst:210
msgid ""
"(**Not Started**) Convert ``PyTuple_GET_ITEM()`` and "
"``PyList_GET_ITEM()`` macros to static inline functions."
msgstr ""

#: ../../peps/pep-0620.rst:214
msgid "Reorganize the C API header files"
msgstr ""

#: ../../peps/pep-0620.rst:216
msgid ""
"The first consumer of the C API was Python itself. There is no clear "
"separation between APIs which must not be used outside Python, and API "
"which are public on purpose."
msgstr ""

#: ../../peps/pep-0620.rst:220
msgid "Header files must be reorganized in 3 API:"
msgstr ""

#: ../../peps/pep-0620.rst:222
msgid ""
"``Include/`` directory is the limited C API: no implementation details, "
"structures are opaque. C extensions using it get a stable ABI."
msgstr ""

#: ../../peps/pep-0620.rst:225
msgid ""
"``Include/cpython/`` directory is the CPython C API: less \"portable\" "
"API, depends more on the Python version, expose some implementation "
"details, few incompatible changes can happen."
msgstr ""

#: ../../peps/pep-0620.rst:228
msgid ""
"``Include/internal/`` directory is the internal C API: implementation "
"details, incompatible changes are likely at each Python release."
msgstr ""

#: ../../peps/pep-0620.rst:231
msgid ""
"The creation of the ``Include/cpython/`` directory is fully backward "
"compatible. ``Include/cpython/`` header files cannot be included directly"
" and are included automatically by ``Include/`` header files when the "
"``Py_LIMITED_API`` macro is not defined."
msgstr ""

#: ../../peps/pep-0620.rst:236
msgid ""
"The internal C API is installed and can be used for specific usage like "
"debuggers and profilers which must access structures members without "
"executing code. C extensions using the internal C API are tightly coupled"
" to a Python version and must be recompiled at each Python version."
msgstr ""

#: ../../peps/pep-0620.rst:242
msgid "**STATUS**: Completed (in Python 3.8)"
msgstr ""

#: ../../peps/pep-0620.rst:244
msgid ""
"The reorganization of header files started in Python 3.7 and was "
"completed in Python 3.8:"
msgstr ""

#: ../../peps/pep-0620.rst:247
msgid ""
"`bpo-35134 <https://bugs.python.org/issue35134>`_: Add a new "
"Include/cpython/ subdirectory for the \"CPython API\" with implementation"
" details."
msgstr ""

#: ../../peps/pep-0620.rst:250
msgid ""
"`bpo-35081 <https://bugs.python.org/issue35081>`_: Move internal headers "
"to ``Include/internal/``"
msgstr ""

#: ../../peps/pep-0620.rst:254
msgid "Move private functions to the internal C API"
msgstr ""

#: ../../peps/pep-0620.rst:256
msgid ""
"Private functions which expose implementation details must be moved to "
"the internal C API."
msgstr ""

#: ../../peps/pep-0620.rst:259
msgid ""
"If a C extension relies on a CPython private function which exposes "
"CPython implementation details, other Python implementations have to re-"
"implement this private function to support this C extension."
msgstr ""

#: ../../peps/pep-0620.rst:263 ../../peps/pep-0620.rst:327
#: ../../peps/pep-0620.rst:474
msgid "**STATUS**: Completed (in Python 3.9)"
msgstr ""

#: ../../peps/pep-0620.rst:265
msgid "Private functions moved to the internal C API in Python 3.8:"
msgstr ""

#: ../../peps/pep-0620.rst:267
msgid "``_PyObject_GC_TRACK()``, ``_PyObject_GC_UNTRACK()``"
msgstr ""

#: ../../peps/pep-0620.rst:269
msgid "Macros and functions excluded from the limited C API in Python 3.9:"
msgstr ""

#: ../../peps/pep-0620.rst:271
msgid "``_PyObject_SIZE()``, ``_PyObject_VAR_SIZE()``"
msgstr ""

#: ../../peps/pep-0620.rst:272
msgid "``PyThreadState_DeleteCurrent()``"
msgstr ""

#: ../../peps/pep-0620.rst:273
msgid "``PyFPE_START_PROTECT()``, ``PyFPE_END_PROTECT()``"
msgstr ""

#: ../../peps/pep-0620.rst:274
msgid "``_Py_NewReference()``, ``_Py_ForgetReference()``"
msgstr ""

#: ../../peps/pep-0620.rst:275
msgid "``_PyTraceMalloc_NewReference()``"
msgstr ""

#: ../../peps/pep-0620.rst:276
msgid "``_Py_GetRefTotal()``"
msgstr ""

#: ../../peps/pep-0620.rst:278
msgid "Private functions moved to the internal C API in Python 3.9:"
msgstr ""

#: ../../peps/pep-0620.rst:280
msgid ""
"GC functions like ``_Py_AS_GC()``, ``_PyObject_GC_IS_TRACKED()`` and "
"``_PyGCHead_NEXT()``"
msgstr ""

#: ../../peps/pep-0620.rst:282
msgid "``_Py_AddToAllObjects()`` (not exported)"
msgstr ""

#: ../../peps/pep-0620.rst:283
msgid ""
"``_PyDebug_PrintTotalRefs()``, ``_Py_PrintReferences()``, "
"``_Py_PrintReferenceAddresses()`` (not exported)"
msgstr ""

#: ../../peps/pep-0620.rst:286
msgid ""
"Public \"clear free list\" functions moved to the internal C API and "
"renamed to private functions in Python 3.9:"
msgstr ""

#: ../../peps/pep-0620.rst:289
msgid "``PyAsyncGen_ClearFreeLists()``"
msgstr ""

#: ../../peps/pep-0620.rst:290
msgid "``PyContext_ClearFreeList()``"
msgstr ""

#: ../../peps/pep-0620.rst:291
msgid "``PyDict_ClearFreeList()``"
msgstr ""

#: ../../peps/pep-0620.rst:292
msgid "``PyFloat_ClearFreeList()``"
msgstr ""

#: ../../peps/pep-0620.rst:293
msgid "``PyFrame_ClearFreeList()``"
msgstr ""

#: ../../peps/pep-0620.rst:294
msgid "``PyList_ClearFreeList()``"
msgstr ""

#: ../../peps/pep-0620.rst:295
msgid "``PyTuple_ClearFreeList()``"
msgstr ""

#: ../../peps/pep-0620.rst:296
msgid "Functions simply removed:"
msgstr ""

#: ../../peps/pep-0620.rst:298
msgid ""
"``PyMethod_ClearFreeList()`` and ``PyCFunction_ClearFreeList()``: bound "
"method free list removed in Python 3.9."
msgstr ""

#: ../../peps/pep-0620.rst:300
msgid "``PySet_ClearFreeList()``: set free list removed in Python 3.4."
msgstr ""

#: ../../peps/pep-0620.rst:301
msgid "``PyUnicode_ClearFreeList()``: Unicode free list removed in Python 3.3."
msgstr ""

#: ../../peps/pep-0620.rst:305
msgid "Convert macros to static inline functions"
msgstr ""

#: ../../peps/pep-0620.rst:307
msgid "Converting macros to static inline functions has multiple advantages:"
msgstr ""

#: ../../peps/pep-0620.rst:309
msgid "Functions have well defined parameter types and return type."
msgstr ""

#: ../../peps/pep-0620.rst:310
msgid "Functions can use variables with a well defined scope (the function)."
msgstr ""

#: ../../peps/pep-0620.rst:311
msgid ""
"Debugger can be put breakpoints on functions and profilers can display "
"the function name in the call stacks. In most cases, it works even when a"
" static inline function is inlined."
msgstr ""

#: ../../peps/pep-0620.rst:314
msgid ""
"Functions don't have `macros pitfalls <https://gcc.gnu.org/onlinedocs/cpp"
"/Macro-Pitfalls.html>`_."
msgstr ""

#: ../../peps/pep-0620.rst:317
msgid ""
"Converting macros to static inline functions should only impact very few "
"C extensions that use macros in unusual ways."
msgstr ""

#: ../../peps/pep-0620.rst:320
msgid ""
"For backward compatibility, functions must continue to accept any type, "
"not only ``PyObject*``, to avoid compiler warnings, since most macros "
"cast their parameters to ``PyObject*``."
msgstr ""

#: ../../peps/pep-0620.rst:324
msgid ""
"Python 3.6 requires C compilers to support static inline functions: the "
":pep:`7` requires a subset of C99."
msgstr ""

#: ../../peps/pep-0620.rst:329
msgid "Macros converted to static inline functions in Python 3.8:"
msgstr ""

#: ../../peps/pep-0620.rst:331
msgid "``Py_INCREF()``, ``Py_DECREF()``"
msgstr ""

#: ../../peps/pep-0620.rst:332
msgid "``Py_XINCREF()``, ``Py_XDECREF()``"
msgstr ""

#: ../../peps/pep-0620.rst:333 ../../peps/pep-0620.rst:340
msgid "``PyObject_INIT()``, ``PyObject_INIT_VAR()``"
msgstr ""

#: ../../peps/pep-0620.rst:334
msgid "``_PyObject_GC_TRACK()``, ``_PyObject_GC_UNTRACK()``, ``_Py_Dealloc()``"
msgstr ""

#: ../../peps/pep-0620.rst:336
msgid "Macros converted to regular functions in Python 3.9:"
msgstr ""

#: ../../peps/pep-0620.rst:338
msgid ""
"``Py_EnterRecursiveCall()``, ``Py_LeaveRecursiveCall()`` (added to the "
"limited C API)"
msgstr ""

#: ../../peps/pep-0620.rst:341
msgid "``PyObject_GET_WEAKREFS_LISTPTR()``"
msgstr ""

#: ../../peps/pep-0620.rst:342
msgid "``PyObject_CheckBuffer()``"
msgstr ""

#: ../../peps/pep-0620.rst:343
msgid "``PyIndex_Check()``"
msgstr ""

#: ../../peps/pep-0620.rst:344
msgid "``PyObject_IS_GC()``"
msgstr ""

#: ../../peps/pep-0620.rst:345
msgid ""
"``PyObject_NEW()`` (alias to ``PyObject_New()``), ``PyObject_NEW_VAR()`` "
"(alias to ``PyObject_NewVar()``)"
msgstr ""

#: ../../peps/pep-0620.rst:347
msgid "``PyType_HasFeature()`` (always call ``PyType_GetFlags()``)"
msgstr ""

#: ../../peps/pep-0620.rst:348
msgid ""
"``Py_TRASHCAN_BEGIN_CONDITION()`` and ``Py_TRASHCAN_END()`` macros now "
"call functions which hide implementation details, rather than accessing "
"directly members of the ``PyThreadState`` structure."
msgstr ""

#: ../../peps/pep-0620.rst:353
msgid "Make structures opaque"
msgstr ""

#: ../../peps/pep-0620.rst:355
msgid "The following structures of the C API become opaque:"
msgstr ""

#: ../../peps/pep-0620.rst:357
msgid "``PyInterpreterState``"
msgstr ""

#: ../../peps/pep-0620.rst:358
msgid "``PyThreadState``"
msgstr ""

#: ../../peps/pep-0620.rst:359
msgid "``PyGC_Head``"
msgstr ""

#: ../../peps/pep-0620.rst:360 ../../peps/pep-0620.rst:362
msgid "``PyTypeObject``"
msgstr ""

#: ../../peps/pep-0620.rst:361
msgid "``PyObject`` and ``PyVarObject``"
msgstr ""

#: ../../peps/pep-0620.rst:363
msgid "All types which inherit from ``PyObject`` or ``PyVarObject``"
msgstr ""

#: ../../peps/pep-0620.rst:365
msgid ""
"C extensions must use getter or setter functions to get or set structure "
"members. For example, ``tuple->ob_item[0]`` must be replaced with "
"``PyTuple_GET_ITEM(tuple, 0)``."
msgstr ""

#: ../../peps/pep-0620.rst:369
msgid ""
"To be able to move away from reference counting, ``PyObject`` must become"
" opaque. Currently, the reference counter ``PyObject.ob_refcnt`` is "
"exposed in the C API. All structures must become opaque, since they "
"\"inherit\" from PyObject. For, ``PyFloatObject`` inherits from "
"``PyObject``::"
msgstr ""

#: ../../peps/pep-0620.rst:380
msgid ""
"Making ``PyObject`` fully opaque requires converting ``Py_INCREF()`` and "
"``Py_DECREF()`` macros to function calls. This change has an impact on "
"performance. It is likely to be one of the very last changes when making "
"structures opaque."
msgstr ""

#: ../../peps/pep-0620.rst:385
msgid ""
"Making ``PyTypeObject`` structure opaque breaks C extensions declaring "
"types statically (e.g. ``static PyTypeObject MyType = {...};``). C "
"extensions must use ``PyType_FromSpec()`` to allocate types on the heap "
"instead. Using heap types has other advantages like being compatible with"
" subinterpreters. Combined with :pep:`489` \"Multi-phase extension module"
" initialization\", it makes a C extension behavior closer to a Python "
"module, like allowing to create more than one module instance."
msgstr ""

#: ../../peps/pep-0620.rst:393
msgid ""
"Making ``PyThreadState`` structure opaque requires adding getter and "
"setter functions for members used by C extensions."
msgstr ""

#: ../../peps/pep-0620.rst:396
msgid "**STATUS**: In Progress (started in Python 3.8)"
msgstr ""

#: ../../peps/pep-0620.rst:398
msgid ""
"The ``PyInterpreterState`` structure was made opaque in Python 3.8 "
"(`bpo-35886 <https://bugs.python.org/issue35886>`_) and the ``PyGC_Head``"
" structure (`bpo-40241 <https://bugs.python.org/issue40241>`_) was made "
"opaque in Python 3.9."
msgstr ""

#: ../../peps/pep-0620.rst:403
msgid ""
"Issues tracking the work to prepare the C API to make following "
"structures opaque:"
msgstr ""

#: ../../peps/pep-0620.rst:406
msgid "``PyObject``: `bpo-39573 <https://bugs.python.org/issue39573>`_"
msgstr ""

#: ../../peps/pep-0620.rst:407
msgid "``PyTypeObject``: `bpo-40170 <https://bugs.python.org/issue40170>`_"
msgstr ""

#: ../../peps/pep-0620.rst:408
msgid "``PyFrameObject``: `bpo-40421 <https://bugs.python.org/issue40421>`_"
msgstr ""

#: ../../peps/pep-0620.rst:410
msgid ""
"Python 3.9 adds ``PyFrame_GetCode()`` and ``PyFrame_GetBack()`` getter "
"functions, and moves ``PyFrame_GetLineNumber`` to the limited C API."
msgstr ""

#: ../../peps/pep-0620.rst:414
msgid "``PyThreadState``: `bpo-39947 <https://bugs.python.org/issue39947>`_"
msgstr ""

#: ../../peps/pep-0620.rst:416
msgid ""
"Python 3.9 adds 3 getter functions: ``PyThreadState_GetFrame()``, "
"``PyThreadState_GetID()``, ``PyThreadState_GetInterpreter()``."
msgstr ""

#: ../../peps/pep-0620.rst:420
msgid "Disallow using Py_TYPE() as l-value"
msgstr ""

#: ../../peps/pep-0620.rst:422
msgid ""
"The ``Py_TYPE()`` function gets an object type, its ``PyObject.ob_type`` "
"member. It is implemented as a macro which can be used as an l-value to "
"set the type: ``Py_TYPE(obj) = new_type``. This code relies on the "
"assumption that ``PyObject.ob_type`` can be modified directly. It "
"prevents making the ``PyObject`` structure opaque."
msgstr ""

#: ../../peps/pep-0620.rst:428
msgid ""
"New setter functions ``Py_SET_TYPE()``, ``Py_SET_REFCNT()`` and "
"``Py_SET_SIZE()`` are added and must be used instead."
msgstr ""

#: ../../peps/pep-0620.rst:431
msgid ""
"The ``Py_TYPE()``, ``Py_REFCNT()`` and ``Py_SIZE()`` macros must be "
"converted to static inline functions which can not be used as l-value."
msgstr ""

#: ../../peps/pep-0620.rst:434
msgid "For example, the ``Py_TYPE()`` macro::"
msgstr ""

#: ../../peps/pep-0620.rst:438
msgid "becomes::"
msgstr ""

#: ../../peps/pep-0620.rst:448
msgid "**STATUS**: Completed (in Python 3.10)"
msgstr ""

#: ../../peps/pep-0620.rst:450
msgid ""
"New functions ``Py_SET_TYPE()``, ``Py_SET_REFCNT()`` and "
"``Py_SET_SIZE()`` were added to Python 3.9."
msgstr ""

#: ../../peps/pep-0620.rst:453
msgid ""
"In Python 3.10, ``Py_TYPE()``, ``Py_REFCNT()`` and ``Py_SIZE()`` can no "
"longer be used as l-value and the new setter functions must be used "
"instead."
msgstr ""

#: ../../peps/pep-0620.rst:458
msgid "New C API functions must not return borrowed references"
msgstr ""

#: ../../peps/pep-0620.rst:460
msgid ""
"When a function returns a borrowed reference, Python cannot track when "
"the caller stops using this reference."
msgstr ""

#: ../../peps/pep-0620.rst:463
msgid ""
"For example, if the Python ``list`` type is specialized for small "
"integers, store directly \"raw\" numbers rather than Python objects, "
"``PyList_GetItem()`` has to create a temporary Python object. The problem"
" is to decide when it is safe to delete the temporary object."
msgstr ""

#: ../../peps/pep-0620.rst:468
msgid ""
"The general guidelines is to avoid returning borrowed references for new "
"C API functions."
msgstr ""

#: ../../peps/pep-0620.rst:471
msgid ""
"No function returning borrowed references is scheduled for removal by "
"this PEP."
msgstr ""

#: ../../peps/pep-0620.rst:476
msgid ""
"In Python 3.9, new C API functions returning Python objects only return "
"strong references:"
msgstr ""

#: ../../peps/pep-0620.rst:479
msgid "``PyFrame_GetBack()``"
msgstr ""

#: ../../peps/pep-0620.rst:480
msgid "``PyFrame_GetCode()``"
msgstr ""

#: ../../peps/pep-0620.rst:481
msgid "``PyObject_CallNoArgs()``"
msgstr ""

#: ../../peps/pep-0620.rst:482
msgid "``PyObject_CallOneArg()``"
msgstr ""

#: ../../peps/pep-0620.rst:483
msgid "``PyThreadState_GetFrame()``"
msgstr ""

#: ../../peps/pep-0620.rst:486
msgid "Avoid functions returning PyObject**"
msgstr ""

#: ../../peps/pep-0620.rst:488
msgid ""
"The ``PySequence_Fast_ITEMS()`` function gives a direct access to an "
"array of ``PyObject*`` objects. The function is deprecated in favor of "
"``PyTuple_GetItem()`` and ``PyList_GetItem()``."
msgstr ""

#: ../../peps/pep-0620.rst:492
msgid ""
"``PyTuple_GET_ITEM()`` can be abused to access directly the "
"``PyTupleObject.ob_item`` member::"
msgstr ""

#: ../../peps/pep-0620.rst:497
msgid ""
"The ``PyTuple_GET_ITEM()`` and ``PyList_GET_ITEM()`` macros are converted"
" to static inline functions to disallow that."
msgstr ""

#: ../../peps/pep-0620.rst:500
msgid "**STATUS**: Not Started"
msgstr ""

#: ../../peps/pep-0620.rst:503
msgid "New pythoncapi_compat.h header file"
msgstr ""

#: ../../peps/pep-0620.rst:505
msgid ""
"Making structures opaque requires modifying C extensions to use getter "
"and setter functions. The practical issue is how to keep support for old "
"Python versions which don't have these functions."
msgstr ""

#: ../../peps/pep-0620.rst:509
msgid ""
"For example, in Python 3.10, it is no longer possible to use "
"``Py_TYPE()`` as an l-value. The new ``Py_SET_TYPE()`` function must be "
"used instead::"
msgstr ""

#: ../../peps/pep-0620.rst:519
msgid ""
"This code may ring a bell to developers who ported their Python code base"
" from Python 2 to Python 3."
msgstr ""

#: ../../peps/pep-0620.rst:522
msgid ""
"Python will distribute a new ``pythoncapi_compat.h`` header file which "
"provides new C API functions to old Python versions. Example::"
msgstr ""

#: ../../peps/pep-0620.rst:534
msgid ""
"Using this header file, ``Py_SET_TYPE()`` can be used on old Python "
"versions as well."
msgstr ""

#: ../../peps/pep-0620.rst:537
msgid ""
"Developers can copy this file in their project, or even to only "
"copy/paste the few functions needed by their C extension."
msgstr ""

#: ../../peps/pep-0620.rst:540
msgid "**STATUS**: In Progress (implemented but not distributed by CPython yet)"
msgstr ""

#: ../../peps/pep-0620.rst:542
msgid ""
"The ``pythoncapi_compat.h`` header file is currently developed at: "
"https://github.com/pythoncapi/pythoncapi_compat"
msgstr ""

#: ../../peps/pep-0620.rst:546
msgid "Process to reduce the number of broken C extensions"
msgstr ""

#: ../../peps/pep-0620.rst:548
msgid ""
"Process to reduce the number of broken C extensions when introducing C "
"API incompatible changes listed in this PEP:"
msgstr ""

#: ../../peps/pep-0620.rst:551
msgid ""
"Estimate how many popular C extensions are affected by the incompatible "
"change."
msgstr ""

#: ../../peps/pep-0620.rst:553
msgid ""
"Coordinate with maintainers of broken C extensions to prepare their code "
"for the future incompatible change."
msgstr ""

#: ../../peps/pep-0620.rst:555
msgid ""
"Introduce the incompatible changes in Python. The documentation must "
"explain how to port existing code. It is recommended to merge such "
"changes at the beginning of a development cycle to have more time for "
"tests."
msgstr ""

#: ../../peps/pep-0620.rst:559
msgid ""
"Changes which are the most likely to break a large number of C extensions"
" should be announced on the capi-sig mailing list to notify C extensions "
"maintainers to prepare their project for the next Python."
msgstr ""

#: ../../peps/pep-0620.rst:562
msgid ""
"If the change breaks too many projects, reverting the change should be "
"discussed, taking in account the number of broken packages, their "
"importance in the Python community, and the importance of the change."
msgstr ""

#: ../../peps/pep-0620.rst:566
msgid ""
"The coordination usually means reporting issues to the projects, or even "
"proposing changes. It does not require waiting for a new release "
"including fixes for every broken project."
msgstr ""

#: ../../peps/pep-0620.rst:570
msgid ""
"Since more and more C extensions are written using Cython, rather "
"directly using the C API, it is important to ensure that Cython is "
"prepared in advance for incompatible changes. It gives more time for C "
"extension maintainers to release a new version with code generated with "
"the updated Cython (for C extensions distributing the code generated by "
"Cython)."
msgstr ""

#: ../../peps/pep-0620.rst:577
msgid ""
"Future incompatible changes can be announced by deprecating a function in"
" the documentation and by annotating the function with "
"``Py_DEPRECATED()``. But making a structure opaque and preventing the "
"usage of a macro as l-value cannot be deprecated with "
"``Py_DEPRECATED()``."
msgstr ""

#: ../../peps/pep-0620.rst:583
msgid ""
"The important part is coordination and finding a balance between CPython "
"evolutions and backward compatibility. For example, breaking a random, "
"old, obscure and unmaintained C extension on PyPI is less severe than "
"breaking numpy."
msgstr ""

#: ../../peps/pep-0620.rst:588
msgid ""
"If a change is reverted, we move back to the coordination step to better "
"prepare the change. Once more C extensions are ready, the incompatible "
"change can be reconsidered."
msgstr ""

#: ../../peps/pep-0620.rst:594
msgid "Version History"
msgstr ""

#: ../../peps/pep-0620.rst:596
msgid ""
"Version 3, June 2020: PEP rewritten from scratch. Python now distributes "
"a new ``pythoncapi_compat.h`` header and a process is defined to reduce "
"the number of broken C extensions when introducing C API incompatible "
"changes listed in this PEP."
msgstr ""

#: ../../peps/pep-0620.rst:600
msgid ""
"Version 2, April 2020: `PEP: Modify the C API to hide implementation "
"details <https://mail.python.org/archives/list/python-"
"dev@python.org/thread/HKM774XKU7DPJNLUTYHUB5U6VR6EQMJF/#TKHNENOXP6H34E73XGFOL2KKXSM4Z6T2>`_."
msgstr ""

#: ../../peps/pep-0620.rst:603
msgid ""
"Version 1, July 2017: `PEP: Hide implementation details in the C API "
"<https://mail.python.org/archives/list/python-"
"ideas@python.org/thread/6XATDGWK4VBUQPRHCRLKQECTJIPBVNJQ/#HFBGCWVLSM47JEP6SO67MRFT7Y3EOC44>`_"
" sent to python-ideas"
msgstr ""

#: ../../peps/pep-0620.rst:610
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0620.rst:612
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid "Draft"
#~ msgstr ""

