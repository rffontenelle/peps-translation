# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-14 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../peps/peps/pep-0101.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/peps/pep-0101.rst:3
msgid "Barry Warsaw <barry@python.org>, Guido van Rossum <guido@python.org>"
msgstr ""

#: ../../peps/peps/pep-0101.rst
msgid "Status"
msgstr "Status"

#: ../../peps/peps/pep-0101.rst:4
msgid "Active"
msgstr "Ativa"

#: ../../peps/peps/pep-0101.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/peps/pep-0101.rst:5
msgid "Informational"
msgstr ""

#: ../../peps/peps/pep-0101.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/peps/pep-0101.rst:6
msgid "22-Aug-2001"
msgstr ""

#: ../../peps/peps/pep-0101.rst
msgid "Post-History"
msgstr "P√≥s-hist√≥ria"

#: ../../peps/peps/pep-0101.rst
msgid "Replaces"
msgstr ""

#: ../../peps/peps/pep-0101.rst:8
msgid "102"
msgstr ""

#: ../../peps/peps/pep-0101.rst:13
msgid "Abstract"
msgstr ""

#: ../../peps/peps/pep-0101.rst:15
msgid ""
"Making a Python release is a thrilling and crazy process.  You've heard the "
"expression \"herding cats\"?  Imagine trying to also saddle those purring "
"little creatures up, and ride them into town, with some of their buddies "
"firmly attached to your bare back, anchored by newly sharpened claws.  At "
"least they're cute, you remind yourself."
msgstr ""

#: ../../peps/peps/pep-0101.rst:21
msgid ""
"Actually, no, that's a slight exaggeration üòâ  The Python release process "
"has steadily improved over the years and now, with the help of our amazing "
"community, is really not too difficult.  This PEP attempts to collect, in "
"one place, all the steps needed to make a Python release. Most of the steps "
"are now automated or guided by automation, so manually following this list "
"is no longer necessary."
msgstr ""

#: ../../peps/peps/pep-0101.rst:29
msgid "Things You'll Need"
msgstr ""

#: ../../peps/peps/pep-0101.rst:31
msgid ""
"As a release manager there are a lot of resources you'll need to access. "
"Here's a hopefully-complete list."
msgstr ""

#: ../../peps/peps/pep-0101.rst:34
msgid "A GPG key."
msgstr ""

#: ../../peps/peps/pep-0101.rst:36
msgid ""
"Python releases are digitally signed with GPG; you'll need a key, which "
"hopefully will be on the \"web of trust\" with at least one of the other "
"release managers."
msgstr ""

#: ../../peps/peps/pep-0101.rst:40
msgid "A bunch of software:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:42
msgid ""
"A checkout of the `python/release-tools`_ repo. It contains a `requirements."
"txt <https://github.com/python/release-tools/blob/master/requirements.txt>`_ "
"file that you need to install dependencies from first. Afterwards, you can "
"fire up scripts in the repo, covered later in this PEP."
msgstr ""

#: ../../peps/peps/pep-0101.rst:49
msgid ""
"`blurb <https://github.com/python/blurb>`__, the `Misc/NEWS <https://github."
"com/python/cpython/tree/main/Misc/NEWS.d>`_ management tool. You can pip "
"install it."
msgstr ""

#: ../../peps/peps/pep-0101.rst:53
msgid ""
"A fairly complete installation of a recent TeX distribution, such as "
"texlive.  You need that for building the PDF docs."
msgstr ""

#: ../../peps/peps/pep-0101.rst:56
msgid "Access to servers where you will upload files:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:58
msgid "``downloads.nyc1.psf.io``, the server that hosts download files; and"
msgstr ""

#: ../../peps/peps/pep-0101.rst:59
msgid "``docs.nyc1.psf.io``, the server that hosts the documentation."
msgstr ""

#: ../../peps/peps/pep-0101.rst:61
msgid "Administrator access to `python/cpython`_."
msgstr ""

#: ../../peps/peps/pep-0101.rst:63
msgid ""
"An administrator account on `www.python.org`_, including an \"API key\"."
msgstr ""

#: ../../peps/peps/pep-0101.rst:65
msgid "Write access to the `python/peps`_ repository."
msgstr ""

#: ../../peps/peps/pep-0101.rst:67
msgid ""
"If you're reading this, you probably already have this--the first task of "
"any release manager is to draft the release schedule.  But in case you just "
"signed up... sucker!  I mean, uh, congratulations!"
msgstr ""

#: ../../peps/peps/pep-0101.rst:71
msgid ""
"Posting access to `blog.python.org`_, a Blogger-hosted weblog. The RSS feed "
"from this blog is used for the 'Python News' section on `www.python.org`_."
msgstr ""

#: ../../peps/peps/pep-0101.rst:75
msgid ""
"A subscription to the super secret release manager mailing list, which may "
"or may not be called ``python-cabal``. Bug Barry about this."
msgstr ""

#: ../../peps/peps/pep-0101.rst:78
msgid ""
"A ``@python.org`` email address that you will use to sign your releases "
"with. Ask ``postmaster@`` for an address; you can either get a full account, "
"or a redirecting alias + SMTP credentials to send email from this address "
"that looks legit to major email providers."
msgstr ""

#: ../../peps/peps/pep-0101.rst:84
msgid "Types of Releases"
msgstr ""

#: ../../peps/peps/pep-0101.rst:86
msgid ""
"There are several types of releases you will need to make.  These include:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:88
msgid "``alpha``"
msgstr ""

#: ../../peps/peps/pep-0101.rst:89
msgid "``begin beta``, also known as ``beta 1``, also known as ``new branch``"
msgstr ""

#: ../../peps/peps/pep-0101.rst:90
msgid "``beta 2+``"
msgstr ""

#: ../../peps/peps/pep-0101.rst:91
msgid "``release candidate 1``"
msgstr ""

#: ../../peps/peps/pep-0101.rst:92
msgid "``release candidate 2+``"
msgstr ""

#: ../../peps/peps/pep-0101.rst:93
msgid "``final``"
msgstr ""

#: ../../peps/peps/pep-0101.rst:94
msgid "``new branch``"
msgstr ""

#: ../../peps/peps/pep-0101.rst:95
msgid "``begin bugfix mode``"
msgstr ""

#: ../../peps/peps/pep-0101.rst:96
msgid "``begin security-only mode``"
msgstr ""

#: ../../peps/peps/pep-0101.rst:97
msgid "``end-of-life``"
msgstr ""

#: ../../peps/peps/pep-0101.rst:99
msgid ""
"Some of these release types actually involve more than one release branch. "
"In particular, a **new branch** is that point in the release cycle when a "
"new feature release cycle begins.  Under the current organization of the "
"CPython Git repository, the *main* branch is always the target for new "
"features.  At some point in the release cycle of the next feature release, a "
"**new branch** release is made which creates a new separate branch for "
"stabilization and later maintenance of the current in-progress feature "
"release (``3.n.0``) and the *main* branch is modified to build a new version "
"(which will eventually be released as ``3.n+1.0``). While the **new branch** "
"release step could occur at one of several points in the release cycle, "
"current practice is for it to occur at feature code cutoff for the release "
"which is scheduled for the first beta release."
msgstr ""

#: ../../peps/peps/pep-0101.rst:112
msgid ""
"In the descriptions that follow, steps specific to release types are labeled "
"accordingly, for now, **new branch** and **final**."
msgstr ""

#: ../../peps/peps/pep-0101.rst:116
msgid "How To Make A Release"
msgstr ""

#: ../../peps/peps/pep-0101.rst:118
msgid ""
"Here are the steps taken to make a Python release.  Some steps are more "
"fuzzy than others because there's little that can be automated (e.g. writing "
"the NEWS entries).  Where a step is usually performed by An Expert, the role "
"of that expert is given.  Otherwise, assume the step is done by the Release "
"Manager (RM), the designated person performing the release.  The roles and "
"their current experts are:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:125
msgid "RM = Release Manager"
msgstr ""

#: ../../peps/peps/pep-0101.rst:127
msgid "Thomas Wouters <thomas@python.org> (NL)"
msgstr ""

#: ../../peps/peps/pep-0101.rst:128
msgid "Pablo Galindo Salgado <pablogsal@python.org> (UK)"
msgstr ""

#: ../../peps/peps/pep-0101.rst:129
msgid "≈Åukasz Langa <lukasz@python.org> (PL)"
msgstr ""

#: ../../peps/peps/pep-0101.rst:131
msgid "WE = Windows - Steve Dower <steve.dower@python.org>"
msgstr ""

#: ../../peps/peps/pep-0101.rst:132
msgid "ME = Mac - Ned Deily <nad@python.org> (US)"
msgstr ""

#: ../../peps/peps/pep-0101.rst:133
msgid "DE = Docs - Julien Palard <julien@python.org> (Central Europe)"
msgstr ""

#: ../../peps/peps/pep-0101.rst:135
msgid ""
"It is highly recommended that the RM contact the Experts the day before the "
"release.  Because the world is round and everyone lives in different "
"timezones, the RM must ensure that the release tag is created in enough time "
"for the Experts to cut binary releases."
msgstr ""

#: ../../peps/peps/pep-0101.rst:140
msgid ""
"You should not make the release public (by updating the website and sending "
"announcements) before all experts have updated their bits. In rare cases "
"where the expert for Windows or Mac is MIA, you may add a message "
"\"(Platform) binaries will be provided shortly\" and proceed."
msgstr ""

#: ../../peps/peps/pep-0101.rst:145
msgid ""
"As much as possible, the release steps are automated and guided by the "
"release script, which is available in a separate repository: `python/release-"
"tools`_."
msgstr ""

#: ../../peps/peps/pep-0101.rst:149
msgid ""
"We use the following conventions in the examples below.  Where a release "
"number is given, it is of the form ``3.X.YaN``, e.g. 3.13.0a3 for Python "
"3.13.0 alpha 3, where \"a\" == alpha, \"b\" == beta, \"rc\" == release "
"candidate."
msgstr ""

#: ../../peps/peps/pep-0101.rst:153
msgid ""
"Release tags are named ``v3.X.YaN``.  The branch name for minor release "
"maintenance branches is ``3.X``."
msgstr ""

#: ../../peps/peps/pep-0101.rst:156
msgid ""
"This helps by performing several automatic editing steps, and guides you to "
"perform some manual editing steps."
msgstr ""

#: ../../peps/peps/pep-0101.rst:159
msgid ""
"Log into Discord and join the Python Core Devs server. Ask Thomas or ≈Åukasz "
"for an invite."
msgstr ""

#: ../../peps/peps/pep-0101.rst:162
msgid ""
"You probably need to coordinate with other people around the world. This "
"communication channel is where we've arranged to meet."
msgstr ""

#: ../../peps/peps/pep-0101.rst:165
msgid "Check to see if there are any showstopper bugs."
msgstr ""

#: ../../peps/peps/pep-0101.rst:167
msgid ""
"Go to https://github.com/python/cpython/issues and look for any open bugs "
"that can block this release.  You're looking at two relevant labels:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:170
msgid "`release-blocker`_"
msgstr ""

#: ../../peps/peps/pep-0101.rst:171
msgid ""
"Stops the release dead in its tracks.  You may not make any release with any "
"open release blocker bugs."
msgstr ""

#: ../../peps/peps/pep-0101.rst:174
msgid "`deferred-blocker`_"
msgstr ""

#: ../../peps/peps/pep-0101.rst:175
msgid ""
"Doesn't block this release, but it will block a future release.  You may not "
"make a final or candidate release with any open deferred blocker bugs."
msgstr ""

#: ../../peps/peps/pep-0101.rst:180
msgid ""
"Review the release blockers and either resolve them, bump them down to "
"deferred, or stop the release and ask for community assistance.  If you're "
"making a final or candidate release, do the same with any open deferred."
msgstr ""

#: ../../peps/peps/pep-0101.rst:185
msgid "Check the stable buildbots."
msgstr ""

#: ../../peps/peps/pep-0101.rst:187
msgid "Go to https://buildbot.python.org/all/#/release_status"
msgstr ""

#: ../../peps/peps/pep-0101.rst:189
msgid ""
"Look at the buildbots for the release you're making.  Ignore any that are "
"offline (or inform the community so they can be restarted).  If what remains "
"are (mostly) green buildbots, you're good to go.  If you have non-offline "
"red buildbots, you may want to hold up the release until they are fixed.  "
"Review the problems and use your judgement, taking into account whether you "
"are making an alpha, beta, or final release."
msgstr ""

#: ../../peps/peps/pep-0101.rst:197
msgid "Make a release clone."
msgstr ""

#: ../../peps/peps/pep-0101.rst:199
msgid ""
"On a fork of the CPython repository on GitHub, create a release branch "
"within it (called the \"release clone\" from now on).  You can use the same "
"GitHub fork you use for CPython development.  Using the standard setup "
"recommended in the `Python Developer's Guide <https://devguide.python.org/"
">`__, your fork would be referred to as ``origin`` and the standard CPython "
"repo as ``upstream``.  You will use the branch on your fork to do the "
"release engineering work, including tagging the release, and you will use it "
"to share with the other experts for making the binaries."
msgstr ""

#: ../../peps/peps/pep-0101.rst:209
msgid ""
"For a **final** or **release candidate 2+** release, if you are going to "
"cherry-pick a subset of changes for the next rc or final from all those "
"merged since the last rc, you should create a release engineering branch "
"starting from the most recent release candidate tag, i.e. ``v3.8.0rc1``. You "
"will then cherry-pick changes from the standard release branch as necessary "
"into the release engineering branch and then proceed as usual.  If you are "
"going to take all of the changes since the previous rc, you can proceed as "
"normal."
msgstr ""

#: ../../peps/peps/pep-0101.rst:218
msgid ""
"Make sure the current branch of your release clone is the branch you want to "
"release from (``git status``)."
msgstr ""

#: ../../peps/peps/pep-0101.rst:221
msgid ""
"Run ``blurb release <version>`` specifying the version number (e.g. ``blurb "
"release 3.4.7rc1``).  This merges all the recent news blurbs into a single "
"file marked with this release's version number."
msgstr ""

#: ../../peps/peps/pep-0101.rst:225
msgid "Regenerate ``Lib/pydoc-topics.py``."
msgstr ""

#: ../../peps/peps/pep-0101.rst:227
msgid "While still in the ``Doc`` directory, run::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:232
msgid ""
"Commit your changes to ``pydoc_topics.py`` (and any fixes you made in the "
"docs)."
msgstr ""

#: ../../peps/peps/pep-0101.rst:235
msgid ""
"Consider running ``autoconf`` using the currently accepted standard version "
"in case ``configure`` or other Autoconf-generated files were last committed "
"with a newer or older version and may contain spurious or harmful "
"differences.  Currently, Autoconf 2.71 is our de facto standard. if there "
"are differences, commit them."
msgstr ""

#: ../../peps/peps/pep-0101.rst:241
msgid ""
"Make sure the ``SOURCE_URI`` in ``Doc/tools/extensions/pyspecific.py`` "
"points to the right branch in the Git repository (``main`` or ``3.X``). For "
"a **new branch** release, change the branch in the file from ``main`` to the "
"new release branch you are about to create (``3.X``)."
msgstr ""

#: ../../peps/peps/pep-0101.rst:246
msgid "Bump version numbers via the release script::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:250
msgid ""
"Reminder: ``X``, ``Y``, and ``N`` should be integers. ``a`` should be one of "
"``a``, ``b``, or ``rc`` (e.g. ``3.4.3rc1``). For **final** releases omit the "
"``aN`` (``3.4.3``).  For the first release of a new version ``Y`` should be "
"``0`` (``3.6.0``)."
msgstr ""

#: ../../peps/peps/pep-0101.rst:255
msgid ""
"This automates updating various release numbers, but you will have to modify "
"a few files manually.  If your ``$EDITOR`` environment variable is set up "
"correctly, ``release.py`` will pop up editor windows with the files you need "
"to edit."
msgstr ""

#: ../../peps/peps/pep-0101.rst:260
msgid "Review the blurb-generated ``Misc/NEWS`` file and edit as necessary."
msgstr ""

#: ../../peps/peps/pep-0101.rst:262
msgid ""
"Make sure all changes have been committed.  (``release.py --bump`` doesn't "
"check in its changes for you.)"
msgstr ""

#: ../../peps/peps/pep-0101.rst:265
msgid ""
"Check the years on the copyright notice.  If the last release was some time "
"last year, add the current year to the copyright notice in several places:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:269
msgid "``README``"
msgstr ""

#: ../../peps/peps/pep-0101.rst:270
msgid "``LICENSE`` (make sure to change on ``main`` and the branch)"
msgstr ""

#: ../../peps/peps/pep-0101.rst:271
msgid "``Python/getcopyright.c``"
msgstr ""

#: ../../peps/peps/pep-0101.rst:272
#, fuzzy
msgid "``Doc/copyright.rst``"
msgstr "Copyright"

#: ../../peps/peps/pep-0101.rst:273
msgid "``Doc/license.rst``"
msgstr ""

#: ../../peps/peps/pep-0101.rst:274
msgid ""
"``PC/python_ver_rc.h`` sets up the DLL version resource for Windows "
"(displayed when you right-click on the DLL and select Properties).  This "
"isn't a C include file, it's a Windows \"resource file\" include file."
msgstr ""

#: ../../peps/peps/pep-0101.rst:279
msgid ""
"For a **final** major release, edit the first paragraph of ``Doc/whatsnew/3."
"X.rst`` to include the actual release date; e.g. \"Python 2.5 was released "
"on August 1, 2003.\"  There's no need to edit this for alpha or beta "
"releases."
msgstr ""

#: ../../peps/peps/pep-0101.rst:284
msgid "Do a ``git status`` in this directory."
msgstr ""

#: ../../peps/peps/pep-0101.rst:286 ../../peps/peps/pep-0101.rst:581
msgid ""
"You should not see any files, i.e., you better not have any uncommitted "
"changes in your working directory."
msgstr ""

#: ../../peps/peps/pep-0101.rst:289
msgid "Tag the release for ``3.X.YaN``::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:293
msgid ""
"This executes a ``git tag`` command with the ``-s`` option so that the "
"release tag in the repo is signed with your GPG key.  When prompted choose "
"the private key you use for signing release tarballs etc."
msgstr ""

#: ../../peps/peps/pep-0101.rst:297
msgid ""
"For **begin security-only mode** and **end-of-life** releases, review the "
"two files and update the versions accordingly in all active branches."
msgstr ""

#: ../../peps/peps/pep-0101.rst:300
msgid ""
"Time to build the source tarball.  Use the release script to create the "
"source gzip and xz tarballs, documentation tar and zip files, and GPG "
"signature files::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:306
msgid ""
"This can take a while for **final** releases, and it will leave all the "
"tarballs and signatures in a subdirectory called ``3.X.YaN/src``, and the "
"built docs in ``3.X.YaN/docs`` (for **final** releases)."
msgstr ""

#: ../../peps/peps/pep-0101.rst:310
msgid ""
"Note that the script will sign your release with Sigstore. Use your "
"**@python.org** email address for this. See here for more information: "
"https://www.python.org/download/sigstore/."
msgstr ""

#: ../../peps/peps/pep-0101.rst:314
msgid ""
"Now you want to perform the very important step of checking the tarball you "
"just created, to make sure a completely clean, virgin build passes the "
"regression test.  Here are the best steps to take::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:331
msgid ""
"If you're feeling lucky and have some time to kill, or if you are making a "
"release candidate or **final** release, run the full test suite::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:336
msgid ""
"If the tests pass, then you can feel good that the tarball is fine.  If some "
"of the tests fail, or anything else about the freshly unpacked directory "
"looks weird, you better stop now and figure out what the problem is."
msgstr ""

#: ../../peps/peps/pep-0101.rst:341
msgid "Push your commits to the remote release branch in your GitHub fork::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:349
msgid "Notify the experts that they can start building binaries."
msgstr ""

#: ../../peps/peps/pep-0101.rst:353
msgid ""
"**STOP**: at this point you must receive the \"green light\" from other "
"experts in order to create the release.  There are things you can do while "
"you wait though, so keep reading until you hit the next STOP."
msgstr ""

#: ../../peps/peps/pep-0101.rst:357
msgid ""
"The WE generates and publishes the Windows files using the Azure Pipelines "
"build scripts in ``.azure-pipelines/windows-release/``, currently set up at "
"https://dev.azure.com/Python/cpython/_build?definitionId=21."
msgstr ""

#: ../../peps/peps/pep-0101.rst:361
msgid ""
"The build process runs in multiple stages, with each stage's output being "
"available as a downloadable artifact. The stages are:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:364
msgid ""
"Compile all variants of binaries (32-bit, 64-bit, debug/release), including "
"running profile-guided optimization."
msgstr ""

#: ../../peps/peps/pep-0101.rst:367
msgid "Compile the HTML Help file containing the Python documentation."
msgstr ""

#: ../../peps/peps/pep-0101.rst:369
msgid "Codesign all the binaries with the PSF's certificate."
msgstr ""

#: ../../peps/peps/pep-0101.rst:371
msgid ""
"Create packages for python.org, nuget.org, the embeddable distro and the "
"Windows Store."
msgstr ""

#: ../../peps/peps/pep-0101.rst:374
msgid "Perform basic verification of the installers."
msgstr ""

#: ../../peps/peps/pep-0101.rst:376
msgid ""
"Upload packages to python.org and nuget.org, purge download caches and run a "
"test download."
msgstr ""

#: ../../peps/peps/pep-0101.rst:379
msgid ""
"After the uploads are complete, the WE copies the generated hashes from the "
"build logs and emails them to the RM. The Windows Store packages are "
"uploaded manually to https://partner.microsoft.com/dashboard/home by the WE."
msgstr ""

#: ../../peps/peps/pep-0101.rst:384
msgid ""
"The ME builds Mac installer packages and uploads them to downloads.nyc1.psf."
"io together with GPG signature files."
msgstr ""

#: ../../peps/peps/pep-0101.rst:387
msgid ""
"``scp`` or ``rsync`` all the files built by ``release.py --export`` to your "
"home directory on ``downloads.nyc1.psf.io``."
msgstr ""

#: ../../peps/peps/pep-0101.rst:390
msgid ""
"While you're waiting for the files to finish uploading, you can continue on "
"with the remaining tasks.  You can also ask folks on #python-dev and/or "
"python-committers to download the files as they finish uploading so that "
"they can test them on their platforms as well."
msgstr ""

#: ../../peps/peps/pep-0101.rst:395
msgid ""
"Now you need to go to ``downloads.nyc1.psf.io`` and move all the files in "
"place over there.  Our policy is that every Python version gets its own "
"directory, but each directory contains all releases of that version."
msgstr ""

#: ../../peps/peps/pep-0101.rst:399
msgid ""
"On ``downloads.nyc1.psf.io``, ``cd /srv/www.python.org/ftp/python/3.X.Y`` "
"creating it if necessary.  Make sure it is owned by group ``downloads`` and "
"group-writable."
msgstr ""

#: ../../peps/peps/pep-0101.rst:403
msgid ""
"Move the release ``.tgz``, and ``.tar.xz`` files into place, as well as the "
"``.asc`` GPG signature files.  The Win/Mac binaries are usually put there by "
"the experts themselves."
msgstr ""

#: ../../peps/peps/pep-0101.rst:407
msgid ""
"Make sure they are world readable.  They should also be group writable, and "
"group-owned by ``downloads``."
msgstr ""

#: ../../peps/peps/pep-0101.rst:410
msgid "Use ``gpg --verify`` to make sure they got uploaded intact."
msgstr ""

#: ../../peps/peps/pep-0101.rst:412
msgid ""
"If this is a **final** or rc release: Move the doc zips and tarballs to ``/"
"srv/www.python.org/ftp/python/doc/3.X.Y[rcA]``, creating the directory if "
"necessary, and adapt the \"current\" symlink in ``.../doc`` to point to that "
"directory.  Note though that if you're releasing a maintenance release for "
"an older version, don't change the current link."
msgstr ""

#: ../../peps/peps/pep-0101.rst:418
msgid ""
"If this is a **final** or rc release (even a maintenance release), also "
"unpack the HTML docs to ``/srv/docs.python.org/release/3.X.Y[rcA]`` on "
"``docs.nyc1.psf.io``. Make sure the files are in group ``docs`` and are "
"group-writeable."
msgstr ""

#: ../../peps/peps/pep-0101.rst:423
msgid "Let the DE check if the docs are built and work all right."
msgstr ""

#: ../../peps/peps/pep-0101.rst:425
msgid ""
"Note both the documentation and downloads are behind a caching CDN. If you "
"change archives after downloading them through the website, you'll need to "
"purge the stale data in the CDN like this::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:431
msgid ""
"You should always purge the cache of the directory listing as people use "
"that to browse the release files::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:436
msgid ""
"For the extra paranoid, do a completely clean test of the release. This "
"includes downloading the tarball from `www.python.org`_."
msgstr ""

#: ../../peps/peps/pep-0101.rst:439
msgid ""
"Make sure the md5 checksums match.  Then unpack the tarball, and do a clean "
"make test::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:446
msgid ""
"To ensure that the regression test suite passes.  If not, you screwed up "
"somewhere!"
msgstr ""

#: ../../peps/peps/pep-0101.rst:451
msgid "**STOP** and confirm:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:453
msgid "Have you gotten the green light from the WE?"
msgstr ""

#: ../../peps/peps/pep-0101.rst:455
msgid "Have you gotten the green light from the ME?"
msgstr ""

#: ../../peps/peps/pep-0101.rst:457
msgid "Have you gotten the green light from the DE?"
msgstr ""

#: ../../peps/peps/pep-0101.rst:459
msgid ""
"If green, it's time to merge the release engineering branch back into the "
"main repo."
msgstr ""

#: ../../peps/peps/pep-0101.rst:462
msgid ""
"In order to push your changes to GitHub, you'll have to temporarily disable "
"branch protection for administrators.  Go to the ``Settings | Branches`` "
"page:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:466 ../../peps/peps/pep-0101.rst:617
msgid "https://github.com/python/cpython/settings/branches"
msgstr ""

#: ../../peps/peps/pep-0101.rst:468
msgid ""
"\"Edit\" the settings for the branch you're releasing on. This will load the "
"settings page for that branch. Uncheck the \"Include administrators\" box "
"and press the \"Save changes\" button at the bottom."
msgstr ""

#: ../../peps/peps/pep-0101.rst:473
msgid "Merge your release clone into the main development repo::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:495
msgid ""
"If this is a **new branch** release, i.e. first beta, now create the new "
"release branch::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:500
msgid "Do any steps needed to setup the new release branch, including:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:502
msgid ""
"In ``README.rst``, change all references from ``main`` to the new branch, in "
"particular, GitHub repo URLs."
msgstr ""

#: ../../peps/peps/pep-0101.rst:505
msgid ""
"For *all* releases, do the guided post-release steps with the release "
"script::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:510
msgid ""
"For a **final** or **release candidate 2+** release, you may need to do some "
"post-merge cleanup.  Check the top-level ``README.rst`` and ``include/"
"patchlevel.h`` files to ensure they now reflect the desired post-release "
"values for on-going development. The patchlevel should be the release tag "
"with a ``+``. Also, if you cherry-picked changes from the standard release "
"branch into the release engineering branch for this release, you will now "
"need to manually remove each blurb entry from the ``Misc/NEWS.d/next`` "
"directory that was cherry-picked into the release you are working on since "
"that blurb entry is now captured in the merged ``x.y.z.rst`` file for the "
"new release.  Otherwise, the blurb entry will appear twice in the "
"``changelog.html`` file, once under ``Python next`` and again under ``x.y."
"z``."
msgstr ""

#: ../../peps/peps/pep-0101.rst:525
msgid "Review and commit these changes::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:529
msgid ""
"If this is a **new branch** release (e.g. the first beta), update the "
"``main`` branch to start development for the following feature release.  "
"When finished, the ``main`` branch will now build Python ``X.Y+1``."
msgstr ""

#: ../../peps/peps/pep-0101.rst:534
msgid "First, set ``main`` up to be the next release, i.e. X.Y+1.a0::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:539
msgid "Edit all version references in ``README.rst``"
msgstr ""

#: ../../peps/peps/pep-0101.rst:541
msgid ""
"Move any historical \"what's new\" entries from ``Misc/NEWS`` to ``Misc/"
"HISTORY``."
msgstr ""

#: ../../peps/peps/pep-0101.rst:544
msgid ""
"Edit ``Doc/tutorial/interpreter.rst`` (two references to '[Pp]ython3x', one "
"to 'Python 3.x', also make the date in the banner consistent)."
msgstr ""

#: ../../peps/peps/pep-0101.rst:547
msgid ""
"Edit ``Doc/tutorial/stdlib.rst`` and ``Doc/tutorial/stdlib2.rst``, which "
"have each one reference to '[Pp]ython3x'."
msgstr ""

#: ../../peps/peps/pep-0101.rst:550
msgid ""
"Add a new ``whatsnew/3.x.rst`` file (with the comment near the top and the "
"toplevel sections copied from the previous file) and add it to the toctree "
"in ``whatsnew/index.rst``.  But beware that the initial ``whatsnew/3.x.rst`` "
"checkin from previous releases may be incorrect due to the initial midstream "
"change to ``blurb`` that propagates from release to release!  Help break the "
"cycle: if necessary make the following change:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:563
msgid "Update the version number in ``configure.ac`` and re-run ``autoconf``."
msgstr ""

#: ../../peps/peps/pep-0101.rst:565
msgid ""
"Make sure the ``SOURCE_URI`` in ``Doc/tools/extensions/pyspecific.py`` "
"points to ``main``."
msgstr ""

#: ../../peps/peps/pep-0101.rst:568
msgid ""
"Update the version numbers for the Windows builds which have references to "
"``python38``::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:573
msgid "Commit these changes to the main branch::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:579
msgid "Do another ``git status`` in this directory."
msgstr ""

#: ../../peps/peps/pep-0101.rst:584
msgid "Commit and push to the main repo::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:606
msgid ""
"If this is a **new branch** release, add a ``Branch protection rule`` for "
"the newly created branch (3.X).  Look at the values for the previous release "
"branch (3.X-1) and use them as a template. https://github.com/python/cpython/"
"settings/branches"
msgstr ""

#: ../../peps/peps/pep-0101.rst:611
msgid ""
"Also, add a ``needs backport to 3.X`` label to the GitHub repo. https://"
"github.com/python/cpython/labels"
msgstr ""

#: ../../peps/peps/pep-0101.rst:614
msgid ""
"You can now re-enable enforcement of branch settings against administrators "
"on GitHub.  Go back to the ``Settings | Branch`` page:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:619
msgid ""
"\"Edit\" the settings for the branch you're releasing on. Re-check the "
"\"Include administrators\" box and press the \"Save changes\" button at the "
"bottom."
msgstr ""

#: ../../peps/peps/pep-0101.rst:623
msgid ""
"Now it's time to twiddle the website.  Almost none of this is automated, "
"sorry."
msgstr ""

#: ../../peps/peps/pep-0101.rst:625
msgid ""
"To do these steps, you must have the permission to edit the website.  If you "
"don't have that, ask someone on pydotorg@python.org for the proper "
"permissions.  (Or ask Ewa, who coordinated the effort for the new website "
"with RevSys.)"
msgstr ""

#: ../../peps/peps/pep-0101.rst:630
msgid "Log in to https://www.python.org/admin"
msgstr ""

#: ../../peps/peps/pep-0101.rst:632
msgid ""
"Create a new \"release\" for the release.  Currently \"Releases\" are sorted "
"under \"Downloads\"."
msgstr ""

#: ../../peps/peps/pep-0101.rst:635
msgid ""
"The easiest thing is probably to copy fields from an existing Python release "
"\"page\", editing as you go."
msgstr ""

#: ../../peps/peps/pep-0101.rst:638
msgid ""
"You can use `Markdown <https://daringfireball.net/projects/markdown/"
"syntax>`_ or `reStructured Text <http://docutils.sourceforge.net/docs/user/"
"rst/quickref.html>`_ to describe your release.  The former is less verbose, "
"while the latter has nifty integration for things like referencing PEPs."
msgstr ""

#: ../../peps/peps/pep-0101.rst:643
msgid "Leave the \"Release page\" field on the form empty."
msgstr ""

#: ../../peps/peps/pep-0101.rst:645
msgid "\"Save\" the release."
msgstr ""

#: ../../peps/peps/pep-0101.rst:647
msgid "Populate the release with the downloadable files."
msgstr ""

#: ../../peps/peps/pep-0101.rst:649
msgid ""
"Your friend and mine, Georg Brandl, made a lovely tool called ``add-to-"
"pydotorg.py``.  You can find it in the `python/release-tools`_ repo (next to "
"``release.py``).  You run the tool on ``downloads.nyc1.psf.io``, like this::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:656
msgid ""
"This walks the correct download directory for ``<version>``, looks for files "
"marked with ``<version>``, and populates the \"Release Files\" for the "
"correct \"release\" on the web site with these files.  Note that clears the "
"\"Release Files\" for the relevant version each time it's run.  You may run "
"it from any directory you like, and you can run it as many times as you like "
"if the files happen to change. Keep a copy in your home directory on dl-"
"files and keep it fresh."
msgstr ""

#: ../../peps/peps/pep-0101.rst:666
msgid ""
"If new types of files are added to the release, someone will need to update "
"``add-to-pydotorg.py`` so it recognizes these new files. (It's best to "
"update ``add-to-pydotorg.py`` when file types are removed, too.)"
msgstr ""

#: ../../peps/peps/pep-0101.rst:671
msgid ""
"The script will also sign any remaining files that were not signed with "
"Sigstore until this point. Again, if this happens, do use your ``@python."
"org`` address for this process. More info: https://www.python.org/download/"
"sigstore/"
msgstr ""

#: ../../peps/peps/pep-0101.rst:676
msgid ""
"In case the CDN already cached a version of the Downloads page without the "
"files present, you can invalidate the cache using::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:681
msgid "If this is a **final** release:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:683
msgid ""
"Add the new version to the *Python Documentation by Version* page ``https://"
"www.python.org/doc/versions/`` and remove the current version from any 'in "
"development' section."
msgstr ""

#: ../../peps/peps/pep-0101.rst:687
msgid ""
"For 3.X.Y, edit all the previous X.Y releases' page(s) to point to the new "
"release.  This includes the content field of the ``Downloads -> Releases`` "
"entry for the release::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:694
msgid ""
"And, for those releases having separate release page entries (phasing these "
"out?), update those pages as well, e.g. ``download/releases/3.x.y``::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:701
msgid "Update the \"Current Pre-release Testing Versions web page\"."
msgstr ""

#: ../../peps/peps/pep-0101.rst:703
msgid ""
"There's a page that lists all the currently-in-testing versions of Python:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:706
msgid "https://www.python.org/download/pre-releases/"
msgstr ""

#: ../../peps/peps/pep-0101.rst:708
msgid ""
"Every time you make a release, one way or another you'll have to update this "
"page:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:711
msgid ""
"If you're releasing a version before *3.x.0*, you should add it to this "
"page, removing the previous pre-release of version *3.x* as needed."
msgstr ""

#: ../../peps/peps/pep-0101.rst:715
msgid ""
"If you're releasing *3.x.0 final*, you need to remove the pre-release "
"version from this page."
msgstr ""

#: ../../peps/peps/pep-0101.rst:718
msgid ""
"This is in the \"Pages\" category on the Django-based website, and finding "
"it through that UI is kind of a chore.  However!  If you're already logged "
"in to the admin interface (which, at this point, you should be), Django will "
"helpfully add a convenient \"Edit this page\" link to the top of the page "
"itself.  So you can simply follow the link above, click on the \"Edit this "
"page\" link, and make your changes as needed.  How convenient!"
msgstr ""

#: ../../peps/peps/pep-0101.rst:725
msgid "If appropriate, update the \"Python Documentation by Version\" page:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:727
msgid "https://www.python.org/doc/versions/"
msgstr ""

#: ../../peps/peps/pep-0101.rst:729
msgid ""
"This lists all releases of Python by version number and links to their "
"static (not built daily) online documentation.  There's a list at the bottom "
"of in-development versions, which is where all alphas/betas/RCs should go.  "
"And yes you should be able to click on the link above then press the shiny, "
"exciting \"Edit this page\" button."
msgstr ""

#: ../../peps/peps/pep-0101.rst:735
msgid ""
"Write the announcement on `discuss.python.org`_.  This is the fuzzy bit "
"because not much can be automated.  You can use an earlier announcement as a "
"template, but edit it for content!"
msgstr ""

#: ../../peps/peps/pep-0101.rst:739
msgid ""
"Once the announcement is up on Discourse, send an equivalent to the "
"following mailing lists:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:742
msgid "python-list@python.org"
msgstr ""

#: ../../peps/peps/pep-0101.rst:743
msgid "python-announce@python.org"
msgstr ""

#: ../../peps/peps/pep-0101.rst:744
msgid "python-dev@python.org"
msgstr ""

#: ../../peps/peps/pep-0101.rst:746
msgid ""
"Also post the announcement to the `Python Insider blog <http://blog.python."
"org>`_. To add a new entry, go to `your Blogger home page, here <https://www."
"blogger.com/home>`_."
msgstr ""

#: ../../peps/peps/pep-0101.rst:751
msgid "Update any release PEPs (e.g. 719) with the release dates."
msgstr ""

#: ../../peps/peps/pep-0101.rst:753
msgid "Update the labels on https://github.com/python/cpython/issues:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:755
msgid ""
"Flip all the `deferred-blocker`_ issues back to `release-blocker`_ for the "
"next release."
msgstr ""

#: ../../peps/peps/pep-0101.rst:758
msgid "Add version ``3.X+1`` as when version ``3.X`` enters alpha."
msgstr ""

#: ../../peps/peps/pep-0101.rst:760
msgid ""
"Change non-doc feature requests to version ``3.X+1`` when version ``3.X`` "
"enters beta."
msgstr ""

#: ../../peps/peps/pep-0101.rst:763
msgid ""
"Update issues from versions that your release makes unsupported to the next "
"supported version."
msgstr ""

#: ../../peps/peps/pep-0101.rst:766
msgid ""
"Review open issues, as this might find lurking showstopper bugs, besides "
"reminding people to fix the easy ones they forgot about."
msgstr ""

#: ../../peps/peps/pep-0101.rst:769
msgid "You can delete the remote release clone branch from your repo clone."
msgstr ""

#: ../../peps/peps/pep-0101.rst:771
msgid ""
"If this is a **new branch** release, you will need to ensure various pieces "
"of the development infrastructure are updated for the new branch. These "
"include:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:775
msgid ""
"Update the `issue tracker`_ for the new branch: add the new version to the "
"versions list."
msgstr ""

#: ../../peps/peps/pep-0101.rst:778
msgid ""
"Update the `devguide <https://github.com/python/devguide/blob/main/include/"
"release-cycle.json>`__ to reflect the new branches and versions."
msgstr ""

#: ../../peps/peps/pep-0101.rst:782
msgid ""
"Create a PR to update the supported releases table on the `downloads page "
"<https://www.python.org/downloads/>`__ (see `python/pythondotorg#1302 "
"<https://github.com/python/pythondotorg/issues/1302>`__)."
msgstr ""

#: ../../peps/peps/pep-0101.rst:786
msgid ""
"Ensure buildbots are defined for the new branch (contact ≈Åukasz or Zach "
"Ware)."
msgstr ""

#: ../../peps/peps/pep-0101.rst:789
msgid ""
"Ensure the various GitHub bots are updated, as needed, for the new branch, "
"in particular, make sure backporting to the new branch works (contact the "
"`core-workflow team <https://github.com/python/core-workflow/issues>`__)."
msgstr ""

#: ../../peps/peps/pep-0101.rst:794
msgid ""
"Review the most recent commit history for the ``main`` and new release "
"branches to identify and backport any merges that might have been made to "
"the ``main`` branch during the release engineering phase and that should be "
"in the release branch."
msgstr ""

#: ../../peps/peps/pep-0101.rst:799
msgid ""
"Verify that CI is working for new PRs for the ``main`` and new release "
"branches and that the release branch is properly protected (no direct "
"pushes, etc)."
msgstr ""

#: ../../peps/peps/pep-0101.rst:803
msgid ""
"Verify that the `on-line docs <https://docs.python.org/>`__ are building "
"properly (this may take up to 24 hours for a complete build on the website)."
msgstr ""

#: ../../peps/peps/pep-0101.rst:808
msgid "What Next?"
msgstr ""

#: ../../peps/peps/pep-0101.rst:810
msgid ""
"Verify!  Pretend you're a user: download the files from `www.python.org`_, "
"and make Python from it. This step is too easy to overlook, and on several "
"occasions we've had useless release files.  Once a general server problem "
"caused mysterious corruption of all files; once the source tarball got built "
"incorrectly; more than once the file upload process on SF truncated files; "
"and so on."
msgstr ""

#: ../../peps/peps/pep-0101.rst:817
msgid ""
"Rejoice.  Drink.  Be Merry.  Write a PEP like this one.  Or be like unto "
"Guido and take A Vacation."
msgstr ""

#: ../../peps/peps/pep-0101.rst:820
msgid "You've just made a Python release!"
msgstr ""

#: ../../peps/peps/pep-0101.rst:824
msgid "Moving to End-of-life"
msgstr ""

#: ../../peps/peps/pep-0101.rst:826
msgid ""
"Under current policy, a release branch normally reaches end-of-life status "
"five years after its initial release.  The policy is discussed in more "
"detail in the `Python Developer's Guide <https://devguide.python.org/"
"developer-workflow/development-cycle/index.html>`_. When end-of-life is "
"reached, there are a number of tasks that need to be performed either "
"directly by you as release manager or by ensuring someone else does them.  "
"Some of those tasks include:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:834
msgid ""
"Optionally making a final release to publish any remaining unreleased "
"changes."
msgstr ""

#: ../../peps/peps/pep-0101.rst:837
msgid ""
"Freeze the state of the release branch by creating a tag of its current HEAD "
"and then deleting the branch from the CPython repo.  The current HEAD should "
"be at or beyond the final security release for the branch::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:845
msgid ""
"If all looks good, delete the branch.  This may require the assistance of "
"someone with repo administrator privileges::"
msgstr ""

#: ../../peps/peps/pep-0101.rst:850
msgid ""
"Remove the release from the list of \"Active Python Releases\" on the "
"Downloads page.  To do this, `log in to the admin page <https://www.python."
"org/admin>`__ for python.org, navigate to Boxes, and edit the ``downloads-"
"active-releases`` entry.  Strip out the relevant paragraph of HTML for your "
"release.  (You'll probably have to do the ``curl -X PURGE`` trick to purge "
"the cache if you want to confirm you made the change correctly.)"
msgstr ""

#: ../../peps/peps/pep-0101.rst:857
msgid ""
"Add a retired notice to each release page on python.org for the retired "
"branch. For example:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:860
msgid "https://www.python.org/downloads/release/python-337/"
msgstr ""

#: ../../peps/peps/pep-0101.rst:862
msgid "https://www.python.org/downloads/release/python-336/"
msgstr ""

#: ../../peps/peps/pep-0101.rst:864
msgid ""
"In the `developer's guide <https://github.com/python/devguide/blob/main/"
"include/release-cycle.json>`__, set the branch status to end-of-life and "
"update or remove references to the branch elsewhere in the devguide."
msgstr ""

#: ../../peps/peps/pep-0101.rst:869
msgid "Retire the release from the `issue tracker`_. Tasks include:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:871
msgid "remove version label from list of versions"
msgstr ""

#: ../../peps/peps/pep-0101.rst:873
msgid "remove the ``needs backport to`` label for the retired version"
msgstr ""

#: ../../peps/peps/pep-0101.rst:875
msgid "review and dispose of open issues marked for this branch"
msgstr ""

#: ../../peps/peps/pep-0101.rst:877
msgid "Announce the branch retirement in the usual places:"
msgstr ""

#: ../../peps/peps/pep-0101.rst:879
msgid "`discuss.python.org`_"
msgstr ""

#: ../../peps/peps/pep-0101.rst:881
msgid "mailing lists (python-dev, python-list, python-announcements)"
msgstr ""

#: ../../peps/peps/pep-0101.rst:883
msgid "Python Dev blog"
msgstr ""

#: ../../peps/peps/pep-0101.rst:885
msgid "Enjoy your retirement and bask in the glow of a job well done!"
msgstr ""

#: ../../peps/peps/pep-0101.rst:889
msgid "Windows Notes"
msgstr ""

#: ../../peps/peps/pep-0101.rst:891
msgid ""
"Windows has a MSI installer, various flavors of Windows have \"special "
"limitations\", and the Windows installer also packs precompiled \"foreign\" "
"binaries (Tcl/Tk, expat, etc)."
msgstr ""

#: ../../peps/peps/pep-0101.rst:895
msgid ""
"The installer is tested as part of the Azure Pipeline. In the past, those "
"steps were performed manually. We're keeping this for posterity."
msgstr ""

#: ../../peps/peps/pep-0101.rst:898
msgid ""
"Concurrent with uploading the installer, the WE installs Python from it "
"twice: once into the default directory suggested by the installer, and later "
"into a directory with embedded spaces in its name.  For each installation, "
"the WE runs the full regression suite from a DOS box, and both with and "
"without -0. For maintenance release, the WE also tests whether upgrade "
"installations succeed."
msgstr ""

#: ../../peps/peps/pep-0101.rst:905
msgid ""
"The WE also tries *every* shortcut created under Start -> Menu -> the Python "
"group.  When trying IDLE this way, you need to verify that Help -> Python "
"Documentation works.  When trying pydoc this way (the \"Module Docs\" Start "
"menu entry), make sure the \"Start Browser\" button works, and make sure you "
"can search for a random module (like \"random\" <wink>) and then that the "
"\"go to selected\" button works."
msgstr ""

#: ../../peps/peps/pep-0101.rst:913
msgid ""
"It's amazing how much can go wrong here -- and even more amazing how often "
"last-second checkins break one of these things.  If you're \"the Windows "
"geek\", keep in mind that you're likely the only person routinely testing on "
"Windows, and that Windows is simply a mess."
msgstr ""

#: ../../peps/peps/pep-0101.rst:919
msgid ""
"Repeat the testing for each target architecture.  Try both an Admin and a "
"plain User (not Power User) account."
msgstr ""

#: ../../peps/peps/pep-0101.rst:924
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/peps/pep-0101.rst:926
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em dom√≠nio p√∫blico."
