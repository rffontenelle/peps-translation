# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-0101.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-0101.rst:5
msgid "Barry Warsaw <barry@python.org>, Guido van Rossum <guido@python.org>"
msgstr ""

#: ../../peps/pep-0101.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-0101.rst:6
msgid "Active"
msgstr "Ativa"

#: ../../peps/pep-0101.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-0101.rst:7
msgid "Informational"
msgstr ""

#: ../../peps/pep-0101.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-0101.rst:9
msgid "22-Aug-2001"
msgstr ""

#: ../../peps/pep-0101.rst
msgid "Post-History"
msgstr "P√≥s-hist√≥ria"

#: ../../peps/pep-0101.rst
msgid "Replaces"
msgstr ""

#: ../../peps/pep-0101.rst:11
msgid "102"
msgstr ""

#: ../../peps/pep-0101.rst:15
msgid "Abstract"
msgstr ""

#: ../../peps/pep-0101.rst:17
msgid ""
"Making a Python release is a thrilling and crazy process.  You've heard "
"the expression \"herding cats\"?  Imagine trying to also saddle those "
"purring little creatures up, and ride them into town, with some of their "
"buddies firmly attached to your bare back, anchored by newly sharpened "
"claws.  At least they're cute, you remind yourself."
msgstr ""

#: ../../peps/pep-0101.rst:23
msgid ""
"Actually, no, that's a slight exaggeration üòâ  The Python release process "
"has steadily improved over the years and now, with the help of our "
"amazing community, is really not too difficult.  This PEP attempts to "
"collect, in one place, all the steps needed to make a Python release. "
"Most of the steps are now automated or guided by automation, so manually "
"following this list is no longer necessary."
msgstr ""

#: ../../peps/pep-0101.rst:31
msgid "Things You'll Need"
msgstr ""

#: ../../peps/pep-0101.rst:33
msgid ""
"As a release manager there are a lot of resources you'll need to access. "
"Here's a hopefully-complete list."
msgstr ""

#: ../../peps/pep-0101.rst:36
msgid "A GPG key."
msgstr ""

#: ../../peps/pep-0101.rst:38
msgid ""
"Python releases are digitally signed with GPG; you'll need a key, which "
"hopefully will be on the \"web of trust\" with at least one of the other "
"release managers."
msgstr ""

#: ../../peps/pep-0101.rst:42
msgid "A bunch of software:"
msgstr ""

#: ../../peps/pep-0101.rst:44
msgid ""
"A checkout of the `python/release-tools <https://github.com/python"
"/release-tools/>`_ repo. It contains a ``requirements.txt`` file that you"
" need to install dependencies from first. Afterwards, you can fire up "
"scripts in the repo, covered later in this PEP."
msgstr ""

#: ../../peps/pep-0101.rst:50
msgid ""
"``blurb``, the `Misc/NEWS "
"<https://github.com/python/cpython/tree/main/Misc/NEWS.d>`_ management "
"tool. You can pip install it."
msgstr ""

#: ../../peps/pep-0101.rst:54
msgid ""
"A fairly complete installation of a recent TeX distribution, such as "
"texlive.  You need that for building the PDF docs."
msgstr ""

#: ../../peps/pep-0101.rst:57
msgid "Access to servers where you will upload files:"
msgstr ""

#: ../../peps/pep-0101.rst:59
msgid "``downloads.nyc1.psf.io``, the server that hosts download files; and"
msgstr ""

#: ../../peps/pep-0101.rst:60
msgid "``docs.nyc1.psf.io``, the server that hosts the documentation."
msgstr ""

#: ../../peps/pep-0101.rst:62
msgid "Administrator access to ``https://github.com/python/cpython``."
msgstr ""

#: ../../peps/pep-0101.rst:64
msgid "An administrator account on www.python.org, including an \"API key\"."
msgstr ""

#: ../../peps/pep-0101.rst:66
msgid "Write access to the PEP repository."
msgstr ""

#: ../../peps/pep-0101.rst:68
msgid ""
"If you're reading this, you probably already have this--the first task of"
" any release manager is to draft the release schedule.  But in case you "
"just signed up... sucker!  I mean, uh, congratulations!"
msgstr ""

#: ../../peps/pep-0101.rst:72
msgid ""
"Posting access to http://blog.python.org, a Blogger-hosted weblog. The "
"RSS feed from this blog is used for the 'Python News' section on "
"www.python.org."
msgstr ""

#: ../../peps/pep-0101.rst:76
msgid ""
"A subscription to the super secret release manager mailing list, which "
"may or may not be called ``python-cabal``. Bug Barry about this."
msgstr ""

#: ../../peps/pep-0101.rst:79
msgid ""
"A ``@python.org`` email address that you will use to sign your releases "
"with. Ask ``postmaster@`` for an address; you can either get a full "
"account, or a redirecting alias + SMTP credentials to send email from "
"this address that looks legit to major email providers."
msgstr ""

#: ../../peps/pep-0101.rst:85
msgid "Types of Releases"
msgstr ""

#: ../../peps/pep-0101.rst:87
msgid "There are several types of releases you will need to make.  These include:"
msgstr ""

#: ../../peps/pep-0101.rst:89
msgid "``alpha``"
msgstr ""

#: ../../peps/pep-0101.rst:90
msgid "``begin beta``, also known as ``beta 1``, also known as ``new branch``"
msgstr ""

#: ../../peps/pep-0101.rst:91
msgid "``beta 2+``"
msgstr ""

#: ../../peps/pep-0101.rst:92
msgid "``release candidate 1``"
msgstr ""

#: ../../peps/pep-0101.rst:93
msgid "``release candidate 2+``"
msgstr ""

#: ../../peps/pep-0101.rst:94
msgid "``final``"
msgstr ""

#: ../../peps/pep-0101.rst:95
msgid "``new branch``"
msgstr ""

#: ../../peps/pep-0101.rst:96
msgid "``begin bugfix mode``"
msgstr ""

#: ../../peps/pep-0101.rst:97
msgid "``begin security-only mode``"
msgstr ""

#: ../../peps/pep-0101.rst:98
msgid "``end-of-life``"
msgstr ""

#: ../../peps/pep-0101.rst:100
msgid ""
"Some of these release types actually involve more than one release "
"branch. In particular, a **new branch** is that point in the release "
"cycle when a new feature release cycle begins.  Under the current "
"organization of the cpython git repository, the *main* branch is always "
"the target for new features.  At some point in the release cycle of the "
"next feature release, a **new branch** release is made which creates a "
"new separate branch for stabilization and later maintenance of the "
"current in-progress feature release (``3.n.0``) and the *main* branch is "
"modified to build a new version (which will eventually be released as "
"``3.n+1.0``). While the **new branch** release step could occur at one of"
" several points in the release cycle, current practice is for it to occur"
" at feature code cutoff for the release which is scheduled for the first "
"beta release."
msgstr ""

#: ../../peps/pep-0101.rst:113
msgid ""
"In the descriptions that follow, steps specific to release types are "
"labeled accordingly, for now, **new branch** and **final**."
msgstr ""

#: ../../peps/pep-0101.rst:117
msgid "How To Make A Release"
msgstr ""

#: ../../peps/pep-0101.rst:119
msgid ""
"Here are the steps taken to make a Python release.  Some steps are more "
"fuzzy than others because there's little that can be automated (e.g. "
"writing the NEWS entries).  Where a step is usually performed by An "
"Expert, the role of that expert is given.  Otherwise, assume the step is "
"done by the Release Manager (RM), the designated person performing the "
"release.  The roles and their current experts are:"
msgstr ""

#: ../../peps/pep-0101.rst:126
msgid "RM = Release Manager"
msgstr ""

#: ../../peps/pep-0101.rst:128
msgid "Thomas Wouters <thomas@python.org> (NL)"
msgstr ""

#: ../../peps/pep-0101.rst:129
msgid "Pablo Galindo Salgado <pablogsal@python.org> (UK)"
msgstr ""

#: ../../peps/pep-0101.rst:130
msgid "≈Åukasz Langa <lukasz@python.org> (PL)"
msgstr ""

#: ../../peps/pep-0101.rst:132
msgid "WE = Windows - Steve Dower <steve.dower@python.org>"
msgstr ""

#: ../../peps/pep-0101.rst:133
msgid "ME = Mac - Ned Deily <nad@python.org> (US)"
msgstr ""

#: ../../peps/pep-0101.rst:134
msgid "DE = Docs - Julien Palard <julien@python.org> (Central Europe)"
msgstr ""

#: ../../peps/pep-0101.rst:136
msgid ""
"It is highly recommended that the RM contact the Experts the day before "
"the release.  Because the world is round and everyone lives in different "
"timezones, the RM must ensure that the release tag is created in enough "
"time for the Experts to cut binary releases."
msgstr ""

#: ../../peps/pep-0101.rst:141
msgid ""
"You should not make the release public (by updating the website and "
"sending announcements) before all experts have updated their bits. In "
"rare cases where the expert for Windows or Mac is MIA, you may add a "
"message \"(Platform) binaries will be provided shortly\" and proceed."
msgstr ""

#: ../../peps/pep-0101.rst:146
msgid ""
"As much as possible, the release steps are automated and guided by the "
"release script, which is available in a separate repository:"
msgstr ""

#: ../../peps/pep-0101.rst:149
msgid "https://github.com/python/release-tools"
msgstr ""

#: ../../peps/pep-0101.rst:151
msgid ""
"We use the following conventions in the examples below.  Where a release "
"number is given, it is of the form ``3.X.YaN``, e.g. 3.13.0a3 for Python "
"3.13.0 alpha 3, where \"a\" == alpha, \"b\" == beta, \"rc\" == release "
"candidate."
msgstr ""

#: ../../peps/pep-0101.rst:155
msgid ""
"Release tags are named ``v3.X.YaN``.  The branch name for minor release "
"maintenance branches is ``3.X``."
msgstr ""

#: ../../peps/pep-0101.rst:158
msgid ""
"This helps by performing several automatic editing steps, and guides you "
"to perform some manual editing steps."
msgstr ""

#: ../../peps/pep-0101.rst:161
msgid ""
"Log into Discord and join the Python Core Devs server. Ask Thomas or "
"≈Åukasz for an invite."
msgstr ""

#: ../../peps/pep-0101.rst:164
msgid ""
"You probably need to coordinate with other people around the world. This "
"communication channel is where we've arranged to meet."
msgstr ""

#: ../../peps/pep-0101.rst:167
msgid "Check to see if there are any showstopper bugs."
msgstr ""

#: ../../peps/pep-0101.rst:169
msgid ""
"Go to https://github.com/python/cpython/issues and look for any open bugs"
" that can block this release.  You're looking at two relevant labels:"
msgstr ""

#: ../../peps/pep-0101.rst:174
msgid "release-blocker"
msgstr ""

#: ../../peps/pep-0101.rst:173
msgid ""
"Stops the release dead in its tracks.  You may not make any release with "
"any open release blocker bugs."
msgstr ""

#: ../../peps/pep-0101.rst:180
msgid "deferred-blocker"
msgstr ""

#: ../../peps/pep-0101.rst:177
msgid ""
"Doesn't block this release, but it will block a future release.  You may "
"not make a final or candidate release with any open deferred blocker "
"bugs."
msgstr ""

#: ../../peps/pep-0101.rst:182
msgid ""
"Review the release blockers and either resolve them, bump them down to "
"deferred, or stop the release and ask for community assistance.  If "
"you're making a final or candidate release, do the same with any open "
"deferred."
msgstr ""

#: ../../peps/pep-0101.rst:187
msgid "Check the stable buildbots."
msgstr ""

#: ../../peps/pep-0101.rst:189
msgid "Go to https://buildbot.python.org/all/#/release_status"
msgstr ""

#: ../../peps/pep-0101.rst:191
msgid ""
"Look at the buildbots for the release you're making.  Ignore any that are"
" offline (or inform the community so they can be restarted).  If what "
"remains are (mostly) green buildbots, you're good to go.  If you have "
"non-offline red buildbots, you may want to hold up the release until they"
" are fixed.  Review the problems and use your judgement, taking into "
"account whether you are making an alpha, beta, or final release."
msgstr ""

#: ../../peps/pep-0101.rst:199
msgid "Make a release clone."
msgstr ""

#: ../../peps/pep-0101.rst:201
msgid ""
"On a fork of the cpython repository on GitHub, create a release branch "
"within it (called the \"release clone\" from now on).  You can use the "
"same GitHub fork you use for cpython development.  Using the standard "
"setup recommended in the Python Developer's Guide, your fork would be "
"referred to as ``origin`` and the standard cpython repo as ``upstream``."
"  You will use the branch on your fork to do the release engineering "
"work, including tagging the release, and you will use it to share with "
"the other experts for making the binaries."
msgstr ""

#: ../../peps/pep-0101.rst:210
msgid ""
"For a **final** or **release candidate 2+** release, if you are going to "
"cherry-pick a subset of changes for the next rc or final from all those "
"merged since the last rc, you should create a release engineering branch "
"starting from the most recent release candidate tag, i.e. ``v3.8.0rc1``. "
"You will then cherry-pick changes from the standard release branch as "
"necessary into the release engineering branch and then proceed as usual."
"  If you are going to take all of the changes since the previous rc, you "
"can proceed as normal."
msgstr ""

#: ../../peps/pep-0101.rst:219
msgid ""
"Make sure the current branch of your release clone is the branch you want"
" to release from.  (``git status``)"
msgstr ""

#: ../../peps/pep-0101.rst:222
msgid ""
"Run ``blurb release <version>`` specifying the version number (e.g. "
"``blurb release 3.4.7rc1``).  This merges all the recent news blurbs into"
" a single file marked with this release's version number."
msgstr ""

#: ../../peps/pep-0101.rst:226
msgid "Regenerate Lib/pydoc-topics.py."
msgstr ""

#: ../../peps/pep-0101.rst:228
msgid ""
"While still in the Doc directory, run ``make pydoc-topics``.  Then copy "
"``build/pydoc-topics/topics.py`` to ``../Lib/pydoc_data/topics.py``."
msgstr ""

#: ../../peps/pep-0101.rst:231
msgid ""
"Commit your changes to ``pydoc_topics.py`` (and any fixes you made in the"
" docs)."
msgstr ""

#: ../../peps/pep-0101.rst:234
msgid ""
"Consider running ``autoconf`` using the currently accepted standard "
"version in case ``configure`` or other autoconf-generated files were last"
" committed with a newer or older version and may contain spurious or "
"harmful differences.  Currently, autoconf 2.71 is our de facto standard. "
"if there are differences, commit them."
msgstr ""

#: ../../peps/pep-0101.rst:240
msgid ""
"Make sure the ``SOURCE_URI`` in ``Doc/tools/extensions/pyspecific.py`` "
"points to the right branch in the git repository (``main`` or ``3.X``). "
"For a **new branch** release, change the branch in the file from *main* "
"to the new release branch you are about to create (``3.X``)."
msgstr ""

#: ../../peps/pep-0101.rst:245
msgid "Bump version numbers via the release script::"
msgstr ""

#: ../../peps/pep-0101.rst:249
msgid ""
"Reminder: X, Y, and N should be integers. a should be one of \"a\", "
"\"b\", or \"rc\" (e.g. \"3.4.3rc1\"). For **final** releases omit the aN "
"(\"3.4.3\").  For the first release of a new version Y should be 0 "
"(\"3.6.0\")."
msgstr ""

#: ../../peps/pep-0101.rst:254
msgid ""
"This automates updating various release numbers, but you will have to "
"modify a few files manually.  If your $EDITOR environment variable is set"
" up correctly, release.py will pop up editor windows with the files you "
"need to edit."
msgstr ""

#: ../../peps/pep-0101.rst:259
msgid "Review the blurb-generated Misc/NEWS file and edit as necessary."
msgstr ""

#: ../../peps/pep-0101.rst:261
msgid ""
"Make sure all changes have been committed.  (``release.py --bump`` "
"doesn't check in its changes for you.)"
msgstr ""

#: ../../peps/pep-0101.rst:264
msgid ""
"Check the years on the copyright notice.  If the last release was some "
"time last year, add the current year to the copyright notice in several "
"places:"
msgstr ""

#: ../../peps/pep-0101.rst:268
msgid "README"
msgstr ""

#: ../../peps/pep-0101.rst:269
msgid "LICENSE (make sure to change on trunk and the branch)"
msgstr ""

#: ../../peps/pep-0101.rst:270
msgid "Python/getcopyright.c"
msgstr ""

#: ../../peps/pep-0101.rst:271
msgid "Doc/copyright.rst"
msgstr ""

#: ../../peps/pep-0101.rst:272
msgid "Doc/license.rst"
msgstr ""

#: ../../peps/pep-0101.rst:273
msgid ""
"PC/python_ver_rc.h sets up the DLL version resource for Windows "
"(displayed when you right-click on the DLL and select Properties).  This "
"isn't a C include file, it's a Windows \"resource file\" include file."
msgstr ""

#: ../../peps/pep-0101.rst:278
msgid ""
"For a **final** major release, edit the first paragraph of "
"Doc/whatsnew/3.X.rst to include the actual release date; e.g. \"Python "
"2.5 was released on August 1, 2003.\"  There's no need to edit this for "
"alpha or beta releases."
msgstr ""

#: ../../peps/pep-0101.rst:283
msgid "Do a \"git status\" in this directory."
msgstr ""

#: ../../peps/pep-0101.rst:285 ../../peps/pep-0101.rst:582
msgid ""
"You should not see any files.  I.e. you better not have any uncommitted "
"changes in your working directory."
msgstr ""

#: ../../peps/pep-0101.rst:288
msgid "Tag the release for 3.X.YaN::"
msgstr ""

#: ../../peps/pep-0101.rst:292
msgid ""
"This executes a ``git tag`` command with the ``-s`` option so that the "
"release tag in the repo is signed with your gpg key.  When prompted "
"choose the private key you use for signing release tarballs etc."
msgstr ""

#: ../../peps/pep-0101.rst:296
msgid ""
"For **begin security-only mode** and **end-of-life** releases, review the"
" two files and update the versions accordingly in all active branches."
msgstr ""

#: ../../peps/pep-0101.rst:299
msgid ""
"Time to build the source tarball.  Use the release script to create the "
"source gzip and xz tarballs, documentation tar and zip files, and gpg "
"signature files::"
msgstr ""

#: ../../peps/pep-0101.rst:305
msgid ""
"This can take a while for **final** releases, and it will leave all the "
"tarballs and signatures in a subdirectory called ``3.X.YaN/src``, and the"
" built docs in ``3.X.YaN/docs`` (for **final** releases)."
msgstr ""

#: ../../peps/pep-0101.rst:309
msgid ""
"Note that the script will sign your release with Sigstore. Please use "
"your **@python.org** email address for this. See here for more "
"information: https://www.python.org/download/sigstore/."
msgstr ""

#: ../../peps/pep-0101.rst:313
msgid ""
"Now you want to perform the very important step of checking the tarball "
"you just created, to make sure a completely clean, virgin build passes "
"the regression test.  Here are the best steps to take::"
msgstr ""

#: ../../peps/pep-0101.rst:330
msgid ""
"If you're feeling lucky and have some time to kill, or if you are making "
"a release candidate or **final** release, run the full test suite::"
msgstr ""

#: ../../peps/pep-0101.rst:335
msgid ""
"If the tests pass, then you can feel good that the tarball is fine.  If "
"some of the tests fail, or anything else about the freshly unpacked "
"directory looks weird, you better stop now and figure out what the "
"problem is."
msgstr ""

#: ../../peps/pep-0101.rst:340
msgid "Push your commits to the remote release branch in your GitHub fork.::"
msgstr ""

#: ../../peps/pep-0101.rst:348
msgid "Notify the experts that they can start building binaries."
msgstr ""

#: ../../peps/pep-0101.rst:352
msgid ""
"**STOP**: at this point you must receive the \"green light\" from other "
"experts in order to create the release.  There are things you can do "
"while you wait though, so keep reading until you hit the next STOP."
msgstr ""

#: ../../peps/pep-0101.rst:356
msgid ""
"The WE generates and publishes the Windows files using the Azure "
"Pipelines build scripts in ``.azure-pipelines/windows-release/``, "
"currently set up at "
"https://dev.azure.com/Python/cpython/_build?definitionId=21."
msgstr ""

#: ../../peps/pep-0101.rst:360
msgid ""
"The build process runs in multiple stages, with each stage's output being"
" available as a downloadable artifact. The stages are:"
msgstr ""

#: ../../peps/pep-0101.rst:363
msgid ""
"Compile all variants of binaries (32-bit, 64-bit, debug/release), "
"including running profile-guided optimization."
msgstr ""

#: ../../peps/pep-0101.rst:366
msgid "Compile the HTML Help file containing the Python documentation"
msgstr ""

#: ../../peps/pep-0101.rst:368
msgid "Codesign all the binaries with the PSF's certificate"
msgstr ""

#: ../../peps/pep-0101.rst:370
msgid ""
"Create packages for python.org, nuget.org, the embeddable distro and the "
"Windows Store"
msgstr ""

#: ../../peps/pep-0101.rst:373
msgid "Perform basic verification of the installers"
msgstr ""

#: ../../peps/pep-0101.rst:375
msgid ""
"Upload packages to python.org and nuget.org, purge download caches and "
"run a test download."
msgstr ""

#: ../../peps/pep-0101.rst:378
msgid ""
"After the uploads are complete, the WE copies the generated hashes from "
"the build logs and emails them to the RM. The Windows Store packages are "
"uploaded manually to https://partner.microsoft.com/dashboard/home by the "
"WE."
msgstr ""

#: ../../peps/pep-0101.rst:383
msgid ""
"The ME builds Mac installer packages and uploads them to "
"downloads.nyc1.psf.io together with gpg signature files."
msgstr ""

#: ../../peps/pep-0101.rst:386
msgid ""
"scp or rsync all the files built by ``release.py --export`` to your home "
"directory on downloads.nyc1.psf.io."
msgstr ""

#: ../../peps/pep-0101.rst:389
msgid ""
"While you're waiting for the files to finish uploading, you can continue "
"on with the remaining tasks.  You can also ask folks on #python-dev "
"and/or python-committers to download the files as they finish uploading "
"so that they can test them on their platforms as well."
msgstr ""

#: ../../peps/pep-0101.rst:394
msgid ""
"Now you need to go to downloads.nyc1.psf.io and move all the files in "
"place over there.  Our policy is that every Python version gets its own "
"directory, but each directory contains all releases of that version."
msgstr ""

#: ../../peps/pep-0101.rst:398
msgid ""
"On downloads.nyc1.psf.io, ``cd /srv/www.python.org/ftp/python/3.X.Y`` "
"creating it if necessary.  Make sure it is owned by group 'downloads' and"
" group-writable."
msgstr ""

#: ../../peps/pep-0101.rst:402
msgid ""
"Move the release .tgz, and .tar.xz files into place, as well as the .asc "
"GPG signature files.  The Win/Mac binaries are usually put there by the "
"experts themselves."
msgstr ""

#: ../../peps/pep-0101.rst:406
msgid ""
"Make sure they are world readable.  They should also be group writable, "
"and group-owned by downloads."
msgstr ""

#: ../../peps/pep-0101.rst:409
msgid "Use ``gpg --verify`` to make sure they got uploaded intact."
msgstr ""

#: ../../peps/pep-0101.rst:411
msgid ""
"If this is a **final** or rc release: Move the doc zips and tarballs to "
"``/srv/www.python.org/ftp/python/doc/3.X.Y[rcA]``, creating the directory"
" if necessary, and adapt the \"current\" symlink in ``.../doc`` to point "
"to that directory.  Note though that if you're releasing a maintenance "
"release for an older version, don't change the current link."
msgstr ""

#: ../../peps/pep-0101.rst:417
msgid ""
"If this is a **final** or rc release (even a maintenance release), also "
"unpack the HTML docs to ``/srv/docs.python.org/release/3.X.Y[rcA]`` on "
"docs.nyc1.psf.io. Make sure the files are in group ``docs`` and are "
"group-writeable."
msgstr ""

#: ../../peps/pep-0101.rst:422
msgid "Let the DE check if the docs are built and work all right."
msgstr ""

#: ../../peps/pep-0101.rst:424
msgid ""
"Note both the documentation and downloads are behind a caching CDN. If "
"you change archives after downloading them through the website, you'll "
"need to purge the stale data in the CDN like this::"
msgstr ""

#: ../../peps/pep-0101.rst:430
msgid ""
"You should always purge the cache of the directory listing as people use "
"that to browse the release files::"
msgstr ""

#: ../../peps/pep-0101.rst:435
msgid ""
"For the extra paranoid, do a completely clean test of the release. This "
"includes downloading the tarball from www.python.org."
msgstr ""

#: ../../peps/pep-0101.rst:438
msgid ""
"Make sure the md5 checksums match.  Then unpack the tarball, and do a "
"clean make test.::"
msgstr ""

#: ../../peps/pep-0101.rst:445
msgid ""
"To ensure that the regression test suite passes.  If not, you screwed up "
"somewhere!"
msgstr ""

#: ../../peps/pep-0101.rst:450
msgid "**STOP** and confirm:"
msgstr ""

#: ../../peps/pep-0101.rst:452
msgid "Have you gotten the green light from the WE?"
msgstr ""

#: ../../peps/pep-0101.rst:454
msgid "Have you gotten the green light from the ME?"
msgstr ""

#: ../../peps/pep-0101.rst:456
msgid "Have you gotten the green light from the DE?"
msgstr ""

#: ../../peps/pep-0101.rst:458
msgid ""
"If green, it's time to merge the release engineering branch back into the"
" main repo."
msgstr ""

#: ../../peps/pep-0101.rst:461
msgid ""
"In order to push your changes to GitHub, you'll have to temporarily "
"disable branch protection for administrators.  Go to the ``Settings | "
"Branches`` page:"
msgstr ""

#: ../../peps/pep-0101.rst:465 ../../peps/pep-0101.rst:618
msgid "https://github.com/python/cpython/settings/branches/"
msgstr ""

#: ../../peps/pep-0101.rst:467
msgid ""
"\"Edit\" the settings for the branch you're releasing on. This will load "
"the settings page for that branch. Uncheck the \"Include administrators\""
" box and press the \"Save changes\" button at the bottom."
msgstr ""

#: ../../peps/pep-0101.rst:472
msgid "Merge your release clone into the main development repo::"
msgstr ""

#: ../../peps/pep-0101.rst:494
msgid ""
"If this is a **new branch** release, i.e. first beta, now create the new "
"release branch::"
msgstr ""

#: ../../peps/pep-0101.rst:499
msgid "Do any steps needed to setup the new release branch, including:"
msgstr ""

#: ../../peps/pep-0101.rst:501
msgid ""
"In README.rst, change all references from ``main`` to the new branch, in "
"particular, GitHub repo URLs."
msgstr ""

#: ../../peps/pep-0101.rst:504
msgid ""
"For *all* releases, do the guided post-release steps with the release "
"script.::"
msgstr ""

#: ../../peps/pep-0101.rst:509
msgid ""
"For a **final** or **release candidate 2+** release, you may need to do "
"some post-merge cleanup.  Check the top-level ``README.rst`` and "
"``include/patchlevel.h`` files to ensure they now reflect the desired "
"post-release values for on-going development. The patchlevel should be "
"the release tag with a ``+``. Also, if you cherry-picked changes from the"
" standard release branch into the release engineering branch for this "
"release, you will now need to manual remove each blurb entry from the "
"``Misc/NEWS.d/next`` directory that was cherry-picked into the release "
"you are working on since that blurb entry is now captured in the merged "
"x.y.z.rst file for the new release.  Otherwise, the blurb entry will "
"appear twice in the ``changelog.html`` file, once under ``Python next`` "
"and again under ``x.y.z``."
msgstr ""

#: ../../peps/pep-0101.rst:524
msgid "Review and commit these changes::"
msgstr ""

#: ../../peps/pep-0101.rst:528
msgid ""
"If this is a **new branch** release (e.g. the first beta), update the "
"main branch to start development for the following feature release.  When"
" finished, the ``main`` branch will now build Python ``X.Y+1``."
msgstr ""

#: ../../peps/pep-0101.rst:533
msgid "First, set main up to be the next release, i.e.X.Y+1.a0::"
msgstr ""

#: ../../peps/pep-0101.rst:538
msgid "Edit all version references in README.rst"
msgstr ""

#: ../../peps/pep-0101.rst:540
msgid ""
"Move any historical \"what's new\" entries from ``Misc/NEWS`` to "
"``Misc/HISTORY``."
msgstr ""

#: ../../peps/pep-0101.rst:543
msgid ""
"Edit ``Doc/tutorial/interpreter.rst`` (2 references to '[Pp]ython3x', one"
" to 'Python 3.x', also make the date in the banner consistent)."
msgstr ""

#: ../../peps/pep-0101.rst:546
msgid ""
"Edit ``Doc/tutorial/stdlib.rst`` and ``Doc/tutorial/stdlib2.rst``, which "
"have each one reference to '[Pp]ython3x'."
msgstr ""

#: ../../peps/pep-0101.rst:549
msgid ""
"Add a new ``whatsnew/3.x.rst`` file (with the comment near the top and "
"the toplevel sections copied from the previous file) and add it to the "
"toctree in ``whatsnew/index.rst``.  But beware that the initial "
"``whatsnew/3.x.rst`` checkin from previous releases may be incorrect due "
"to the initial midstream change to ``blurb`` that propagates from release"
" to release!  Help break the cycle: if necessary make the following "
"change::"
msgstr ""

#: ../../peps/pep-0101.rst:560
msgid "Update the version number in ``configure.ac`` and re-run ``autoconf``."
msgstr ""

#: ../../peps/pep-0101.rst:562
msgid ""
"Make sure the ``SOURCE_URI`` in ``Doc/tools/extensions/pyspecific.py`` "
"points to ``main``."
msgstr ""

#: ../../peps/pep-0101.rst:565
msgid ""
"Update the version numbers for the Windows builds in PC/ and PCbuild/, "
"which have references to python38. NOTE, check with Steve Dower about "
"this step, it is probably obsolete.::"
msgstr ""

#: ../../peps/pep-0101.rst:574
msgid "Commit these changes to the main branch::"
msgstr ""

#: ../../peps/pep-0101.rst:580
msgid "Do another ``git status`` in this directory."
msgstr ""

#: ../../peps/pep-0101.rst:585
msgid "Commit and push to the main repo.::"
msgstr ""

#: ../../peps/pep-0101.rst:607
msgid ""
"If this is a **new branch** release, add a ``Branch protection rule`` for"
" the newly created branch (3.X).  Look at the values for the previous "
"release branch (3.X-1) and use them as a template. "
"https://github.com/python/cpython/settings/branches/"
msgstr ""

#: ../../peps/pep-0101.rst:612
msgid ""
"Also, add a ``needs backport to 3.X`` label to the GitHub repo. "
"https://github.com/python/cpython/labels"
msgstr ""

#: ../../peps/pep-0101.rst:615
msgid ""
"You can now re-enable enforcement of branch settings against "
"administrators on GitHub.  Go back to the ``Settings | Branch`` page:"
msgstr ""

#: ../../peps/pep-0101.rst:620
msgid ""
"\"Edit\" the settings for the branch you're releasing on. Re-check the "
"\"Include administrators\" box and press the \"Save changes\" button at "
"the bottom."
msgstr ""

#: ../../peps/pep-0101.rst:624
msgid ""
"Now it's time to twiddle the web site.  Almost none of this is automated,"
" sorry."
msgstr ""

#: ../../peps/pep-0101.rst:626
msgid ""
"To do these steps, you must have the permission to edit the website.  If "
"you don't have that, ask someone on pydotorg@python.org for the proper "
"permissions.  (Or ask Ewa, who coordinated the effort for the new website"
" with RevSys.)"
msgstr ""

#: ../../peps/pep-0101.rst:631
msgid "Log in to https://www.python.org/admin ."
msgstr ""

#: ../../peps/pep-0101.rst:633
msgid ""
"Create a new \"release\" for the release.  Currently \"Releases\" are "
"sorted under \"Downloads\"."
msgstr ""

#: ../../peps/pep-0101.rst:636
msgid ""
"The easiest thing is probably to copy fields from an existing Python "
"release \"page\", editing as you go."
msgstr ""

#: ../../peps/pep-0101.rst:639
msgid ""
"You can use `Markdown "
"<https://daringfireball.net/projects/markdown/syntax>`_ or `ReStructured "
"Text <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_ to "
"describe your release.  The former is less verbose, while the latter has "
"nifty integration for things like referencing PEPs."
msgstr ""

#: ../../peps/pep-0101.rst:644
msgid "Leave the \"Release page\" field on the form empty."
msgstr ""

#: ../../peps/pep-0101.rst:646
msgid "\"Save\" the release."
msgstr ""

#: ../../peps/pep-0101.rst:648
msgid "Populate the release with the downloadable files."
msgstr ""

#: ../../peps/pep-0101.rst:650
msgid ""
"Your friend and mine, Georg Brandl, made a lovely tool called \"add-to-"
"pydotorg.py\".  You can find it in the \"release\" tree (next to "
"\"release.py\").  You run the tool on downloads.nyc1.psf.io, like this::"
msgstr ""

#: ../../peps/pep-0101.rst:657
msgid ""
"This walks the correct download directory for <version>, looks for files "
"marked with <version>, and populates the \"Release Files\" for the "
"correct \"release\" on the web site with these files.  Note that clears "
"the \"Release Files\" for the relevant version each time it's run.  You "
"may run it from any directory you like, and you can run it as many times "
"as you like if the files happen to change. Keep a copy in your home "
"directory on dl-files and keep it fresh."
msgstr ""

#: ../../peps/pep-0101.rst:667
msgid ""
"If new types of files are added to the release, someone will need to "
"update add-to-pydotorg.py so it recognizes these new files. (It's best to"
" update add-to-pydotorg.py when file types are removed, too.)"
msgstr ""

#: ../../peps/pep-0101.rst:672
msgid ""
"The script will also sign any remaining files that were not signed with "
"Sigstore until this point. Again, if this happens, do use your "
"@python.org address for this process. More info: "
"https://www.python.org/download/sigstore/"
msgstr ""

#: ../../peps/pep-0101.rst:677
msgid ""
"In case the CDN already cached a version of the Downloads page without "
"the files present, you can invalidate the cache using::"
msgstr ""

#: ../../peps/pep-0101.rst:682
msgid "If this is a **final** release:"
msgstr ""

#: ../../peps/pep-0101.rst:684
msgid ""
"Add the new version to the *Python Documentation by Version* page "
"``https://www.python.org/doc/versions/`` and remove the current version "
"from any 'in development' section."
msgstr ""

#: ../../peps/pep-0101.rst:688
msgid ""
"For 3.X.Y, edit all the previous X.Y releases' page(s) to point to the "
"new release.  This includes the content field of the ``Downloads -> "
"Releases`` entry for the release::"
msgstr ""

#: ../../peps/pep-0101.rst:695
msgid ""
"And, for those releases having separate release page entries (phasing "
"these out?), update those pages as well, e.g. "
"``download/releases/3.x.y``::"
msgstr ""

#: ../../peps/pep-0101.rst:702
msgid "Update the \"Current Pre-release Testing Versions web page\"."
msgstr ""

#: ../../peps/pep-0101.rst:704
msgid "There's a page that lists all the currently-in-testing versions of Python:"
msgstr ""

#: ../../peps/pep-0101.rst:707
msgid "https://www.python.org/download/pre-releases/"
msgstr ""

#: ../../peps/pep-0101.rst:709
msgid ""
"Every time you make a release, one way or another you'll have to update "
"this page:"
msgstr ""

#: ../../peps/pep-0101.rst:712
msgid ""
"If you're releasing a version before *3.x.0*, you should add it to this "
"page, removing the previous pre-release of version *3.x* as needed."
msgstr ""

#: ../../peps/pep-0101.rst:716
msgid ""
"If you're releasing *3.x.0 final*, you need to remove the pre-release "
"version from this page."
msgstr ""

#: ../../peps/pep-0101.rst:719
msgid ""
"This is in the \"Pages\" category on the Django-based website, and "
"finding it through that UI is kind of a chore.  However!  If you're "
"already logged in to the admin interface (which, at this point, you "
"should be), Django will helpfully add a convenient \"Edit this page\" "
"link to the top of the page itself.  So you can simply follow the link "
"above, click on the \"Edit this page\" link, and make your changes as "
"needed.  How convenient!"
msgstr ""

#: ../../peps/pep-0101.rst:726
msgid "If appropriate, update the \"Python Documentation by Version\" page:"
msgstr ""

#: ../../peps/pep-0101.rst:728
msgid "https://www.python.org/doc/versions/"
msgstr ""

#: ../../peps/pep-0101.rst:730
msgid ""
"This lists all releases of Python by version number and links to their "
"static (not built daily) online documentation.  There's a list at the "
"bottom of in-development versions, which is where all alphas/betas/RCs "
"should go.  And yes you should be able to click on the link above then "
"press the shiny, exciting \"Edit this page\" button."
msgstr ""

#: ../../peps/pep-0101.rst:736
msgid ""
"Write the announcement on https://discuss.python.org/.  This is the fuzzy"
" bit because not much can be automated.  You can use an earlier "
"announcement as a template, but edit it for content!"
msgstr ""

#: ../../peps/pep-0101.rst:740
msgid ""
"Once the announcement is up on Discourse, send an equivalent to the "
"following mailing lists:"
msgstr ""

#: ../../peps/pep-0101.rst:743
msgid "python-list@python.org python-announce@python.org python-dev@python.org"
msgstr ""

#: ../../peps/pep-0101.rst:747
msgid ""
"Also post the announcement to `The Python Insider blog "
"<http://blog.python.org>`_. To add a new entry, go to `your Blogger home "
"page, here. <https://www.blogger.com/home>`_"
msgstr ""

#: ../../peps/pep-0101.rst:752
msgid "Update any release PEPs (e.g. 719) with the release dates."
msgstr ""

#: ../../peps/pep-0101.rst:754
msgid "Update the labels on https://github.com/python/cpython/issues:"
msgstr ""

#: ../../peps/pep-0101.rst:756
msgid ""
"Flip all the deferred-blocker issues back to release-blocker for the next"
" release."
msgstr ""

#: ../../peps/pep-0101.rst:759
msgid "Add version 3.X+1 as when version 3.X enters alpha."
msgstr ""

#: ../../peps/pep-0101.rst:761
msgid ""
"Change non-doc feature requests to version 3.X+1 when version 3.X enters "
"beta."
msgstr ""

#: ../../peps/pep-0101.rst:764
msgid ""
"Update issues from versions that your release makes unsupported to the "
"next supported version."
msgstr ""

#: ../../peps/pep-0101.rst:767
msgid ""
"Review open issues, as this might find lurking showstopper bugs, besides "
"reminding people to fix the easy ones they forgot about."
msgstr ""

#: ../../peps/pep-0101.rst:770
msgid "You can delete the remote release clone branch from your repo clone."
msgstr ""

#: ../../peps/pep-0101.rst:772
msgid ""
"If this is a **new branch** release, you will need to ensure various "
"pieces of the development infrastructure are updated for the new branch. "
"These include:"
msgstr ""

#: ../../peps/pep-0101.rst:776
msgid ""
"Update the issue tracker for the new branch: add the new version to the "
"versions list."
msgstr ""

#: ../../peps/pep-0101.rst:779
msgid "Update the devguide to reflect the new branches and versions."
msgstr ""

#: ../../peps/pep-0101.rst:781
msgid ""
"Create a PR to update the supported releases table on the `downloads page"
" <https://www.python.org/downloads/>`_. (See "
"https://github.com/python/pythondotorg/issues/1302)"
msgstr ""

#: ../../peps/pep-0101.rst:785
msgid ""
"Ensure buildbots are defined for the new branch (contact ≈Åukasz or Zach "
"Ware)."
msgstr ""

#: ../../peps/pep-0101.rst:788
msgid ""
"Ensure the various GitHub bots are updated, as needed, for the new "
"branch, in particular, make sure backporting to the new branch works "
"(contact core-workflow team) https://github.com/python/core-"
"workflow/issues"
msgstr ""

#: ../../peps/pep-0101.rst:793
msgid ""
"Review the most recent commit history for the main and new release "
"branches to identify and backport any merges that might have been made to"
" the main branch during the release engineering phase and that should be "
"in the release branch."
msgstr ""

#: ../../peps/pep-0101.rst:798
msgid ""
"Verify that CI is working for new PRs for the main and new release "
"branches and that the release branch is properly protected (no direct "
"pushes, etc)."
msgstr ""

#: ../../peps/pep-0101.rst:802
msgid ""
"Verify that the on-line docs are building properly (this may take up to "
"24 hours for a complete build on the web site)."
msgstr ""

#: ../../peps/pep-0101.rst:807
msgid "What Next?"
msgstr ""

#: ../../peps/pep-0101.rst:809
msgid ""
"Verify!  Pretend you're a user: download the files from python.org, and "
"make Python from it. This step is too easy to overlook, and on several "
"occasions we've had useless release files.  Once a general server problem"
" caused mysterious corruption of all files; once the source tarball got "
"built incorrectly; more than once the file upload process on SF truncated"
" files; and so on."
msgstr ""

#: ../../peps/pep-0101.rst:816
msgid ""
"Rejoice.  Drink.  Be Merry.  Write a PEP like this one.  Or be like unto "
"Guido and take A Vacation."
msgstr ""

#: ../../peps/pep-0101.rst:819
msgid "You've just made a Python release!"
msgstr ""

#: ../../peps/pep-0101.rst:823
msgid "Moving to End-of-life"
msgstr ""

#: ../../peps/pep-0101.rst:825
msgid ""
"Under current policy, a release branch normally reaches end-of-life "
"status 5 years after its initial release.  The policy is discussed in "
"more detail in `the Python Developer's Guide "
"<https://devguide.python.org/devcycle/>`_. When end-of-life is reached, "
"there are a number of tasks that need to be performed either directly by "
"you as release manager or by ensuring someone else does them.  Some of "
"those tasks include:"
msgstr ""

#: ../../peps/pep-0101.rst:832
msgid ""
"Optionally making a final release to publish any remaining unreleased "
"changes."
msgstr ""

#: ../../peps/pep-0101.rst:835
msgid ""
"Freeze the state of the release branch by creating a tag of its current "
"HEAD and then deleting the branch from the cpython repo.  The current "
"HEAD should be at or beyond the final security release for the branch::"
msgstr ""

#: ../../peps/pep-0101.rst:843
msgid ""
"If all looks good, delete the branch.  This may require the assistance of"
" someone with repo administrator privileges::"
msgstr ""

#: ../../peps/pep-0101.rst:848
msgid ""
"Remove the release from the list of \"Active Python Releases\" on the "
"Downloads page.  To do this, log in to the admin page for python.org, "
"navigate to Boxes, and edit the ``downloads-active-releases`` entry.  "
"Simply strip out the relevant paragraph of HTML for your release.  "
"(You'll probably have to do the ``curl -X PURGE`` trick to purge the "
"cache if you want to confirm you made the change correctly.)"
msgstr ""

#: ../../peps/pep-0101.rst:854
msgid ""
"Add retired notice to each release page on python.org for the retired "
"branch. For example:"
msgstr ""

#: ../../peps/pep-0101.rst:857
msgid "https://www.python.org/downloads/release/python-337/"
msgstr ""

#: ../../peps/pep-0101.rst:859
msgid "https://www.python.org/downloads/release/python-336/"
msgstr ""

#: ../../peps/pep-0101.rst:861
msgid ""
"In the developer's guide, add the branch to the recent end-of-life "
"branches list (https://devguide.python.org/devcycle/#end-of-life-"
"branches) and update or remove references to the branch elsewhere in the "
"devguide."
msgstr ""

#: ../../peps/pep-0101.rst:865
msgid "Retire the release from the issue tracker. Tasks include:"
msgstr ""

#: ../../peps/pep-0101.rst:867
msgid "remove version label from list of versions"
msgstr ""

#: ../../peps/pep-0101.rst:869
msgid "remove the \"needs backport to\" label for the retired version"
msgstr ""

#: ../../peps/pep-0101.rst:871
msgid "review and dispose of open issues marked for this branch"
msgstr ""

#: ../../peps/pep-0101.rst:873
msgid "Announce the branch retirement in the usual places:"
msgstr ""

#: ../../peps/pep-0101.rst:875
msgid "discuss.python.org"
msgstr ""

#: ../../peps/pep-0101.rst:877
msgid "mailing lists (python-dev, python-list, python-announcements)"
msgstr ""

#: ../../peps/pep-0101.rst:879
msgid "Python Dev blog"
msgstr ""

#: ../../peps/pep-0101.rst:881
msgid "Enjoy your retirement and bask in the glow of a job well done!"
msgstr ""

#: ../../peps/pep-0101.rst:885
msgid "Windows Notes"
msgstr ""

#: ../../peps/pep-0101.rst:887
msgid ""
"Windows has a MSI installer, various flavors of Windows have \"special "
"limitations\", and the Windows installer also packs precompiled "
"\"foreign\" binaries (Tcl/Tk, expat, etc)."
msgstr ""

#: ../../peps/pep-0101.rst:891
msgid ""
"The installer is tested as part of the Azure Pipeline. In the past, those"
" steps were performed manually. We're keeping this for posterity."
msgstr ""

#: ../../peps/pep-0101.rst:894
msgid ""
"Concurrent with uploading the installer, the WE installs Python from it "
"twice: once into the default directory suggested by the installer, and "
"later into a directory with embedded spaces in its name.  For each "
"installation, the WE runs the full regression suite from a DOS box, and "
"both with and without -0. For maintenance release, the WE also tests "
"whether upgrade installations succeed."
msgstr ""

#: ../../peps/pep-0101.rst:901
msgid ""
"The WE also tries *every* shortcut created under Start -> Menu -> the "
"Python group.  When trying IDLE this way, you need to verify that Help ->"
" Python Documentation works.  When trying pydoc this way (the \"Module "
"Docs\" Start menu entry), make sure the \"Start Browser\" button works, "
"and make sure you can search for a random module (like \"random\" <wink>)"
" and then that the \"go to selected\" button works."
msgstr ""

#: ../../peps/pep-0101.rst:909
msgid ""
"It's amazing how much can go wrong here -- and even more amazing how "
"often last-second checkins break one of these things.  If you're \"the "
"Windows geek\", keep in mind that you're likely the only person routinely"
" testing on Windows, and that Windows is simply a mess."
msgstr ""

#: ../../peps/pep-0101.rst:915
msgid ""
"Repeat the testing for each target architecture.  Try both an Admin and a"
" plain User (not Power User) account."
msgstr ""

#: ../../peps/pep-0101.rst:920
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-0101.rst:922
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em dom√≠nio p√∫blico."

#~ msgid ""
#~ "Actually, no that's a slight "
#~ "exaggeration <wink>.  The Python release "
#~ "process has steadily improved over the"
#~ " years and now, with the help "
#~ "of our amazing community, is really "
#~ "not too difficult.  This PEP attempts"
#~ " to collect, in one place, all "
#~ "the steps needed to make a Python"
#~ " release.  It is organized as a "
#~ "recipe and you can actually print "
#~ "this out and check items off as"
#~ " you complete them."
#~ msgstr ""

#~ msgid ""
#~ "\"release.py\", the Python release manager's"
#~ " friend.  It's in the python/release-"
#~ "tools repo on GitHub.  It doesn't "
#~ "pip install or have any sort of"
#~ " install process--you'll have to put"
#~ " it on your path yourself, or "
#~ "just run it with a relative path,"
#~ " or whatever."
#~ msgstr ""

#~ msgid ""
#~ "\"blurb\", the Misc/NEWS management tool.  "
#~ "The release process currently uses three"
#~ " blurb subcommands: release, merge, and "
#~ "export.  Installable via pip3."
#~ msgstr ""

#~ msgid ""
#~ "\"virtualenv\". The release script installs"
#~ " Sphinx in a virtualenv when building"
#~ " the docs (for 2.7 and 3.5+)."
#~ msgstr ""

#~ msgid ""
#~ "Access to ``downloads.nyc1.psf.io``, the "
#~ "server that hosts download files, and"
#~ " ``docs.nyc1.psf.io``, the server that "
#~ "hosts the documentation. You'll be "
#~ "uploading files directly here."
#~ msgstr ""

#~ msgid "``beta``"
#~ msgstr ""

#~ msgid ""
#~ "Some of these release types actually "
#~ "involve more than one release branch."
#~ " In particular, a **new branch** is"
#~ " that point in the release cycle "
#~ "when a new feature release cycle "
#~ "begins.  Under the current organization "
#~ "of the cpython git repository, the "
#~ "*main* branch is always the target "
#~ "for new features.  At some point "
#~ "in the release cycle of the next"
#~ " feature release, a **new branch** "
#~ "release is made which creates a "
#~ "new separate branch for stabilization "
#~ "and later maintenance of the current "
#~ "in-progress feature release (x.y.0) and"
#~ " the *main* branch is modified to "
#~ "build a new version (which will "
#~ "eventually be released as x.y+1.0). "
#~ "While the **new branch** release step"
#~ " could occur at one of several "
#~ "points in the release cycle, current "
#~ "practice is for it to occur at "
#~ "feature code cutoff for the release "
#~ "which is scheduled for the first "
#~ "beta release."
#~ msgstr ""

#~ msgid "How to Make A Release"
#~ msgstr ""

#~ msgid "≈Åukasz Langa <lukasz@python.org> (Central Europe)"
#~ msgstr ""

#~ msgid "Ned Deily <nad@python.org> (US)"
#~ msgstr ""

#~ msgid "IE = Idle Expert - Terry Reedy <tjreedy@udel.edu> (US)"
#~ msgstr ""

#~ msgid ""
#~ "XXX: We should include a dependency "
#~ "graph to illustrate the steps that "
#~ "can be taken in parallel, or those"
#~ " that depend on other steps."
#~ msgstr ""

#~ msgid ""
#~ "We use the following conventions in "
#~ "the examples below.  Where a release "
#~ "number is given, it is of the "
#~ "form ``X.Y.ZaN``, e.g. 3.3.0a3 for "
#~ "Python 3.3.0 alpha 3, where \"a\" "
#~ "== alpha, \"b\" == beta, \"rc\" =="
#~ " release candidate."
#~ msgstr ""

#~ msgid ""
#~ "Release tags are named ``vX.Y.ZaN``.  "
#~ "The branch name for minor release "
#~ "maintenance branches is ``X.Y``."
#~ msgstr ""

#~ msgid "Log into irc.libera.chat and join the #python-dev channel."
#~ msgstr ""

#~ msgid ""
#~ "You probably need to coordinate with "
#~ "other people around the world. This "
#~ "IRC channel is where we've arranged "
#~ "to meet."
#~ msgstr ""

#~ msgid ""
#~ "Go to https://bugs.python.org and look "
#~ "for any open bugs that can block"
#~ " this release.  You're looking at the"
#~ " Priority of the open bugs for "
#~ "the release you're making; here are "
#~ "the relevant definitions:"
#~ msgstr ""

#~ msgid "release blocker"
#~ msgstr ""

#~ msgid "deferred blocker"
#~ msgstr ""

#~ msgid "critical"
#~ msgstr ""

#~ msgid ""
#~ "Important bugs that should be fixed, "
#~ "but which does not block a "
#~ "release."
#~ msgstr ""

#~ msgid ""
#~ "On a fork of the cpython "
#~ "repository on GitHub, create a release"
#~ " branch within it (called the "
#~ "\"release clone\" from now on).  You "
#~ "can use the same GitHub fork you"
#~ " use for cpython development.  Using "
#~ "the standard setup recommended in the"
#~ " Python Developer's Guide, your fork "
#~ "would be referred to as `origin` "
#~ "and the standard cpython repo as "
#~ "`upstream`.  You will use the branch "
#~ "on your fork to do the release "
#~ "engineering work, including tagging the "
#~ "release, and you will use it to"
#~ " share with the other experts for "
#~ "making the binaries."
#~ msgstr ""

#~ msgid ""
#~ "Consider running ``autoconf`` using the "
#~ "currently accepted standard version in "
#~ "case ``configure`` or other autoconf-"
#~ "generated files were last committed with"
#~ " a newer or older version and "
#~ "may contain spurious or harmful "
#~ "differences.  Currently, autoconf 2.69 is "
#~ "our de facto standard. if there "
#~ "are differences, commit them."
#~ msgstr ""

#~ msgid ""
#~ "Make sure the ``SOURCE_URI`` in "
#~ "``Doc/tools/extensions/pyspecific.py`` points to the"
#~ " right branch in the git repository"
#~ " (``main`` or ``X.Y``). For a **new"
#~ " branch** release, change the branch "
#~ "in the file from *main* to the "
#~ "new release branch you are about "
#~ "to create (``X.Y``)."
#~ msgstr ""

#~ msgid ""
#~ "Reminder: X, Y, Z, and N should"
#~ " be integers. a should be one "
#~ "of \"a\", \"b\", or \"rc\" (e.g. "
#~ "\"3.4.3rc1\"). For **final** releases omit "
#~ "the aN (\"3.4.3\").  For the first "
#~ "release of a new version Z should"
#~ " be 0 (\"3.6.0\")."
#~ msgstr ""

#~ msgid ""
#~ "Check with the IE (if there is "
#~ "one <wink>) to be sure that "
#~ "Lib/idlelib/NEWS.txt has been similarly "
#~ "updated."
#~ msgstr ""

#~ msgid ""
#~ "For a **final** major release, edit "
#~ "the first paragraph of Doc/whatsnew/X.Y.rst"
#~ " to include the actual release date;"
#~ " e.g. \"Python 2.5 was released on"
#~ " August 1, 2003.\"  There's no need"
#~ " to edit this for alpha or beta"
#~ " releases."
#~ msgstr ""

#~ msgid "Tag the release for X.Y.ZaN::"
#~ msgstr ""

#~ msgid ""
#~ "This executes a `git tag` command "
#~ "with the `-s` option so that the"
#~ " release tag in the repo is "
#~ "signed with your gpg key.  When "
#~ "prompted choose the private key you "
#~ "use for signing release tarballs etc."
#~ msgstr ""

#~ msgid ""
#~ "For a **new branch** release, add "
#~ "it to the ``VERSIONS`` list of "
#~ "`docsbuild scripts`_, so that the new"
#~ " maintenance branch is now ``pre-"
#~ "release`` and add the new ``in "
#~ "development`` version."
#~ msgstr ""

#~ msgid ""
#~ "For a **final** major release, update"
#~ " the ``VERSIONS`` list of `docsbuild "
#~ "scripts`_: the release branch must be"
#~ " changed from ``pre-release`` to "
#~ "``stable``."
#~ msgstr ""

#~ msgid ""
#~ "This can take a while for "
#~ "**final** releases, and it will leave"
#~ " all the tarballs and signatures in"
#~ " a subdirectory called ``X.Y.ZaN/src``, and"
#~ " the built docs in ``X.Y.ZaN/docs`` "
#~ "(for **final** releases)."
#~ msgstr ""

#~ msgid "STOP STOP STOP STOP STOP STOP STOP STOP"
#~ msgstr ""

#~ msgid ""
#~ "At this point you must receive the"
#~ " \"green light\" from other experts "
#~ "in order to create the release.  "
#~ "There are things you can do while"
#~ " you wait though, so keep reading "
#~ "until you hit the next STOP."
#~ msgstr ""

#~ msgid ""
#~ "Note that this build requires a "
#~ "separate VM containing the code signing"
#~ " certificate. This VM is managed by"
#~ " the WE to ensure only official "
#~ "releases have access to the certificate."
#~ msgstr ""

#~ msgid ""
#~ "On downloads.nyc1.psf.io, cd "
#~ "/srv/www.python.org/ftp/python/X.Y.Z creating it if"
#~ " necessary.  Make sure it is owned"
#~ " by group 'downloads' and group-"
#~ "writable."
#~ msgstr ""

#~ msgid ""
#~ "If this is a **final** or rc "
#~ "release: Move the doc zips and "
#~ "tarballs to "
#~ "``/srv/www.python.org/ftp/python/doc/X.Y.Z[rcA]``, creating "
#~ "the directory if necessary, and adapt"
#~ " the \"current\" symlink in ``.../doc`` "
#~ "to point to that directory.  Note "
#~ "though that if you're releasing a "
#~ "maintenance release for an older "
#~ "version, don't change the current link."
#~ msgstr ""

#~ msgid ""
#~ "If this is a **final** or rc "
#~ "release (even a maintenance release), "
#~ "also unpack the HTML docs to "
#~ "``/srv/docs.python.org/release/X.Y.Z[rcA]`` on "
#~ "docs.nyc1.psf.io. Make sure the files "
#~ "are in group ``docs`` and are "
#~ "group-writeable.  If it is a release"
#~ " of a security-fix-only version, "
#~ "tell the DE to start a build "
#~ "(``security-fixes`` and ``EOL`` version "
#~ "are not built daily)."
#~ msgstr ""

#~ msgid ""
#~ "If this is a **final** major "
#~ "release: Tell the DE to adapt "
#~ "redirects for docs.python.org/X.Y in the "
#~ "nginx config for docs.python.org."
#~ msgstr ""

#~ msgid ""
#~ "In order to push your changes to"
#~ " Github, you'll have to temporarily "
#~ "disable branch protection for administrators."
#~ "  Go to the ``Settings | Branches``"
#~ " page:"
#~ msgstr ""

#~ msgid ""
#~ "For a **final** or **release candidate"
#~ " 2+** release, you may need to "
#~ "do some post-merge cleanup.  Check "
#~ "the top-level ``README.rst`` and "
#~ "``include/patchlevel.h`` files to ensure they"
#~ " now reflect the desired post-release"
#~ " values for on-going development. The"
#~ " patchlevel should be the release tag"
#~ " with a `+`. Also, if you "
#~ "cherry-picked changes from the standard "
#~ "release branch into the release "
#~ "engineering branch for this release, you"
#~ " will now need to manual remove "
#~ "each blurb entry from the "
#~ "``Misc/NEWS.d/next`` directory that was "
#~ "cherry-picked into the release you "
#~ "are working on since that blurb "
#~ "entry is now captured in the "
#~ "merged x.y.z.rst file for the new "
#~ "release.  Otherwise, the blurb entry "
#~ "will appear twice in the "
#~ "`changelog.html` file, once under `Python "
#~ "next` and again under `x.y.z`."
#~ msgstr ""

#~ msgid ""
#~ "If this is a **new branch** "
#~ "release, add a ``Branch protection "
#~ "rule`` for the newly created branch "
#~ "(X.Y).  Look at the values for the"
#~ " previous release branch (X.Y-1) and "
#~ "use them as a template. "
#~ "https://github.com/python/cpython/settings/branches/"
#~ msgstr ""

#~ msgid ""
#~ "Also, add a ``needs backport to "
#~ "X.Y`` label to the Github repo. "
#~ "https://github.com/python/cpython/labels"
#~ msgstr ""

#~ msgid ""
#~ "You can now re-enable enforcement "
#~ "of branch settings against administrators "
#~ "on Github.  Go back to the "
#~ "``Settings | Branch`` page:"
#~ msgstr ""

#~ msgid ""
#~ "If new types of files are added"
#~ " to the release (e.g. the web-"
#~ "based installers or redistributable zip "
#~ "files added to Python 3.5) someone "
#~ "will need to update add-to-"
#~ "pydotorg.py so it recognizes these new"
#~ " files. (It's best to update add-"
#~ "to-pydotorg.py when file types are "
#~ "removed, too.)"
#~ msgstr ""

#~ msgid ""
#~ "Add the new version to the *Python"
#~ " Documentation by Version* page "
#~ "`https://www.python.org/doc/versions/` and remove "
#~ "the current version from any 'in "
#~ "development' section."
#~ msgstr ""

#~ msgid ""
#~ "For X.Y.Z, edit all the previous "
#~ "X.Y releases' page(s) to point to "
#~ "the new release.  This includes the "
#~ "content field of the `Downloads -> "
#~ "Releases` entry for the release::"
#~ msgstr ""

#~ msgid ""
#~ "And, for those releases having separate"
#~ " release page entries (phasing these "
#~ "out?), update those pages as well, "
#~ "e.g. `download/releases/x.y.z`::"
#~ msgstr ""

#~ msgid ""
#~ "If you're releasing a version before "
#~ "*x.y.0*, or *x.y.z release candidate N,*"
#~ " you should add it to this "
#~ "page, removing the previous pre-release"
#~ " of version *x.y* as needed."
#~ msgstr ""

#~ msgid ""
#~ "If you're releasing *x.y.z final*, you"
#~ " need to remove the pre-release "
#~ "version from this page."
#~ msgstr ""

#~ msgid "Other steps (other update for new web site)??"
#~ msgstr ""

#~ msgid ""
#~ "Write the announcement for the mailing"
#~ " lists.  This is the fuzzy bit "
#~ "because not much can be automated.  "
#~ "You can use an earlier announcement "
#~ "as a template, but edit it for "
#~ "content!"
#~ msgstr ""

#~ msgid "Once the announcement is ready, send it to the following addresses:"
#~ msgstr ""

#~ msgid ""
#~ "Send email to python-committers "
#~ "informing them that the release has "
#~ "been published and a reminder about "
#~ "any relevant changes in policy based "
#~ "on the phase of the release cycle."
#~ "  In particular, if this is a "
#~ "**new branch** release, remind everyone "
#~ "that the new release branch exists "
#~ "and that they need to start "
#~ "considering whether to backport to it"
#~ " when merging changes to main."
#~ msgstr ""

#~ msgid "Update any release PEPs (e.g. 361) with the release dates."
#~ msgstr ""

#~ msgid "Update the tracker at https://bugs.python.org:"
#~ msgstr ""

#~ msgid ""
#~ "Flip all the deferred blocker issues "
#~ "back to release blocker for the "
#~ "next release."
#~ msgstr ""

#~ msgid "Add version X.Y+1 as when version X.Y enters alpha."
#~ msgstr ""

#~ msgid "Change non-doc RFEs to version X.Y+1 when version X.Y enters beta."
#~ msgstr ""

#~ msgid ""
#~ "Add ``X.Yregression`` keyword "
#~ "(https://bugs.python.org/keyword) when version X.Y"
#~ " enters beta."
#~ msgstr ""

#~ msgid ""
#~ "Update 'behavior' issues from versions "
#~ "that your release make unsupported to"
#~ " the next supported version."
#~ msgstr ""

#~ msgid "Update the issue tracker for the new branch."
#~ msgstr ""

#~ msgid "Add the new version to the versions list (contact the tracker admins?)."
#~ msgstr ""

#~ msgid ""
#~ "Add a `regressions keyword "
#~ "<https://bugs.python.org/keyword>`_ for the release"
#~ msgstr ""

#~ msgid "Ensure buildbots are defined for the new branch (contact zware)."
#~ msgstr ""

#~ msgid ""
#~ "Ensure the daily docs build scripts "
#~ "are updated to include the new "
#~ "branch (contact DE)."
#~ msgstr ""

#~ msgid ""
#~ "Ensure the various Github bots are "
#~ "updated, as needed, for the new "
#~ "branch, in particular, make sure "
#~ "backporting to the new branch works "
#~ "(contact core-workflow team) "
#~ "https://github.com/python/core-workflow/issues"
#~ msgstr ""

#~ msgid ""
#~ "Update the ``VERSIONS`` list of "
#~ "`docsbuild scripts`_: change the version "
#~ "state to ``EOL``."
#~ msgstr ""

#~ msgid ""
#~ "On the docs download server "
#~ "(docs.nyc1.psf.io), ensure the top-level "
#~ "symlink points to the upload of "
#~ "unpacked html docs from final release::"
#~ msgstr ""

#~ msgid ""
#~ "Remove the release from the list "
#~ "of \"Active Python Releases\" on the "
#~ "Downloads page.  To do this, log "
#~ "in to the admin page for "
#~ "python.org, navigate to Boxes, and edit"
#~ " the `downloads-active-releases` entry."
#~ "  Simply strip out the relevant "
#~ "paragraph of HTML for your release.  "
#~ "(You'll probably have to do the "
#~ "`curl -X PURGE` trick to purge the"
#~ " cache if you want to confirm "
#~ "you made the change correctly.)"
#~ msgstr ""

#~ msgid ""
#~ "Retire the release from the "
#~ "bugs.python.org issue tracker. Tasks include:"
#~ msgstr ""

#~ msgid "remove branch from tracker list of versions"
#~ msgstr ""

#~ msgid "remove any release-release keywords (3.3regressions)"
#~ msgstr ""

#~ msgid ""
#~ "Note, with the likely future migration"
#~ " of bug tracking from the current "
#~ "Roundup bugs.python.org to Github issues "
#~ "and with the impending end-of-life"
#~ " of Python 2.7, it probably makes "
#~ "sense to avoid unnecessary churn for "
#~ "currently and about-to-be retired "
#~ "3.x branches by deferring any major "
#~ "wholesale changes to existing issues "
#~ "until the migration process is "
#~ "clarified."
#~ msgstr ""

#~ msgid ""
#~ "In practice, you're probably not going"
#~ " to do this yourself, you're going"
#~ " to ask one of the bpo "
#~ "maintainers to do it for you (e.g."
#~ " Ezio Melotti, Zachary Ware.)"
#~ msgstr ""

#~ msgid ""
#~ "mailing lists (python-committers, python-"
#~ "dev, python-list, python-announcements)"
#~ msgstr ""

#~ msgid "discuss.python.org and Zulip"
#~ msgstr ""

#~ msgid "NOTE, have Steve Dower review; probably obsolete."
#~ msgstr ""

#~ msgid ""
#~ "Windows has a MSI installer, various "
#~ "flavors of Windows have \"special "
#~ "limitations\", and the Windows installer "
#~ "also packs precompiled \"foreign\" binaries"
#~ " (Tcl/Tk, expat, etc).  So Windows "
#~ "testing is tiresome but very necessary."
#~ msgstr ""

