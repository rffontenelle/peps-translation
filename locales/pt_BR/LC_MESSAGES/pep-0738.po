# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-14 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: pt_BR\n"
"Language-Team: pt_BR <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../peps/peps/pep-0738.rst
msgid "Author"
msgstr ""

#: ../../peps/peps/pep-0738.rst:3
msgid "Malcolm Smith <smith@chaquo.com>"
msgstr ""

#: ../../peps/peps/pep-0738.rst
msgid "Sponsor"
msgstr ""

#: ../../peps/peps/pep-0738.rst:4
msgid "Petr Viktorin <encukou@gmail.com>"
msgstr ""

#: ../../peps/peps/pep-0738.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/peps/pep-0738.rst:5
msgid ""
"https://discuss.python.org/t/pep-738-adding-android-as-a-supported-"
"platform/40975"
msgstr ""

#: ../../peps/peps/pep-0738.rst
msgid "Status"
msgstr ""

#: ../../peps/peps/pep-0738.rst:6
msgid "Accepted"
msgstr ""

#: ../../peps/peps/pep-0738.rst
msgid "Type"
msgstr ""

#: ../../peps/peps/pep-0738.rst:7
msgid "Standards Track"
msgstr ""

#: ../../peps/peps/pep-0738.rst
msgid "Created"
msgstr ""

#: ../../peps/peps/pep-0738.rst:8
msgid "12-Dec-2023"
msgstr ""

#: ../../peps/peps/pep-0738.rst
msgid "Python-Version"
msgstr ""

#: ../../peps/peps/pep-0738.rst:9
msgid "3.13"
msgstr ""

#: ../../peps/peps/pep-0738.rst
msgid "Resolution"
msgstr ""

#: ../../peps/peps/pep-0738.rst:10
msgid ""
"https://discuss.python.org/t/pep-738-adding-android-as-a-supported-"
"platform/40975/23"
msgstr ""

#: ../../peps/peps/pep-0738.rst:14
msgid "Abstract"
msgstr ""

#: ../../peps/peps/pep-0738.rst:16
msgid ""
"This PEP proposes adding Android as a supported platform in CPython. The "
"initial goal is for Android to achieve Tier 3 support in Python 3.13."
msgstr ""

#: ../../peps/peps/pep-0738.rst:19
msgid ""
"This PEP is based on :pep:`730` â€“ \"Adding iOS as a supported platform\" by "
"Russell Keith-Magee, and covers many of the same issues. Notable differences "
"between the two platforms can be found by searching for the word \"iOS\"."
msgstr ""

#: ../../peps/peps/pep-0738.rst:25
msgid "Motivation"
msgstr ""

#: ../../peps/peps/pep-0738.rst:27
#, python-format
msgid ""
"Over the last 15 years, mobile platforms have become increasingly important "
"parts of the computing landscape. Android is the operating system that runs "
"on about `70% of these devices <https://gs.statcounter.com/os-market-share/"
"mobile/worldwide>`__. However, there is no official support for Android in "
"CPython."
msgstr ""

#: ../../peps/peps/pep-0738.rst:33
msgid ""
"The `Chaquopy <https://chaquo.com/chaquopy/>`__, `BeeWare <https://beeware."
"org>`__ and `Kivy <https://kivy.org>`__ projects have all supported Android "
"for many years, and they have all been used to generate applications that "
"have been accepted for publication in the Google Play Store. This "
"demonstrates the technical feasibility of Android support."
msgstr ""

#: ../../peps/peps/pep-0738.rst:39
msgid ""
"It is important for the future of Python as a language that it is able to be "
"used on any platform that has widespread adoption. Otherwise, potential "
"users will choose other languages that *do* provide support for these "
"platforms. This is especially true in education, where the next generation "
"of developers is in many cases already spending more time using mobile "
"platforms than desktop ones."
msgstr ""

#: ../../peps/peps/pep-0738.rst:47
msgid "Rationale"
msgstr ""

#: ../../peps/peps/pep-0738.rst:50
msgid "General"
msgstr ""

#: ../../peps/peps/pep-0738.rst:52
msgid ""
"Android is broadly a POSIX platform, based on a Linux kernel and the ELF "
"binary format. It does not use glibc, instead providing its own C library "
"implementation called Bionic. As a result, it is generally not binary-"
"compatible with any other Linux distribution, even if the architecture "
"matches. It also has its own filesystem layout which doesn't resemble any "
"other Unix."
msgstr ""

#: ../../peps/peps/pep-0738.rst:59
msgid ""
"However, Android's source-compatibility with Linux is quite good. In its "
"early years, the C library was very incomplete, but most of the gaps were "
"filled by around 2014. Since then, any C code that compiles for Linux can "
"usually be compiled for Android, unless it involves direct access to "
"hardware devices or operating system services."
msgstr ""

#: ../../peps/peps/pep-0738.rst:65
msgid ""
"This is also true of CPython. Although it has never officially supported "
"Android, recent versions (since 3.6) can already be compiled for Android "
"with minimal patching."
msgstr ""

#: ../../peps/peps/pep-0738.rst:72
msgid "OS versions"
msgstr ""

#: ../../peps/peps/pep-0738.rst:74
msgid "Each Android version can be identified in three ways:"
msgstr ""

#: ../../peps/peps/pep-0738.rst:76
msgid ""
"A conventional dotted version number (though recent versions have all used "
"whole numbers)"
msgstr ""

#: ../../peps/peps/pep-0738.rst:78
msgid ""
"A sequential integer \"API level\" (the most common form in developer "
"documentation)"
msgstr ""

#: ../../peps/peps/pep-0738.rst:80
msgid ""
"An alphabetic confectionery-themed code name (no longer used for marketing, "
"but still appears in developer documentation)"
msgstr ""

#: ../../peps/peps/pep-0738.rst:83
msgid ""
"There is no consistent pattern to link one of these to another; they must be "
"looked up in `a table <https://en.wikipedia.org/wiki/"
"Android_version_history>`__."
msgstr ""

#: ../../peps/peps/pep-0738.rst:86
#, python-format
msgid ""
"A new major Android version is released each year, but the updates available "
"to each device are entirely under the control of its manufacturer. "
"Unfortunately many manufacturers stop sending updates to devices long before "
"their users are ready to dispose of them. For example, as of October 2023, "
"the oldest Android version still receiving security updates was API level "
"30, but according to `Google's own statistics <https://dl.google.com/android/"
"studio/metadata/distributions.json>`__, only 60% of devices were on that "
"version or newer."
msgstr ""

#: ../../peps/peps/pep-0738.rst:95
#, python-format
msgid ""
"For Python 3.13 we therefore propose the minimum Android version to be 5.0 "
"(API level 21), which was released in 2014. According to the statistics "
"above, this would cover 99% of active devices."
msgstr ""

#: ../../peps/peps/pep-0738.rst:101
msgid "Development tools"
msgstr ""

#: ../../peps/peps/pep-0738.rst:103
msgid ""
"The Android development tools are equally supported on Linux (x86_64), "
"Windows (x86_64) and macOS (x86_64 and ARM64). For CPython, the most "
"important tools are:"
msgstr ""

#: ../../peps/peps/pep-0738.rst:107
msgid ""
"The NDK (native development kit) contains a C and C++ compiler (clang), "
"linker (lld), and headers for all the system libraries."
msgstr ""

#: ../../peps/peps/pep-0738.rst:110
msgid ""
"Binary compatibility between libraries compiled with different versions of "
"the NDK is generally very good, but for reproducibility it would be best for "
"each Python version to stick with one NDK version throughout its life. For "
"Python 3.13, this would be the current NDK long-term support version, r26."
msgstr ""

#: ../../peps/peps/pep-0738.rst:115
msgid ""
"Each NDK version can be set to target any of a wide range of Android "
"versions. For example, NDK r26 supports :ref:`API levels <738-os-versions>` "
"21 to 34. However, binaries compiled for an older Android version will "
"usually keep on working indefinitely on newer versions; exceptions to this "
"rule are only made for security reasons."
msgstr ""

#: ../../peps/peps/pep-0738.rst:121
msgid "Gradle is the tool used to build complete, deployable apps."
msgstr ""

#: ../../peps/peps/pep-0738.rst:123
msgid ""
"The emulator, based on QEMU, is a simulated Android device running on a "
"development machine. Unlike on iOS, an emulator uses the same ABI as a real "
"device of the same architecture, and can run the same binaries."
msgstr ""

#: ../../peps/peps/pep-0738.rst:127
msgid ""
"These tools may all be used either from the command line, or through the "
"Android Studio IDE, which is based on IntelliJ IDEA."
msgstr ""

#: ../../peps/peps/pep-0738.rst:132
msgid "Architectures"
msgstr ""

#: ../../peps/peps/pep-0738.rst:134
msgid ""
"Android currently supports 4 architectures. Their names as used by the "
"Android tools are:"
msgstr ""

#: ../../peps/peps/pep-0738.rst:137
msgid "``armeabi-v7a``"
msgstr ""

#: ../../peps/peps/pep-0738.rst:138
msgid "``arm64-v8a``"
msgstr ""

#: ../../peps/peps/pep-0738.rst:139
msgid "``x86``"
msgstr ""

#: ../../peps/peps/pep-0738.rst:140
msgid "``x86_64``"
msgstr ""

#: ../../peps/peps/pep-0738.rst:142
msgid ""
"Virtually all current physical devices use one of the ARM architectures. "
"``x86`` and ``x86_64`` are supported for use in the emulator."
msgstr ""

#: ../../peps/peps/pep-0738.rst:145
msgid ""
"For Python 3.13 we propose that Tier 3 support will only cover the 64-bit "
"platforms (``arm64-v8a`` and ``x86_64``):"
msgstr ""

#: ../../peps/peps/pep-0738.rst:148
msgid ""
"``x86`` has not been supported as a development platform since 2020, and no "
"new emulator images have been released since then."
msgstr ""

#: ../../peps/peps/pep-0738.rst:151
msgid ""
"``armeabi-v7a``'s proportion of active devices is now `less than 10% and "
"steadily falling <https://github.com/chaquo/chaquopy/"
"issues/709#issuecomment-1744541892>`__."
msgstr ""

#: ../../peps/peps/pep-0738.rst:155
msgid ""
"It would also be more difficult to cover with a reliable buildbot, since "
"there are no native hosts available for the emulator (ARM64 Macs don't have "
"hardware support for ARM32 code). Although cross-architecture emulation is "
"possible, it has much worse performance and stability, which is why the "
"``armeabi-v7a`` emulator images have not been updated since 2016."
msgstr ""

#: ../../peps/peps/pep-0738.rst:161
msgid ""
"However, it continues to be used for watches and ultra-low-cost phones. If "
"this persists, we may need to consider adding it in a future Python version."
msgstr ""

#: ../../peps/peps/pep-0738.rst:164
msgid ""
"Even if 32-bit architectures are not officially supported, no changes should "
"be made which would impede any downstream projects which still wish to build "
"them."
msgstr ""

#: ../../peps/peps/pep-0738.rst:169
msgid "App lifecycle"
msgstr ""

#: ../../peps/peps/pep-0738.rst:171
msgid ""
"The primary programming language in Android apps is Java, or its modern "
"descendant Kotlin. As such, an app does not provide its own executable file. "
"Instead, all apps start off as a Java virtual machine running an executable "
"provided by the operating system. The app's Java code can then add native "
"code to the process by loading dynamic libraries and calling them through "
"JNI."
msgstr ""

#: ../../peps/peps/pep-0738.rst:177
msgid ""
"Unlike iOS, creating subprocesses *is* supported on Android. However apps "
"may only run executables in `certain locations <https://issuetracker.google."
"com/issues/128554619#comment4>`__, none of which are writable at runtime. "
"Long-running subprocesses are `officially discouraged <https://issuetracker."
"google.com/issues/128554619#comment4>`__, and are not guaranteed to be "
"supported in future Android versions."
msgstr ""

#: ../../peps/peps/pep-0738.rst:184
msgid ""
"Android does provide a command-line shell, but this is intended only for use "
"by developers, and is not available to the typical end user."
msgstr ""

#: ../../peps/peps/pep-0738.rst:187
msgid ""
"For these reasons, the recommended way of running Python on Android will be "
"by loading ``libpython3.x.so`` into the main app process. A ``python3.x`` "
"executable will not be officially supported on this platform."
msgstr ""

#: ../../peps/peps/pep-0738.rst:193
msgid "Specification"
msgstr ""

#: ../../peps/peps/pep-0738.rst:196
msgid "Scope of work"
msgstr ""

#: ../../peps/peps/pep-0738.rst:198
msgid ""
"The focus of this work will be to produce an Android equivalent to the "
"existing `Windows embeddable package <https://docs.python.org/3/using/"
"windows.html#the-embeddable-package>`__, i.e. a set of compiled libraries "
"which developers can add to their apps. No installer will be required."
msgstr ""

#: ../../peps/peps/pep-0738.rst:204
msgid ""
"Adding Android as a Tier 3 platform only requires adding support for "
"compiling an Android-compatible build from the unpatched CPython source "
"code. It does not necessarily require there to be any officially distributed "
"Android artifacts on python.org, although these could be added in the future."
msgstr ""

#: ../../peps/peps/pep-0738.rst:209
msgid ""
"Android will be built using the same configure and Makefile system as other "
"POSIX platforms, and must therefore be built *on* a POSIX platform. Both "
"Linux and macOS will be supported."
msgstr ""

#: ../../peps/peps/pep-0738.rst:213
msgid ""
"A Gradle project will be provided for the purpose of running the CPython "
"test suite. Tooling will be provided to automate the process of building the "
"test suite app, starting the emulator, installing the test suite, and "
"executing it."
msgstr ""

#: ../../peps/peps/pep-0738.rst:220
msgid "Linkage"
msgstr ""

#: ../../peps/peps/pep-0738.rst:222
msgid ""
"For the reasons discussed in `App lifecycle`_, Python will be included in "
"the app as a dynamic ``libpython3.x.so`` library which can be loaded into an "
"app using ``dlopen``."
msgstr ""

#: ../../peps/peps/pep-0738.rst:226
msgid ""
"Unlike Linux, Android does not implicitly use a dlopened library to resolve "
"relocations in subsequently-loaded libraries, `even if RTLD_GLOBAL is used "
"<https://github.com/android/ndk/issues/1244#issuecomment-620310397>`__. All "
"Python extension modules must therefore be explicitly linked against "
"``libpython3.x.so`` when building for Android."
msgstr ""

#: ../../peps/peps/pep-0738.rst:232
msgid ""
"An extension module linked against ``libpython3.x.so`` cannot be loaded by "
"an executable that has been statically linked against ``libpython3.x.a``. "
"Therefore, a static ``libpython3.x.a`` library will not be supported on "
"Android. This is the same pattern used by CPython on Windows."
msgstr ""

#: ../../peps/peps/pep-0738.rst:237
msgid ""
"This approach also allows using the ``-Wl,--no-undefined`` option to detect "
"missing symbols at build time, which can be a significant time-saver."
msgstr ""

#: ../../peps/peps/pep-0738.rst:240
msgid ""
"Unlike iOS, Android allows dynamic libraries to be loaded from any location, "
"so a directory tree containing co-located .py, .pyc and .so files can be "
"handled by Python's standard importer."
msgstr ""

#: ../../peps/peps/pep-0738.rst:246
msgid "Standard library"
msgstr ""

#: ../../peps/peps/pep-0738.rst:249
msgid "Unsupported modules"
msgstr ""

#: ../../peps/peps/pep-0738.rst:251
msgid ""
"A number of standard library modules will not be supported on Android "
"because the underlying C APIs are not available:"
msgstr ""

#: ../../peps/peps/pep-0738.rst:254
msgid "``curses`` and ``readline``"
msgstr ""

#: ../../peps/peps/pep-0738.rst:255
msgid "``dbm.gnu`` and ``dbm.ndbm``"
msgstr ""

#: ../../peps/peps/pep-0738.rst:256
msgid "``grp``"
msgstr ""

#: ../../peps/peps/pep-0738.rst:257
msgid ""
"``multiprocessing`` â€“ although subprocesses in general are allowed (see `App "
"lifecycle`_), Android does not support any part of the `System V IPC API "
"<https://man7.org/linux/man-pages/man7/sysvipc.7.html>`__."
msgstr ""

#: ../../peps/peps/pep-0738.rst:260
msgid ""
"``tkinter`` and ``turtle`` â€“ these would require an Android build of Tk "
"itself, which is not officially supported."
msgstr ""

#: ../../peps/peps/pep-0738.rst:264
msgid "``sys``"
msgstr ""

#: ../../peps/peps/pep-0738.rst:266
msgid ""
"``sys.platform`` will return ``\"android\"``. Although Android is based on "
"Linux, it differs in enough significant ways that a separate name is "
"justified."
msgstr ""

#: ../../peps/peps/pep-0738.rst:269
msgid ""
"When embedded in an Android app, the C-level stdio streams are not connected "
"to anything. So in this mode, ``sys.stdout`` and ``sys.stderr`` will be "
"redirected to the system `Logcat <https://developer.android.com/studio/debug/"
"logcat>`__, which can be viewed with the Android development tools. ``sys."
"stdin`` will always return EOF."
msgstr ""

#: ../../peps/peps/pep-0738.rst:276
msgid "``platform``"
msgstr ""

#: ../../peps/peps/pep-0738.rst:278
msgid ""
"Most of the values returned by the ``platform`` module will match those "
"returned by ``os.uname()``, with the exception of:"
msgstr ""

#: ../../peps/peps/pep-0738.rst:281
msgid ""
"``platform.system()`` - ``\"Android\"``, instead of the default ``\"Linux\"``"
msgstr ""

#: ../../peps/peps/pep-0738.rst:283
msgid ""
"``platform.release()`` - Android version number, as a string (e.g. "
"``\"14\"``), instead of the Linux kernel version"
msgstr ""

#: ../../peps/peps/pep-0738.rst:286
msgid ""
"In addition, a ``platform.android_ver()`` method will be added, which "
"returns a namedtuple containing the following:"
msgstr ""

#: ../../peps/peps/pep-0738.rst:289
msgid ""
"``release`` - Android version of the device, as a string (e.g. ``\"14\"``)"
msgstr ""

#: ../../peps/peps/pep-0738.rst:290
msgid ""
"``api_level`` - :ref:`API level <738-os-versions>` of the device, as an "
"integer (e.g. ``34``)"
msgstr ""

#: ../../peps/peps/pep-0738.rst:292
msgid ""
"``min_api_level`` - Minimum API level this build of Python can run on, as an "
"integer (e.g. ``23``). This is the same as ``sys.getandroidapilevel``."
msgstr ""

#: ../../peps/peps/pep-0738.rst:294
msgid ""
"``manufacturer`` - `manufacturer <https://developer.android.com/reference/"
"android/os/Build#MANUFACTURER>`__ of the device, as a string (e.g. "
"``\"Google\"``)"
msgstr ""

#: ../../peps/peps/pep-0738.rst:297
msgid ""
"``model`` - `model name <https://developer.android.com/reference/android/os/"
"Build#MODEL>`__ of the device, as a string (e.g. ``\"Pixel 7\"``)"
msgstr ""

#: ../../peps/peps/pep-0738.rst:300
msgid ""
"``device`` - `device name <https://developer.android.com/reference/android/"
"os/Build#DEVICE>`__ of the device, as a string (e.g. ``\"panther\"``)"
msgstr ""

#: ../../peps/peps/pep-0738.rst:304
msgid ""
"Which one of ``model`` and ``device`` is more likely to be unique, and which "
"one is more likely to resemble the marketing name, varies between different "
"manufacturers."
msgstr ""

#: ../../peps/peps/pep-0738.rst:309
msgid "``os``"
msgstr ""

#: ../../peps/peps/pep-0738.rst:311
msgid ""
"``os.uname()`` will return the raw result of a POSIX ``uname()`` call. This "
"will result in the following values:"
msgstr ""

#: ../../peps/peps/pep-0738.rst:314
msgid "``sysname`` - ``\"Linux\"``"
msgstr ""

#: ../../peps/peps/pep-0738.rst:316
msgid ""
"``release`` - The Linux kernel version (e.g. ``\"5.10.157-android13-4-00003-"
"gdfb1120f912b-ab10994928\"``)"
msgstr ""

#: ../../peps/peps/pep-0738.rst:319
msgid ""
"This approach treats the ``os`` module as a \"raw\" interface to system "
"APIs, and ``platform`` as a higher-level API providing more generally useful "
"values."
msgstr ""

#: ../../peps/peps/pep-0738.rst:324
msgid "CI resources"
msgstr ""

#: ../../peps/peps/pep-0738.rst:326
msgid ""
"Since Android emulators and physical devices use the same ABI, and come with "
"identical or very similar operating system binaries, testing on emulators "
"will be adequate. x86_64 emulators can be run on Linux, macOS or Windows, "
"but ARM64 emulators are only supported on ARM64 Macs."
msgstr ""

#: ../../peps/peps/pep-0738.rst:331
msgid ""
"Anaconda `has offered <https://discuss.python.org/t/pep-738-adding-android-"
"as-a-supported-platform/40975/20>`__ to provide physical hardware to run "
"Android buildbots. These will include both Linux x86_64 and macOS ARM64 "
"machines, which would cover both supported runtime architectures and both "
"supported build platforms."
msgstr ""

#: ../../peps/peps/pep-0738.rst:337
msgid ""
"CPython does not currently test Tier 3 platforms on GitHub Actions, but if "
"this ever changes, their Linux and macOS runners are also able to host "
"Android emulators. macOS ARM64 runners have been free to all public "
"repositories `since January 2024 <https://github.blog/changelog/2024-01-30-"
"github-actions-introducing-the-new-m1-macos-runner-available-to-open-source/"
">`__."
msgstr ""

#: ../../peps/peps/pep-0738.rst:345
msgid "Packaging"
msgstr ""

#: ../../peps/peps/pep-0738.rst:347
msgid ""
"Android wheels will use tags in the format ``android_<api-level>_<abi>``. "
"For example:"
msgstr ""

#: ../../peps/peps/pep-0738.rst:350
msgid "``android_21_arm64_v8a``"
msgstr ""

#: ../../peps/peps/pep-0738.rst:351
msgid "``android_21_x86_64``"
msgstr ""

#: ../../peps/peps/pep-0738.rst:353
msgid ""
"For the meaning of ``<api-level>``, see `OS versions`_. In the context of "
"the wheel tag, it indicates the minimum Android version that was selected "
"when the wheel was compiled. Installation tools such as pip should interpret "
"this in a similar way to the existing macOS tags, i.e. an app with a minimum "
"API level of N can incorporate wheels tagged with API level N or older."
msgstr ""

#: ../../peps/peps/pep-0738.rst:359
msgid ""
"This format originates from the Chaquopy project, which currently maintains "
"a `wheel repository <https://chaquo.com/pypi-13.1/>`__ with tags varying "
"between API levels 16 and 21."
msgstr ""

#: ../../peps/peps/pep-0738.rst:363
msgid ""
"However, relying on a small group of Android enthusiasts to build the whole "
"Python ecosystem is not a scalable solution. Until prominent libraries "
"routinely release their own Android wheels, the ability of the community to "
"adopt Python on Android will be limited."
msgstr ""

#: ../../peps/peps/pep-0738.rst:368
msgid ""
"Therefore, it will be necessary to clearly document how projects can add "
"Android builds to their CI and release tooling. Adding Android support to "
"tools like `crossenv <https://crossenv.readthedocs.io/>`__ and `cibuildwheel "
"<https://cibuildwheel.readthedocs.io/>`__ may be one way to achieve this."
msgstr ""

#: ../../peps/peps/pep-0738.rst:373
msgid ""
"The Android wheel tag format should also be added to the list of tags "
"accepted by PyPI."
msgstr ""

#: ../../peps/peps/pep-0738.rst:378
msgid "PEP 11 Update"
msgstr ""

#: ../../peps/peps/pep-0738.rst:380
msgid ""
":pep:`11` will be updated to include the two supported Android ABIs. "
"Autoconf already identifies them with the following triplets:"
msgstr ""

#: ../../peps/peps/pep-0738.rst:383
msgid "``aarch64-linux-android``"
msgstr ""

#: ../../peps/peps/pep-0738.rst:384
msgid "``x86_64-linux-android``"
msgstr ""

#: ../../peps/peps/pep-0738.rst:386
msgid ""
"Petr Viktorin will serve as the initial core team contact for these ABIs."
msgstr ""

#: ../../peps/peps/pep-0738.rst:390
msgid "Backwards Compatibility"
msgstr ""

#: ../../peps/peps/pep-0738.rst:392
msgid ""
"Adding a new platform does not introduce any backwards compatibility "
"concerns to CPython itself. However, there may be some backwards "
"compatibility implications on the projects that have historically provided "
"CPython support (i.e., BeeWare and Kivy) if the final form of any CPython "
"patches don't align with the patches they have historically used."
msgstr ""

#: ../../peps/peps/pep-0738.rst:400
msgid "Security Implications"
msgstr ""

#: ../../peps/peps/pep-0738.rst:402
msgid "Adding a new platform does not add any new security implications."
msgstr ""

#: ../../peps/peps/pep-0738.rst:406
msgid "How to Teach This"
msgstr ""

#: ../../peps/peps/pep-0738.rst:408
msgid ""
"The education needs related to this PEP relate to two groups of developers."
msgstr ""

#: ../../peps/peps/pep-0738.rst:410
msgid ""
"First, developers of *apps* need to know how to build Python into an Android "
"app, along with their own Python code and any supporting packages, and how "
"to use them all at runtime. The documentation will cover this in a similar "
"form to the existing `Windows embeddable package <https://docs.python.org/3/"
"using/windows.html#the-embeddable-package>`__. However, it will recommend "
"most developers to use higher-level tools such as `Briefcase <https://"
"briefcase.readthedocs.io/en/stable/>`__, `Chaquopy <https://chaquo.com/"
"chaquopy/>`__ and `Buildozer <https://buildozer.readthedocs.io/en/latest/"
">`__, all of which already have comprehensive documentation."
msgstr ""

#: ../../peps/peps/pep-0738.rst:421
msgid ""
"Second, developers of *packages* with binary components need to know how to "
"build and release them for Android (see `Packaging`_)."
msgstr ""

#: ../../peps/peps/pep-0738.rst:426
msgid "Reference Implementation"
msgstr ""

#: ../../peps/peps/pep-0738.rst:428
msgid ""
"The `Chaquopy repository <https://github.com/chaquo/chaquopy/tree/master/"
"target>`__ contains a reference patch and build scripts. These will have to "
"be decoupled from the other components of Chaquopy before they can be "
"upstreamed."
msgstr ""

#: ../../peps/peps/pep-0738.rst:433
msgid ""
"`Briefcase <https://briefcase.readthedocs.org>`__ provides a reference "
"implementation of code to execute test suites on Android devices and "
"emulators. The `Toga Testbed <https://github.com/beeware/toga/tree/main/"
"testbed>`__ is an example of a test suite that is executed on the Android "
"emulator using GitHub Actions."
msgstr ""

#: ../../peps/peps/pep-0738.rst:441
msgid "Copyright"
msgstr ""

#: ../../peps/peps/pep-0738.rst:443
msgid ""
"This document is placed in the public domain or under the CC0-1.0-Universal "
"license, whichever is more permissive."
msgstr ""
