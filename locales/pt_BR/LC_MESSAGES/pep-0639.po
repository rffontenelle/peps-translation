# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-14 02:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../peps/peps/pep-0639.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/peps/pep-0639.rst:3
msgid ""
"Philippe Ombredanne <pombredanne@nexb.com>, C.A.M. Gerlach <CAM."
"Gerlach@Gerlach.CAM>, Karolina Surma <karolina.surma@gazeta.pl>,"
msgstr ""

#: ../../peps/peps/pep-0639.rst
msgid "PEP-Delegate"
msgstr ""

#: ../../peps/peps/pep-0639.rst:6
msgid "Brett Cannon <brett@python.org>"
msgstr ""

#: ../../peps/peps/pep-0639.rst
msgid "Discussions-To"
msgstr ""

#: ../../peps/peps/pep-0639.rst:7
msgid "https://discuss.python.org/t/53020"
msgstr ""

#: ../../peps/peps/pep-0639.rst
msgid "Status"
msgstr "Status"

#: ../../peps/peps/pep-0639.rst:8
msgid "Draft"
msgstr ""

#: ../../peps/peps/pep-0639.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/peps/pep-0639.rst:9
msgid "Standards Track"
msgstr ""

#: ../../peps/peps/pep-0639.rst
msgid "Topic"
msgstr ""

#: ../../peps/peps/pep-0639.rst:10
msgid "Packaging"
msgstr ""

#: ../../peps/peps/pep-0639.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/peps/pep-0639.rst:11
msgid "15-Aug-2019"
msgstr ""

#: ../../peps/peps/pep-0639.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/peps/pep-0639.rst:12
msgid ""
"`15-Aug-2019 <https://discuss.python.org/t/2154>`__, `17-Dec-2021 <https://"
"discuss.python.org/t/12622>`__, `10-May-2024 <https://discuss.python.org/"
"t/53020>`__,"
msgstr ""

#: ../../peps/peps/pep-0639.rst:20
msgid "Abstract"
msgstr ""

#: ../../peps/peps/pep-0639.rst:22
msgid ""
"This PEP defines a specification how licenses are documented in the Python "
"projects."
msgstr ""

#: ../../peps/peps/pep-0639.rst:25
msgid "To achieve that, it:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:27
msgid ""
"Adopts the `SPDX license expression syntax <639-spdx_>`__ as a means of "
"expressing the license for a Python project."
msgstr ""

#: ../../peps/peps/pep-0639.rst:30
msgid ""
"Defines how to include license files within the projects, source and built "
"distributions."
msgstr ""

#: ../../peps/peps/pep-0639.rst:33
msgid ""
"Specifies the necessary changes to :term:`Core Metadata` and the "
"corresponding :term:`Pyproject Metadata key`\\s"
msgstr ""

#: ../../peps/peps/pep-0639.rst:36
msgid ""
"Describes the necessary changes to the `source distribution (sdist) "
"<sdistspec_>`__, `built distribution (wheel) <wheelspec_>`__ and `installed "
"project <installedspec_>`__ standards."
msgstr ""

#: ../../peps/peps/pep-0639.rst:41
msgid ""
"This will make license declaration simpler and less ambiguous for package "
"authors to create, end users to understand, and tools to programmatically "
"process."
msgstr ""

#: ../../peps/peps/pep-0639.rst:45
msgid ""
"The changes will update the `Core Metadata specification "
"<coremetadataspec_>`__ to version 2.4."
msgstr ""

#: ../../peps/peps/pep-0639.rst:51
msgid "Goals"
msgstr ""

#: ../../peps/peps/pep-0639.rst:53
msgid ""
"This PEP's scope is limited to covering new mechanisms for documenting the "
"license of a :term:`distribution package`, specifically defining:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:56
msgid "A means of specifying a SPDX :term:`license expression`."
msgstr ""

#: ../../peps/peps/pep-0639.rst:57
msgid ""
"A method of including license texts in :term:`distribution package`\\s and "
"installed :term:`Project`\\s."
msgstr ""

#: ../../peps/peps/pep-0639.rst:60
msgid ""
"The changes that this PEP requires have been designed to minimize impact and "
"maximize backward compatibility."
msgstr ""

#: ../../peps/peps/pep-0639.rst:67
msgid "Non-Goals"
msgstr ""

#: ../../peps/peps/pep-0639.rst:69
msgid ""
"This PEP doesn't recommend any particular license to be chosen by any "
"particular package author."
msgstr ""

#: ../../peps/peps/pep-0639.rst:72
msgid ""
"If projects decide not to use the new fields, no additional restrictions are "
"imposed by this PEP when uploading to PyPI."
msgstr ""

#: ../../peps/peps/pep-0639.rst:75
msgid ""
"This PEP also is not about license documentation for individual files, "
"though this is a :ref:`surveyed topic <639-license-doc-source-files>` in an "
"appendix, nor does it intend to cover cases where the :term:`source "
"distribution <Source Distribution (or \"sdist\")>` and :term:`binary "
"distribution` packages don't have :ref:`the same licenses <639-rejected-"
"ideas-difference-license-source-binary>`."
msgstr ""

#: ../../peps/peps/pep-0639.rst:86
msgid "Motivation"
msgstr ""

#: ../../peps/peps/pep-0639.rst:88
msgid ""
"Software must be licensed in order for anyone other than its creator to "
"download, use, share and modify it. Today, there are multiple fields where "
"licenses are documented in :term:`Core Metadata`, and there are limitations "
"to what can be expressed in each of them. This often leads to confusion both "
"for package authors and end users, including distribution re-packagers."
msgstr ""

#: ../../peps/peps/pep-0639.rst:96
msgid ""
"This has triggered a number of license-related discussions and issues, "
"including on `outdated and ambiguous PyPI classifiers <classifierissue_>`__, "
"`license interoperability with other ecosystems <interopissue_>`__, `too "
"many confusing license metadata options <packagingissue_>`__, `limited "
"support for license files in the Wheel project <wheelfiles_>`__, and `the "
"lack of precise license metadata <pepissue_>`__."
msgstr ""

#: ../../peps/peps/pep-0639.rst:103
msgid ""
"As a result, on average, Python packages tend to have more ambiguous and "
"missing license information than other common ecosystems. This is supported "
"by the `statistics page <cdstats_>`__ of the `ClearlyDefined project "
"<clearlydefined_>`__, an `Open Source Initiative <osi_>`__ effort to help "
"improve licensing clarity of other FOSS projects, covering all packages from "
"PyPI, Maven, npm and Rubygems."
msgstr ""

#: ../../peps/peps/pep-0639.rst:111
msgid ""
"The current license classifiers could be extended to include the full range "
"of the SPDX identifiers while deprecating the ambiguous classifiers (such as "
"``License :: OSI Approved :: BSD License``)."
msgstr ""

#: ../../peps/peps/pep-0639.rst:115
msgid "However, there are multiple arguments against such an approach:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:117
msgid ""
"It requires a great effort to duplicate the SPDX license list and keep it in "
"sync."
msgstr ""

#: ../../peps/peps/pep-0639.rst:120
msgid ""
"It is a hard break in backward compatibility, forcing package authors to "
"update to new classifiers immediately when PyPI deprecates the old ones."
msgstr ""

#: ../../peps/peps/pep-0639.rst:123
msgid ""
"It only covers packages under a single license; it doesn't address projects "
"that vendor dependencies (e.g. Setuptools), offer a choice of licenses (e.g. "
"Packaging) or were relicensed, adapt code from other projects or contain "
"fonts, images, examples, binaries or other assets under other licenses."
msgstr ""

#: ../../peps/peps/pep-0639.rst:129
msgid ""
"It requires both authors and tools understand and implement the PyPI-"
"specific classifier system."
msgstr ""

#: ../../peps/peps/pep-0639.rst:132
msgid ""
"It does not provide as clear an indicator that a package has adopted the new "
"system, and should be treated accordingly."
msgstr ""

#: ../../peps/peps/pep-0639.rst:139
msgid "Rationale"
msgstr ""

#: ../../peps/peps/pep-0639.rst:141
msgid ""
"A survey was conducted to map the existing license metadata definitions in "
"the :ref:`Python ecosystem <639-license-doc-python>` and a :ref:`variety of "
"other packaging systems, Linux distributions, language ecosystems and "
"applications <639-license-doc-other-projects>`."
msgstr ""

#: ../../peps/peps/pep-0639.rst:146
msgid ""
"The takeaways from the survey have guided the recommendations of this PEP:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:148
msgid ""
"SPDX and SPDX-like syntaxes are the most popular :term:`license "
"expression`\\s in many modern package systems."
msgstr ""

#: ../../peps/peps/pep-0639.rst:151
msgid ""
"Most Free and Open Source Software licenses require package authors to "
"include their full text in a :term:`Distribution Package`."
msgstr ""

#: ../../peps/peps/pep-0639.rst:154
msgid "Therefore, this PEP introduces two new Core Metadata fields:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:156
msgid ""
":ref:`License-Expression <639-spec-field-license-expression>` that provides "
"an unambiguous way to express the license of a package using SPDX license "
"expressions."
msgstr ""

#: ../../peps/peps/pep-0639.rst:160
msgid ""
":ref:`License-File <639-spec-field-license-file>` that offers a standardized "
"way to include the full text of the license(s) with the package when "
"distributed, and allows other tools consuming the :term:`Core Metadata` to "
"locate a :term:`distribution archive`'s license files."
msgstr ""

#: ../../peps/peps/pep-0639.rst:166
msgid ""
"Furthermore, this specification builds upon existing practice in the "
"`Setuptools <setuptoolsfiles_>`__ and `Wheel <wheelfiles_>`__ projects. An "
"up-to-date version of the current draft of this PEP is `implemented "
"<hatchimplementation_>`__ in the `Hatch <hatch_>`__ packaging tool, and an "
"earlier draft of the :ref:`license files portion <639-spec-field-license-"
"file>` is `implemented in Setuptools <setuptoolspep639_>`__."
msgstr ""

#: ../../peps/peps/pep-0639.rst:179
msgid "Terminology"
msgstr ""

#: ../../peps/peps/pep-0639.rst:181
msgid ""
"The keywords \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHOULD\", \"SHOULD "
"NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be "
"interpreted as described in :rfc:`2119`."
msgstr ""

#: ../../peps/peps/pep-0639.rst:189
msgid "License terms"
msgstr ""

#: ../../peps/peps/pep-0639.rst:191
msgid ""
"The license-related terminology draws heavily from the `SPDX Project "
"<spdx_>`__, particularly :term:`license identifier` and :term:`license "
"expression`."
msgstr ""

#: ../../peps/peps/pep-0639.rst:195
msgid "license classifier"
msgstr ""

#: ../../peps/peps/pep-0639.rst:197
msgid ""
"A `PyPI Trove classifier <classifiers_>`__ (as :ref:`described <packaging:"
"core-metadata-classifier>` in the :term:`Core Metadata` specification) which "
"begins with ``License ::``."
msgstr ""

#: ../../peps/peps/pep-0639.rst:201
msgid "license expression"
msgstr ""

#: ../../peps/peps/pep-0639.rst:202
msgid "SPDX expression"
msgstr ""

#: ../../peps/peps/pep-0639.rst:204
msgid ""
"A string with valid `SPDX license expression syntax <spdxpression_>`__ "
"including one or more SPDX :term:`license identifier`\\(s), which describes "
"a :term:`Project`'s license(s) and how they inter-relate. Examples: "
"``GPL-3.0-or-later``, ``MIT AND (Apache-2.0 OR BSD-2-clause)``"
msgstr ""

#: ../../peps/peps/pep-0639.rst:211
msgid "license identifier"
msgstr ""

#: ../../peps/peps/pep-0639.rst:212
msgid "SPDX identifier"
msgstr ""

#: ../../peps/peps/pep-0639.rst:214
msgid ""
"A valid `SPDX short-form license identifier <spdxid_>`__, as described in "
"the :ref:`639-spec-field-license-expression` section of this PEP. This "
"includes all valid SPDX identifiers and the custom ``LicenseRef-[idstring]`` "
"strings conforming to the `SPDX specification, clause 10.1 <spdxcustom_>`__. "
"Examples: ``MIT``, ``GPL-3.0-only``, ``LicenseRef-My-Custom-License``"
msgstr ""

#: ../../peps/peps/pep-0639.rst:224
msgid "root license directory"
msgstr ""

#: ../../peps/peps/pep-0639.rst:225
msgid "license directory"
msgstr ""

#: ../../peps/peps/pep-0639.rst:227
msgid ""
"The directory under which license files are stored in a :term:`project "
"source tree`, :term:`distribution archive` or :term:`installed project`. "
"Also, the root directory that their paths recorded in the :ref:`License-File "
"<639-spec-field-license-file>` :term:`Core Metadata field` are relative to. "
"Defined to be the :term:`project root directory` for a :term:`project source "
"tree` or :term:`source distribution <Source Distribution (or \"sdist\")>`; "
"and a subdirectory named ``licenses`` of the directory containing the :term:"
"`built metadata`— i.e., the ``.dist-info/licenses`` directory— for a :term:"
"`Built Distribution` or :term:`installed project`."
msgstr ""

#: ../../peps/peps/pep-0639.rst:245
msgid "Specification"
msgstr ""

#: ../../peps/peps/pep-0639.rst:247
msgid "The changes necessary to implement this PEP include:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:249
msgid ""
"additions to :ref:`Core Metadata <639-spec-core-metadata>`, as defined in "
"the `specification <coremetadataspec_>`__."
msgstr ""

#: ../../peps/peps/pep-0639.rst:252
msgid ""
"additions to the author-provided :ref:`project source metadata <639-spec-"
"source-metadata>`, as defined in the `specification <pyprojecttoml_>`__."
msgstr ""

#: ../../peps/peps/pep-0639.rst:256
msgid ""
":ref:`additions <639-spec-project-formats>` to the source distribution "
"(sdist), built distribution (wheel) and installed project specifications."
msgstr ""

#: ../../peps/peps/pep-0639.rst:260
msgid ""
":ref:`guide for tools <639-spec-converting-metadata>` handling and "
"converting legacy license metadata to license expressions, to ensure the "
"results are consistent and correct."
msgstr ""

#: ../../peps/peps/pep-0639.rst:264
msgid ""
"Note that the guidance on errors and warnings is for tools' default "
"behavior; they MAY operate more strictly if users explicitly configure them "
"to do so, such as by a CLI flag or a configuration option."
msgstr ""

#: ../../peps/peps/pep-0639.rst:272
msgid "SPDX license expression syntax"
msgstr ""

#: ../../peps/peps/pep-0639.rst:274
msgid ""
"This PEP adopts the SPDX license expression syntax as documented in the "
"`SPDX specification <spdxpression_>`__, either Version 2.2 or a later "
"compatible version."
msgstr ""

#: ../../peps/peps/pep-0639.rst:278
msgid ""
"A license expression can use the following :term:`license identifier`\\s:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:280
msgid ""
"Any SPDX-listed license short-form identifiers that are published in the "
"`SPDX License List <spdxlist_>`__, version 3.17 or any later compatible "
"version. Note that the SPDX working group never removes any license "
"identifiers; instead, they may choose to mark an identifier as "
"\"deprecated\"."
msgstr ""

#: ../../peps/peps/pep-0639.rst:285
msgid ""
"The custom ``LicenseRef-[idstring]`` string(s), where ``[idstring]`` is a "
"unique string containing letters, numbers, ``.`` and/or ``-``, to identify "
"licenses that are not included in the SPDX license list. The custom "
"identifiers must follow the SPDX specification, `clause 10.1 "
"<spdxcustom_>`__ of the given specification version."
msgstr ""

#: ../../peps/peps/pep-0639.rst:292
msgid "Examples of valid SPDX expressions:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:305
msgid "Examples of invalid SPDX expressions:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:318
msgid "Core Metadata"
msgstr ""

#: ../../peps/peps/pep-0639.rst:320
msgid ""
"The error and warning guidance in this section applies to build and "
"publishing tools; end-user-facing install tools MAY be less strict than "
"mentioned here when encountering malformed metadata that does not conform to "
"this specification."
msgstr ""

#: ../../peps/peps/pep-0639.rst:325
msgid ""
"As it adds new fields, this PEP updates the Core Metadata version to 2.4."
msgstr ""

#: ../../peps/peps/pep-0639.rst:331
msgid "Add ``License-Expression`` field"
msgstr ""

#: ../../peps/peps/pep-0639.rst:333
msgid ""
"The ``License-Expression`` optional :term:`Core Metadata field` is specified "
"to contain a text string that is a valid SPDX :term:`license expression`, "
"as :ref:`defined above <639-spdx>`."
msgstr ""

#: ../../peps/peps/pep-0639.rst:338
msgid ""
"Build and publishing tools SHOULD check that the ``License-Expression`` "
"field contains a valid SPDX expression, including the validity of the "
"particular license identifiers (as :ref:`defined above <639-spdx>`). Tools "
"MAY halt execution and raise an error when an invalid expression is found. "
"If tools choose to validate the SPDX expression, they also SHOULD store a "
"case-normalized version of the ``License-Expression`` field using the "
"reference case for each SPDX license identifier and uppercase for the "
"``AND``, ``OR`` and ``WITH`` keywords. Tools SHOULD report a warning and "
"publishing tools MAY raise an error if one or more license identifiers have "
"been marked as deprecated in the `SPDX License List <spdxlist_>`__."
msgstr ""

#: ../../peps/peps/pep-0639.rst:351
msgid ""
"For all newly-uploaded :term:`distribution archive`\\s that include a "
"``License-Expression`` field, the `Python Package Index (PyPI) <pypi_>`__ "
"MUST validate that they contain a valid, case-normalized license expression "
"with valid identifiers (as :ref:`defined above <639-spdx>`) and MUST reject "
"uploads that do not. Custom license identifiers which conform to the SPDX "
"specification are considered valid. PyPI MAY reject an upload for using a "
"deprecated license identifier, so long as it was deprecated as of the above-"
"mentioned SPDX License List version."
msgstr ""

#: ../../peps/peps/pep-0639.rst:367
msgid "Add ``License-File`` field"
msgstr ""

#: ../../peps/peps/pep-0639.rst:369
msgid ""
"``License-File`` is an optional :term:`Core Metadata field`. Each instance "
"contains the string representation of the path of a license-related file. "
"The path is located within the :term:`project source tree`, relative to the :"
"term:`project root directory`. It is a multi-use field that may appear zero "
"or more times and each instance lists the path to one such file. Files "
"specified under this field could include license text, author/attribution "
"information, or other legal notices that need to be distributed with the "
"package."
msgstr ""

#: ../../peps/peps/pep-0639.rst:379
msgid ""
"As :ref:`specified by this PEP <639-spec-project-formats>`, its value is "
"also that file's path relative to the :term:`root license directory` in "
"both :term:`installed project`\\s and the standardized :term:`Distribution "
"Package` types."
msgstr ""

#: ../../peps/peps/pep-0639.rst:384
msgid ""
"If a ``License-File`` is listed in a :term:`Source Distribution <Source "
"Distribution (or \"sdist\")>` or :term:`Built Distribution`'s Core Metadata:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:388
msgid ""
"That file MUST be included in the :term:`distribution archive` at the "
"specified path relative to the root license directory."
msgstr ""

#: ../../peps/peps/pep-0639.rst:391
msgid ""
"That file MUST be installed with the :term:`project` at that same relative "
"path."
msgstr ""

#: ../../peps/peps/pep-0639.rst:394
msgid ""
"The specified relative path MUST be consistent between project source trees, "
"source distributions (sdists), built distributions (:term:`Wheel`\\s) and "
"installed projects."
msgstr ""

#: ../../peps/peps/pep-0639.rst:398
msgid ""
"Inside the root license directory, packaging tools MUST reproduce the "
"directory structure under which the source license files are located "
"relative to the project root."
msgstr ""

#: ../../peps/peps/pep-0639.rst:402
msgid ""
"Path delimiters MUST be the forward slash character (``/``), and parent "
"directory indicators (``..``) MUST NOT be used."
msgstr ""

#: ../../peps/peps/pep-0639.rst:405
msgid "License file content MUST be UTF-8 encoded text."
msgstr ""

#: ../../peps/peps/pep-0639.rst:407
msgid ""
"Build tools MAY and publishing tools SHOULD produce an informative warning "
"if a built distribution's metadata contains no ``License-File`` entries, and "
"publishing tools MAY but build tools MUST NOT raise an error."
msgstr ""

#: ../../peps/peps/pep-0639.rst:411
msgid ""
"For all newly-uploaded :term:`distribution archive`\\s that include one or "
"more ``License-File`` fields in their Core Metadata and declare a ``Metadata-"
"Version`` of ``2.4`` or higher, PyPI SHOULD validate that all specified "
"files are present in that :term:`distribution archive`\\s, and MUST reject "
"uploads that do not validate."
msgstr ""

#: ../../peps/peps/pep-0639.rst:422
msgid "Deprecate ``License`` field"
msgstr ""

#: ../../peps/peps/pep-0639.rst:424
msgid ""
"The legacy unstructured-text ``License`` :term:`Core Metadata field` is "
"deprecated and replaced by the new ``License-Expression`` field. The fields "
"are mutually exclusive. Tools which generate Core Metadata MUST NOT create "
"both these fields. Tools which read Core Metadata, when dealing with both "
"these fields present at the same time, MUST read the value of ``License-"
"Expression`` and MUST disregard the value of the ``License`` field."
msgstr ""

#: ../../peps/peps/pep-0639.rst:432
msgid ""
"If only the ``License`` field is present, tools MAY issue a warning "
"informing users it is deprecated and recommending ``License-Expression`` "
"instead."
msgstr ""

#: ../../peps/peps/pep-0639.rst:436
msgid ""
"For all newly-uploaded :term:`distribution archive`\\s that include a "
"``License-Expression`` field, the `Python Package Index (PyPI) <pypi_>`__ "
"MUST reject any that specify both ``License`` and ``License-Expression`` "
"fields."
msgstr ""

#: ../../peps/peps/pep-0639.rst:440
msgid ""
"The ``License`` field may be removed from a new version of the specification "
"in a future PEP."
msgstr ""

#: ../../peps/peps/pep-0639.rst:447
msgid "Deprecate license classifiers"
msgstr ""

#: ../../peps/peps/pep-0639.rst:449
msgid ""
"Using :term:`license classifier`\\s in the ``Classifier`` :term:`Core "
"Metadata field` (`described in the Core Metadata specification "
"<coremetadataclassifiers_>`__) is deprecated and replaced by the more "
"precise ``License-Expression`` field."
msgstr ""

#: ../../peps/peps/pep-0639.rst:454
msgid ""
"If the ``License-Expression`` field is present, build tools SHOULD and "
"publishing tools MUST raise an error if one or more license classifiers is "
"included in a ``Classifier`` field, and MUST NOT add such classifiers "
"themselves."
msgstr ""

#: ../../peps/peps/pep-0639.rst:459
msgid ""
"Otherwise, if this field contains a license classifier, build tools MAY and "
"publishing tools SHOULD issue a warning informing users such classifiers are "
"deprecated, and recommending ``License-Expression`` instead. For "
"compatibility with existing publishing and installation processes, the "
"presence of license classifiers SHOULD NOT raise an error unless ``License-"
"Expression`` is also provided."
msgstr ""

#: ../../peps/peps/pep-0639.rst:466
msgid ""
"For all newly-uploaded distributions that include a ``License-Expression`` "
"field, the `Python Package Index (PyPI) <pypi_>`__ MUST reject any that also "
"specify any license classifiers."
msgstr ""

#: ../../peps/peps/pep-0639.rst:470
msgid ""
"New license classifiers MUST NOT be `added to PyPI <classifiersrepo_>`__; "
"users needing them SHOULD use the ``License-Expression`` field instead. "
"License classifiers may be removed from a new version of the specification "
"in a future PEP."
msgstr ""

#: ../../peps/peps/pep-0639.rst:479
msgid "Project source metadata"
msgstr ""

#: ../../peps/peps/pep-0639.rst:481
msgid ""
"This PEP specifies changes to the project's source metadata under a "
"``[project]`` table in the ``pyproject.toml`` file."
msgstr ""

#: ../../peps/peps/pep-0639.rst:488
msgid "Add string value to ``license`` key"
msgstr ""

#: ../../peps/peps/pep-0639.rst:490
msgid ""
"``license`` key in the ``[project]`` table is defined to contain a top-level "
"string value. It is a valid SPDX license expression as :ref:`defined in this "
"PEP <639-spdx>`. Its value maps to the ``License-Expression`` field in the "
"core metadata."
msgstr ""

#: ../../peps/peps/pep-0639.rst:495
msgid ""
"Build tools SHOULD validate and perform case normalization of the expression "
"as described in the :ref:`639-spec-field-license-expression` section, "
"outputting an error or warning as specified."
msgstr ""

#: ../../peps/peps/pep-0639.rst:500
msgid "Examples:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:520
msgid "Add ``license-files`` key"
msgstr ""

#: ../../peps/peps/pep-0639.rst:522
msgid ""
"A new ``license-files`` key is added to the ``[project]`` table for "
"specifying paths in the project source tree relative to ``pyproject.toml`` "
"to file(s) containing licenses and other legal notices to be distributed "
"with the package. It corresponds to the ``License-File`` fields in the Core "
"Metadata."
msgstr ""

#: ../../peps/peps/pep-0639.rst:527
msgid ""
"Its value is a table, which if present MUST contain one of two optional, "
"mutually exclusive subkeys, ``paths`` and ``globs``; if both are specified, "
"tools MUST raise an error. Both are arrays of strings; the ``paths`` subkey "
"contains verbatim file paths, and the ``globs`` subkey valid glob patterns, "
"which MUST be parsable by the ``glob`` `module <globmodule_>`__ in the "
"Python standard library."
msgstr ""

#: ../../peps/peps/pep-0639.rst:534
msgid ""
"Path delimiters MUST be the forward slash character (``/``), and parent "
"directory indicators (``..``) MUST NOT be used. Tools MUST assume that "
"license file content is valid UTF-8 encoded text, and SHOULD validate this "
"and raise an error if it is not."
msgstr ""

#: ../../peps/peps/pep-0639.rst:539
msgid "If the ``paths`` subkey is a non-empty array, build tools:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:541
msgid ""
"MUST treat each value as a verbatim, literal file path, and MUST NOT treat "
"them as glob patterns."
msgstr ""

#: ../../peps/peps/pep-0639.rst:544
msgid "MUST include each listed file in all distribution archives."
msgstr ""

#: ../../peps/peps/pep-0639.rst:546
msgid ""
"MUST NOT match any additional license files beyond those explicitly "
"statically specified by the user under the ``paths`` subkey."
msgstr ""

#: ../../peps/peps/pep-0639.rst:549
msgid ""
"MUST list each file path under a ``License-File`` field in the Core Metadata."
msgstr ""

#: ../../peps/peps/pep-0639.rst:551
msgid ""
"MUST raise an error if one or more paths do not correspond to a valid file "
"in the project source that can be copied into the distribution archive."
msgstr ""

#: ../../peps/peps/pep-0639.rst:554
msgid "If the ``globs`` subkey is a non-empty array, build tools:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:556
msgid ""
"MUST treat each value as a glob pattern, and MUST raise an error if the "
"pattern contains invalid glob syntax."
msgstr ""

#: ../../peps/peps/pep-0639.rst:559
msgid ""
"MUST include all files matched by at least one listed pattern in all "
"distribution archives."
msgstr ""

#: ../../peps/peps/pep-0639.rst:562
msgid ""
"MAY exclude files matched by glob patterns that can be unambiguously "
"determined to be backup, temporary, hidden, OS-generated or VCS-ignored."
msgstr ""

#: ../../peps/peps/pep-0639.rst:565
msgid ""
"MUST list each matched file path under a ``License-File`` field in the Core "
"Metadata."
msgstr ""

#: ../../peps/peps/pep-0639.rst:568
msgid "SHOULD issue a warning and MAY raise an error if no files are matched."
msgstr ""

#: ../../peps/peps/pep-0639.rst:570
msgid ""
"MAY issue a warning if any individual user-specified pattern does not match "
"at least one file."
msgstr ""

#: ../../peps/peps/pep-0639.rst:573
msgid ""
"If the ``license-files`` key is present, and the ``paths`` or ``globs`` "
"subkey is set to a value of an empty array, then tools MUST NOT include any "
"license files and MUST NOT raise an error."
msgstr ""

#: ../../peps/peps/pep-0639.rst:579
msgid ""
"If the ``license-files`` key is not present and not explicitly marked as "
"``dynamic``, tools MUST assume a default value of the following:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:586
msgid ""
"In this case, tools MAY issue a warning if no license files are matched, but "
"MUST NOT raise an error."
msgstr ""

#: ../../peps/peps/pep-0639.rst:589
msgid ""
"If the ``license-files`` key is marked as ``dynamic`` (and not present), to "
"preserve consistent behavior with current tools and help ensure the packages "
"they create are legally distributable, build tools SHOULD default to "
"including at least the license files matching the above patterns, unless the "
"user has explicitly specified their own."
msgstr ""

#: ../../peps/peps/pep-0639.rst:595
msgid "Examples of valid license files declaration:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:611
msgid "Examples of invalid license files declaration:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:619
msgid ""
"Reason: license-files.paths and license-files.globs are mutually exclusive."
msgstr ""

#: ../../peps/peps/pep-0639.rst:626
msgid ""
"Reason: ``..`` must not be used. ``\\`` is an invalid path delimiter, ``/`` "
"must be used."
msgstr ""

#: ../../peps/peps/pep-0639.rst:635
msgid "Reason: \"LICEN{CSE*\" is not a valid glob."
msgstr ""

#: ../../peps/peps/pep-0639.rst:641
msgid "Deprecate ``license`` key table subkeys"
msgstr ""

#: ../../peps/peps/pep-0639.rst:643
msgid ""
"Table values for the ``license`` key in the ``[project]`` table, including "
"the ``text`` and ``file`` table subkeys, are now deprecated. If the new "
"``license-files`` key is present, build tools MUST raise an error if the "
"``license`` key is defined and has a value other than a single top-level "
"string."
msgstr ""

#: ../../peps/peps/pep-0639.rst:649
msgid ""
"If the new ``license-files`` key is not present and the ``text`` subkey is "
"present in a ``license`` table, tools SHOULD issue a warning informing users "
"it is deprecated and recommending a license expression as a top-level string "
"key instead."
msgstr ""

#: ../../peps/peps/pep-0639.rst:654
msgid ""
"Likewise, if the new ``license-files`` key is not present and the ``file`` "
"subkey is present in the ``license`` table, tools SHOULD issue a warning "
"informing users it is deprecated and recommending the ``license-files`` key "
"instead."
msgstr ""

#: ../../peps/peps/pep-0639.rst:659
msgid ""
"If the specified license ``file`` is present in the source tree, build tools "
"SHOULD use it to fill the ``License-File`` field in the core metadata, and "
"MUST include the specified file as if it were specified in a ``license-file."
"paths`` field. If the file does not exist at the specified path, tools MUST "
"raise an informative error as previously specified. However, tools MUST also "
"still assume the :ref:`specified default value <639-default-patterns>` for "
"the ``license-files`` key and also include, in addition to a license file "
"specified under the ``license.file`` subkey, any license files that match "
"the specified list of patterns."
msgstr ""

#: ../../peps/peps/pep-0639.rst:671
msgid ""
"Table values for the ``license`` key MAY be removed from a new version of "
"the specification in a future PEP."
msgstr ""

#: ../../peps/peps/pep-0639.rst:678
msgid "License files in project formats"
msgstr ""

#: ../../peps/peps/pep-0639.rst:680
msgid "A few additions will be made to the existing specifications."
msgstr ""

#: ../../peps/peps/pep-0639.rst:682
msgid ":term:`Project source tree`\\s"
msgstr ""

#: ../../peps/peps/pep-0639.rst:683
msgid ""
"Per :ref:`639-spec-source-metadata` section, the `Declaring Project Metadata "
"specification <pyprojecttoml_>`__ will be updated to reflect that license "
"file paths MUST be relative to the project root directory; i.e. the "
"directory containing the ``pyproject.toml`` (or equivalently, other legacy "
"project configuration, e.g. ``setup.py``, ``setup.cfg``, etc)."
msgstr ""

#: ../../peps/peps/pep-0639.rst:690
msgid ""
":term:`Source distributions (sdists) <Source Distribution (or \"sdist\")>`"
msgstr ""

#: ../../peps/peps/pep-0639.rst:691
msgid ""
"The `sdist specification <sdistspec_>`__ will be updated to reflect that if "
"the ``Metadata-Version`` is ``2.4`` or greater, the sdist MUST contain any "
"license files specified by the :ref:`License-File field <639-spec-field-"
"license-file>` in the ``PKG-INFO`` at their respective paths relative to "
"the  of the sdist (containing the ``pyproject.toml`` and the ``PKG-INFO`` "
"Core Metadata)."
msgstr ""

#: ../../peps/peps/pep-0639.rst:699
msgid ":term:`Built distribution`\\s (:term:`wheel`\\s)"
msgstr ""

#: ../../peps/peps/pep-0639.rst:700
msgid ""
"The `Wheel specification <wheelspec_>`__ will be updated to reflect that if "
"the ``Metadata-Version`` is ``2.4`` or greater and one or more ``License-"
"File`` fields is specified, the ``.dist-info`` directory MUST contain a "
"``licenses`` subdirectory, which MUST contain the files listed in the "
"``License-File`` fields in the ``METADATA`` file at their respective paths "
"relative to the ``licenses`` directory."
msgstr ""

#: ../../peps/peps/pep-0639.rst:707
msgid ":term:`Installed project`\\s"
msgstr ""

#: ../../peps/peps/pep-0639.rst:708
msgid ""
"The `Recording Installed Projects specification <installedspec_>`__ will be "
"updated to reflect that if the ``Metadata-Version`` is ``2.4`` or greater "
"and one or more ``License-File`` fields is specified, the ``.dist-info`` "
"directory MUST contain a ``licenses`` subdirectory which MUST contain the "
"files listed in the ``License-File`` fields in the ``METADATA`` file at "
"their respective paths relative to the ``licenses`` directory, and that any "
"files in this directory MUST be copied from wheels by install tools."
msgstr ""

#: ../../peps/peps/pep-0639.rst:721
msgid "Converting legacy metadata"
msgstr ""

#: ../../peps/peps/pep-0639.rst:723
msgid ""
"Tools MUST NOT use the contents of the ``license.text`` ``[project]`` key "
"(or equivalent tool-specific format), license classifiers or the value of "
"the Core Metadata ``License`` field to fill the top-level string value of "
"the ``license`` key or the Core Metadata ``License-Expression`` field "
"without informing the user and requiring unambiguous, affirmative user "
"action to select and confirm the desired license expression value before "
"proceeding."
msgstr ""

#: ../../peps/peps/pep-0639.rst:731
msgid ""
"Tool authors, who need to automatically convert license classifiers to SPDX "
"identifiers, can use the :ref:`recommendation <639-spec-mapping-classifiers-"
"identifiers>` prepared by the PEP authors."
msgstr ""

#: ../../peps/peps/pep-0639.rst:740
msgid "Backwards Compatibility"
msgstr ""

#: ../../peps/peps/pep-0639.rst:742
msgid ""
"Adding a new ``License-Expression`` Core Metadata field and a top-level "
"string value for the ``license`` key in the ``pyproject.toml`` ``[project]`` "
"table unambiguously means support for the specification in this PEP. This "
"avoids the risk of new tooling misinterpreting a license expression as a "
"free-form license description or vice versa."
msgstr ""

#: ../../peps/peps/pep-0639.rst:748
msgid ""
"The legacy deprecated Core Metadata ``License`` field, ``license`` key table "
"subkeys (``text`` and ``file``) in the ``pyproject.toml`` ``[project]`` "
"table and license classifiers retain backwards compatibility. A removal is "
"left to a future PEP and a new version of the Core Metadata specification."
msgstr ""

#: ../../peps/peps/pep-0639.rst:753
msgid ""
"Specification of the new ``License-File`` Core Metadata field and adding the "
"files in the distribution codifies the existing practices of many packaging "
"tools. It is designed to be largely backwards-compatible with their existing "
"use of that field. The new ``license-files`` key in the ``[project]`` table "
"of ``pyproject.toml`` will only have an effect once users and tools adopt it."
msgstr ""

#: ../../peps/peps/pep-0639.rst:759
msgid ""
"This PEP specifies that license files should be placed in a dedicated "
"``licenses`` subdir of ``.dist-info`` directory. This is new and ensures "
"that wheels following this PEP will have differently-located licenses "
"relative to those produced via the previous installer-specific behavior. "
"This is further supported by a new metadata version."
msgstr ""

#: ../../peps/peps/pep-0639.rst:765
msgid ""
"This also resolves current issues where license files are accidentally "
"replaced if they have the same names in different places, making wheels "
"undistributable without noticing. It also prevents conflicts with other "
"metadata files in the same directory."
msgstr ""

#: ../../peps/peps/pep-0639.rst:770
msgid ""
"The additions will be made to the source distribution (sdist), built "
"distribution (wheel) and installed project specifications. They document "
"behaviors allowed under their current specifications, and gate them behind "
"the new metadata version."
msgstr ""

#: ../../peps/peps/pep-0639.rst:775
msgid ""
"This PEP proposes PyPI implement validation of the new ``License-"
"Expression`` and ``License-File`` fields, which has no effect on new and "
"existing packages uploaded unless they explicitly opt in to using these new "
"fields and fail to follow the specification correctly. Therefore, this does "
"not have a backward compatibility impact, and guarantees forward "
"compatibility by ensuring all distributions uploaded to PyPI with the new "
"fields conform to the specification."
msgstr ""

#: ../../peps/peps/pep-0639.rst:787
msgid "Security Implications"
msgstr ""

#: ../../peps/peps/pep-0639.rst:789
msgid ""
"This PEP has no foreseen security implications: the ``License-Expression`` "
"field is a plain string and the ``License-File`` fields are file paths. "
"Neither introduces any known new security concerns."
msgstr ""

#: ../../peps/peps/pep-0639.rst:797
msgid "How to Teach This"
msgstr ""

#: ../../peps/peps/pep-0639.rst:799
msgid ""
"A majority of packages use a single license which makes the case simple: a "
"single license identifier is a valid license expression."
msgstr ""

#: ../../peps/peps/pep-0639.rst:802
msgid ""
"Users of packaging tools will learn the valid license expression of their "
"package through the messages issued by the tools when they detect invalid "
"ones, or when the deprecated ``License`` field or license classifiers are "
"used."
msgstr ""

#: ../../peps/peps/pep-0639.rst:806
msgid ""
"If an invalid ``License-Expression`` is used, the users will not be able to "
"publish their package to PyPI and an error message will help them understand "
"they need to use SPDX identifiers. It will be possible to generate a "
"distribution with incorrect license metadata, but not to publish one on PyPI "
"or any other index server that enforces ``License-Expression`` validity. For "
"authors using the now-deprecated ``License`` field or license classifiers, "
"packaging tools may warn them and inform them of the replacement, ``License-"
"Expression``."
msgstr ""

#: ../../peps/peps/pep-0639.rst:815
msgid ""
"Tools may also help with the conversion and suggest a license expression in "
"many common cases:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:818
msgid ""
"The appendix :ref:`639-spec-mapping-classifiers-identifiers` provides tool "
"authors with recommendation on how to suggest a license expression produced "
"from legacy classifiers."
msgstr ""

#: ../../peps/peps/pep-0639.rst:822
msgid ""
"Tools may be able to suggest how to update an existing ``License`` value in "
"project source metadata and convert that to a license expression, as also :"
"ref:`specified in this PEP <639-spec-converting-metadata>`."
msgstr ""

#: ../../peps/peps/pep-0639.rst:829
msgid "Reference Implementation"
msgstr ""

#: ../../peps/peps/pep-0639.rst:831
msgid ""
"Tools will need to support parsing and validating license expressions in the "
"``License-Expression`` field if they decide to implement this part of the "
"specification. It's up to the tools whether they prefer to implement the "
"validation on their side (e.g. like `hatch <hatchparseimpl_>`__) or use one "
"of the available Python libraries (e.g. `license-expression "
"<licenseexplib_>`__). This PEP does not mandate using any specific library "
"and leaves it to the tools authors to choose the best implementation for "
"their projects."
msgstr ""

#: ../../peps/peps/pep-0639.rst:844
msgid "Rejected Ideas"
msgstr ""

#: ../../peps/peps/pep-0639.rst:846
msgid ""
"Many alternative ideas were proposed and after a careful consideration, "
"rejected. The exhaustive list including the rationale for rejecting can be "
"found in a :ref:`separate page <639-rejected-ideas-details>`."
msgstr ""

#: ../../peps/peps/pep-0639.rst:852
msgid "Appendices"
msgstr ""

#: ../../peps/peps/pep-0639.rst:854
msgid "A list of auxilliary documents is provided:"
msgstr ""

#: ../../peps/peps/pep-0639.rst:856
msgid "Detailed :ref:`Licensing Examples <639-examples>`,"
msgstr ""

#: ../../peps/peps/pep-0639.rst:857
msgid ":ref:`User Scenarios <639-user-scenarios>`,"
msgstr ""

#: ../../peps/peps/pep-0639.rst:858
msgid ""
":ref:`License Documentation in Python and Other Projects <639-license-doc-"
"python>`,"
msgstr ""

#: ../../peps/peps/pep-0639.rst:859
msgid ""
":ref:`Mapping License Classifiers to SPDX Identifiers <639-spec-mapping-"
"classifiers-identifiers>`,"
msgstr ""

#: ../../peps/peps/pep-0639.rst:860
msgid ":ref:`Rejected Ideas <639-rejected-ideas-details>` in detail."
msgstr ""

#: ../../peps/peps/pep-0639.rst:905
msgid "Acknowledgments"
msgstr ""

#: ../../peps/peps/pep-0639.rst:907
msgid "Alyssa Coghlan"
msgstr ""

#: ../../peps/peps/pep-0639.rst:908
msgid "Kevin P. Fleming"
msgstr ""

#: ../../peps/peps/pep-0639.rst:909
msgid "Pradyun Gedam"
msgstr ""

#: ../../peps/peps/pep-0639.rst:910
msgid "Oleg Grenrus"
msgstr ""

#: ../../peps/peps/pep-0639.rst:911
msgid "Dustin Ingram"
msgstr ""

#: ../../peps/peps/pep-0639.rst:912
msgid "Chris Jerdonek"
msgstr ""

#: ../../peps/peps/pep-0639.rst:913
msgid "Cyril Roelandt"
msgstr ""

#: ../../peps/peps/pep-0639.rst:914
msgid "Luis Villa"
msgstr ""

#: ../../peps/peps/pep-0639.rst:915
msgid "Seth M. Larson"
msgstr ""

#: ../../peps/peps/pep-0639.rst:916
msgid "Ofek Lev"
msgstr ""

#: ../../peps/peps/pep-0639.rst:920
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/peps/pep-0639.rst:922
msgid ""
"This document is placed in the public domain or under the `CC0-1.0-Universal "
"license <cc0_>`__, whichever is more permissive."
msgstr ""
