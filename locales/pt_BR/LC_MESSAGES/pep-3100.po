# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  PEPs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-20 10:43-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../peps/pep-3100.rst
msgid "Author"
msgstr "Autor"

#: ../../peps/pep-3100.rst:3
msgid "Brett Cannon <brett@python.org>"
msgstr ""

#: ../../peps/pep-3100.rst
msgid "Status"
msgstr "Status"

#: ../../peps/pep-3100.rst:4
msgid "Final"
msgstr ""

#: ../../peps/pep-3100.rst
msgid "Type"
msgstr "Tipo"

#: ../../peps/pep-3100.rst:5
msgid "Process"
msgstr "Processo"

#: ../../peps/pep-3100.rst
msgid "Created"
msgstr "Criada em"

#: ../../peps/pep-3100.rst:7
msgid "20-Aug-2004"
msgstr ""

#: ../../peps/pep-3100.rst
msgid "Post-History"
msgstr "Pós-história"

#: ../../peps/pep-3100.rst:12
msgid "Abstract"
msgstr ""

#: ../../peps/pep-3100.rst:14
msgid ""
"This PEP, previously known as :pep:`3000`, describes smaller scale "
"changes and new features for which no separate PEP is written yet, all "
"targeted for Python 3000."
msgstr ""

#: ../../peps/pep-3100.rst:18
msgid ""
"The list of features included in this document is subject to change and "
"isn't binding on the Python development community; features may be added,"
" removed, and modified at any time.  The purpose of this list is to focus"
" our language development effort on changes that are steps to 3.0, and to"
" encourage people to invent ways to smooth the transition."
msgstr ""

#: ../../peps/pep-3100.rst:24
msgid ""
"This document is not a wish-list that anyone can extend.  While there are"
" two authors of this PEP, we're just supplying the text; the decisions "
"for which changes are listed in this document are made by Guido van "
"Rossum, who has chosen them as goals for Python 3.0."
msgstr ""

#: ../../peps/pep-3100.rst:29
msgid ""
"Guido's pronouncements on things that will not change in Python 3.0 are "
"recorded in :pep:`3099`."
msgstr ""

#: ../../peps/pep-3100.rst:34
msgid "General goals"
msgstr ""

#: ../../peps/pep-3100.rst:36
msgid ""
"A general goal is to reduce feature duplication by removing old ways of "
"doing things.  A general principle of the design will be that one obvious"
" way of doing something is enough. [1]_"
msgstr ""

#: ../../peps/pep-3100.rst:42
msgid "Influencing PEPs"
msgstr ""

#: ../../peps/pep-3100.rst:44
msgid ":pep:`238` (Changing the Division Operator)"
msgstr ""

#: ../../peps/pep-3100.rst:45
msgid ":pep:`328` (Imports: Multi-Line and Absolute/Relative)"
msgstr ""

#: ../../peps/pep-3100.rst:46
msgid ":pep:`343` (The \"with\" Statement)"
msgstr ""

#: ../../peps/pep-3100.rst:47
msgid ":pep:`352` (Required Superclass for Exceptions)"
msgstr ""

#: ../../peps/pep-3100.rst:51
msgid "Style changes"
msgstr ""

#: ../../peps/pep-3100.rst:53
msgid ""
"The C style guide will be updated to use 4-space indents, never tabs. "
"This style should be used for all new files; existing files can be "
"updated only if there is no hope to ever merge a particular file from the"
" Python 2 HEAD.  Within a file, the indentation style should be "
"consistent.  No other style guide changes are planned ATM."
msgstr ""

#: ../../peps/pep-3100.rst:61
msgid "Core language"
msgstr ""

#: ../../peps/pep-3100.rst:63
msgid "True division becomes default behavior :pep:`238` [done]"
msgstr ""

#: ../../peps/pep-3100.rst:64
msgid "``exec`` as a statement is not worth it -- make it a function [done]"
msgstr ""

#: ../../peps/pep-3100.rst:65
msgid "Add optional declarations for static typing :pep:`3107` [10]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:66
msgid "Support only new-style classes; classic classes will be gone [1]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:67
msgid "Replace ``print`` by a function [14]_  :pep:`3105` [done]"
msgstr ""

#: ../../peps/pep-3100.rst:68
msgid "The ``softspace`` attribute of files goes away. [done]"
msgstr ""

#: ../../peps/pep-3100.rst:69
msgid ""
"Use ``except E1, E2, E3 as err:`` if you want the error variable. [3]_ "
"[done]"
msgstr ""

#: ../../peps/pep-3100.rst:70
msgid "``None`` becomes a keyword [4]_; also ``True`` and ``False`` [done]"
msgstr ""

#: ../../peps/pep-3100.rst:71
msgid "``...`` to become a general expression element [16]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:72
msgid "``as`` becomes a keyword [5]_ (starting in 2.6 already) [done]"
msgstr ""

#: ../../peps/pep-3100.rst:73
msgid ""
"Have list comprehensions be syntactic sugar for passing an equivalent "
"generator expression to ``list()``; as a consequence the loop variable "
"will no longer be exposed :pep:`289` [done]"
msgstr ""

#: ../../peps/pep-3100.rst:76
msgid ""
"Comparisons other than ``==`` and ``!=`` between disparate types will "
"raise an exception unless explicitly supported by the type [6]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:78
msgid ""
"floats will not be acceptable as arguments in place of ints for "
"operations where floats are inadvertently accepted (PyArg_ParseTuple() i "
"& l formats)"
msgstr ""

#: ../../peps/pep-3100.rst:80
msgid ""
"Remove from ... import * at function scope.  [done] This means that "
"functions can always be optimized and support for unoptimized functions "
"can go away."
msgstr ""

#: ../../peps/pep-3100.rst:86
msgid "Imports :pep:`328`"
msgstr ""

#: ../../peps/pep-3100.rst:83
msgid "Imports will be absolute by default. [done]"
msgstr ""

#: ../../peps/pep-3100.rst:84
msgid "Relative imports must be explicitly specified. [done]"
msgstr ""

#: ../../peps/pep-3100.rst:85
msgid ""
"Indirection entries in ``sys.modules`` (i.e., a value of ``None`` for "
"``A.string`` means to use the top-level ``string`` module) will not be "
"supported."
msgstr ""

#: ../../peps/pep-3100.rst:88
msgid ""
"__init__.py might become optional in sub-packages?  __init__.py will "
"still be required for top-level packages."
msgstr ""

#: ../../peps/pep-3100.rst:90
msgid "Cleanup the Py_InitModule() variants {,3,4} (also import and parser APIs)"
msgstr ""

#: ../../peps/pep-3100.rst:91
msgid "Cleanup the APIs exported in pythonrun, etc."
msgstr ""

#: ../../peps/pep-3100.rst:92
msgid "Some expressions will require parentheses that didn't in 2.x:"
msgstr ""

#: ../../peps/pep-3100.rst:94
msgid ""
"List comprehensions will require parentheses around the iterables. This "
"will make list comprehensions more similar to generator comprehensions. "
"[x for x in 1, 2] will need to be:  [x for x in (1, 2)] [done]"
msgstr ""

#: ../../peps/pep-3100.rst:97
msgid "Lambdas may have to be parenthesized :pep:`308` [NO]"
msgstr ""

#: ../../peps/pep-3100.rst:99
msgid ""
"In order to get rid of the confusion between __builtin__ and "
"__builtins__, it was decided to rename __builtin__ (the module) to "
"builtins, and to leave __builtins__ (the sandbox hook) alone. [#builtin]_"
" [#builtins]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:102
msgid ""
"Attributes on functions of the form ``func_whatever`` will be renamed "
"``__whatever__`` [17]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:104
msgid ""
"Set literals and comprehensions [19]_ [20]_ [done] {x} means set([x]); "
"{x, y} means set([x, y]). {F(x) for x in S if P(x)} means set(F(x) for x "
"in S if P(x)). NB. {range(x)} means set([range(x)]), NOT set(range(x)). "
"There's no literal for an empty set; use set() (or {1}&{2} :-). There's "
"no frozenset literal; they are too rarely needed."
msgstr ""

#: ../../peps/pep-3100.rst:110
msgid ""
"The ``__nonzero__`` special method will be renamed to ``__bool__`` and "
"have to return a bool. The typeobject slot will be called ``tp_bool`` "
"[23]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:113
msgid ""
"Dict comprehensions, as first proposed in :pep:`274` [done] {K(x): V(x) "
"for x in S if P(x)} means dict((K(x), V(x)) for x in S if P(x))."
msgstr ""

#: ../../peps/pep-3100.rst:116 ../../peps/pep-3100.rst:156
#: ../../peps/pep-3100.rst:180 ../../peps/pep-3100.rst:205
msgid "To be removed:"
msgstr ""

#: ../../peps/pep-3100.rst:118
msgid "String exceptions: use instances of an Exception class [2]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:119
msgid ""
"``raise Exception, \"message\"``: use ``raise Exception(\"message\")`` "
"[12]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:121
msgid "``x``: use ``repr(x)`` [2]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:122
msgid "The ``<>`` operator: use ``!=`` instead [3]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:123
msgid ""
"The __mod__ and __divmod__ special methods on float. [they should stay] "
"[21]_"
msgstr ""

#: ../../peps/pep-3100.rst:124
msgid "Drop unbound methods [7]_ [26]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:125
msgid "METH_OLDARGS [done]"
msgstr ""

#: ../../peps/pep-3100.rst:126
msgid "WITH_CYCLE_GC [done]"
msgstr ""

#: ../../peps/pep-3100.rst:127
msgid ""
"__getslice__, __setslice__, __delslice__ [#sequence-types]_; remove slice"
" opcodes and use slice objects. [done]"
msgstr ""

#: ../../peps/pep-3100.rst:129
msgid ""
"``__oct__``, ``__hex__``: use ``__index__`` in ``oct()`` and ``hex()`` "
"instead. [done]"
msgstr ""

#: ../../peps/pep-3100.rst:131
msgid "``__methods__`` and ``__members__`` [done]"
msgstr ""

#: ../../peps/pep-3100.rst:132
msgid ""
"C APIs (see code): PyFloat_AsString, PyFloat_AsReprString, "
"PyFloat_AsStringEx, PySequence_In, PyEval_EvalFrame, PyEval_CallObject, "
"_PyObject_Del, _PyObject_GC_Del, _PyObject_GC_Track, _PyObject_GC_UnTrack"
" PyString_AsEncodedString, PyString_AsDecodedString PyArg_NoArgs, "
"PyArg_GetInt, intargfunc, intintargfunc"
msgstr ""

#: ../../peps/pep-3100.rst:139
msgid "PyImport_ReloadModule ?"
msgstr ""

#: ../../peps/pep-3100.rst:143
msgid "Atomic Types"
msgstr ""

#: ../../peps/pep-3100.rst:145
msgid ""
"Remove distinction between int and long types; 'long' built-in type and "
"literals with 'L' or 'l' suffix disappear [1]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:147
msgid ""
"Make all strings be Unicode, and have a separate bytes() type [1]_ The "
"new string type will be called 'str'. See :pep:`3137`. [done]"
msgstr ""

#: ../../peps/pep-3100.rst:149
msgid ""
"Return iterable views instead of lists where appropriate for atomic type "
"methods (e.g. ``dict.keys()``, ``dict.values()``, ``dict.items()``, "
"etc.); iter* methods will be removed. [done]"
msgstr ""

#: ../../peps/pep-3100.rst:152
msgid "Make ``string.join()`` stringify its arguments? [18]_ [NO]"
msgstr ""

#: ../../peps/pep-3100.rst:153
msgid ""
"Fix open() so it returns a ValueError if the mode is bad rather than "
"IOError. [done]"
msgstr ""

#: ../../peps/pep-3100.rst:158
msgid ""
"``basestring.find()`` and ``basestring.rfind()``; use "
"``basestring.index()`` or ``basestring.[r]partition()`` or "
"``basestring.rindex()`` in a try/except block??? [13]_ [UNLIKELY]"
msgstr ""

#: ../../peps/pep-3100.rst:161
msgid "``file.xreadlines()`` method [#file-object]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:162
msgid "``dict.setdefault()``? [15]_ [UNLIKELY]"
msgstr ""

#: ../../peps/pep-3100.rst:163
msgid "``dict.has_key()`` method; use ``in`` operator [done]"
msgstr ""

#: ../../peps/pep-3100.rst:164
msgid ""
"``list.sort()`` and ``builtin.sorted()`` methods: eliminate ``cmp`` "
"parameter [27]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:168
msgid "Built-in Namespace"
msgstr ""

#: ../../peps/pep-3100.rst:170
msgid ""
"Make built-ins return an iterator where appropriate (e.g. ``range()``, "
"``zip()``, ``map()``, ``filter()``, etc.) [done]"
msgstr ""

#: ../../peps/pep-3100.rst:172
msgid ""
"Remove ``input()`` and rename ``raw_input()`` to ``input()``. If you need"
" the old input(), use eval(input()). [done]"
msgstr ""

#: ../../peps/pep-3100.rst:174
msgid ""
"Introduce ``trunc()``, which would call the ``__trunc__()`` method on its"
" argument; suggested use is for objects like float where calling "
"``__int__()`` has data loss, but an integral representation is still "
"desired? [8]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:177
msgid "Exception hierarchy changes :pep:`352` [done]"
msgstr ""

#: ../../peps/pep-3100.rst:178
msgid "Add a ``bin()`` function for a binary representation of integers [done]"
msgstr ""

#: ../../peps/pep-3100.rst:182
msgid "``apply()``: use ``f(*args, **kw)`` instead [2]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:183
msgid "``buffer()``: must die (use a bytes() type instead) (?) [2]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:184
msgid ""
"``callable()``: just use isinstance(x, collections.Callable) (?) [2]_ "
"[done]"
msgstr ""

#: ../../peps/pep-3100.rst:185
msgid "``compile()``: put in ``sys`` (or perhaps in a module of its own) [2]_"
msgstr ""

#: ../../peps/pep-3100.rst:186
msgid "``coerce()``: no longer needed [2]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:187
msgid "``execfile()``, ``reload()``: use ``exec()`` [2]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:188
msgid "``intern()``: put in ``sys`` [2]_, [22]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:189
msgid ""
"``reduce()``: put in ``functools``, a loop is more readable most of the "
"times [2]_, [9]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:191
msgid "``xrange()``: use ``range()`` instead [1]_ [See range() above] [done]"
msgstr ""

#: ../../peps/pep-3100.rst:194
msgid "``StandardError``: this is a relic from the original exception hierarchy;"
msgstr ""

#: ../../peps/pep-3100.rst:193
msgid "subclass ``Exception`` instead. [done]"
msgstr ""

#: ../../peps/pep-3100.rst:197
msgid "Standard library"
msgstr ""

#: ../../peps/pep-3100.rst:199
msgid "Reorganize the standard library to not be as shallow?"
msgstr ""

#: ../../peps/pep-3100.rst:200
msgid ""
"Move test code to where it belongs, there will be no more test() "
"functions in the standard library"
msgstr ""

#: ../../peps/pep-3100.rst:202
msgid "Convert all tests to use either doctest or unittest."
msgstr ""

#: ../../peps/pep-3100.rst:203
msgid "For the procedures of standard library improvement, see :pep:`3001`"
msgstr ""

#: ../../peps/pep-3100.rst:207
msgid "The sets module.  [done]"
msgstr ""

#: ../../peps/pep-3100.rst:227
msgid "stdlib modules to be removed"
msgstr ""

#: ../../peps/pep-3100.rst:211
msgid "see docstrings and comments in the source"
msgstr ""

#: ../../peps/pep-3100.rst:210
msgid "``macfs`` [to do]"
msgstr ""

#: ../../peps/pep-3100.rst:211
msgid ""
"``new``, ``reconvert``, ``stringold``, ``xmllib``, ``pcre``, ``pypcre``, "
"``strop`` [all done]"
msgstr ""

#: ../../peps/pep-3100.rst:221
msgid "see :pep:`4`"
msgstr ""

#: ../../peps/pep-3100.rst:214
msgid "``buildtools``, ``mimetools``, ``multifile``, ``rfc822``, [to do]"
msgstr ""

#: ../../peps/pep-3100.rst:219
msgid ""
"``mpz``, ``posixfile``, ``regsub``, ``rgbimage``, ``sha``, ``statcache``,"
" ``sv``, ``TERMIOS``, ``timing`` [done]"
msgstr ""

#: ../../peps/pep-3100.rst:221
msgid "``cfmfile``, ``gopherlib``, ``md5``, ``MimeWriter``, ``mimify`` [done]"
msgstr ""

#: ../../peps/pep-3100.rst:222
msgid "``cl``, ``sets``, ``xreadlines``, ``rotor``, ``whrandom`` [done]"
msgstr ""

#: ../../peps/pep-3100.rst:227
msgid "Everything in lib-old :pep:`4` [done]"
msgstr ""

#: ../../peps/pep-3100.rst:224
msgid ""
"``Para``, ``addpack``, ``cmp``, ``cmpcache``, ``codehack``, ``dircmp``, "
"``dump``, ``find``, ``fmt``, ``grep``, ``lockfile``, ``newdir``, ``ni``, "
"``packmail``, ``poly``, ``rand``, ``statcache``, ``tb``, ``tzparse``, "
"``util``, ``whatsound``, ``whrandom``, ``zmod``"
msgstr ""

#: ../../peps/pep-3100.rst:229
msgid ""
"``sys.exitfunc``: use atexit module instead [#sys-module]_, [#exitfunc-"
"patch]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:231
msgid ""
"``sys.exc_type``, ``sys.exc_values``, ``sys.exc_traceback``: not thread-"
"safe; use ``sys.exc_info()`` or an attribute of the exception [2]_ [11]_ "
"[#sys-module]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:234
msgid ""
"``sys.exc_clear``: Python 3's except statements provide the same "
"functionality [24]_ :pep:`3110` [#sys-module]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:236
msgid "``array.read``, ``array.write`` [#array-module]_"
msgstr ""

#: ../../peps/pep-3100.rst:237
msgid ""
"``operator.isCallable`` : ``callable()`` built-in is being removed "
"[#operator-module]_ [#remove-operator-funcs]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:239
msgid ""
"``operator.sequenceIncludes`` : redundant thanks to ``operator.contains``"
" [#operator-module]_  [#remove-operator-funcs]_ [done]"
msgstr ""

#: ../../peps/pep-3100.rst:241
msgid ""
"In the thread module, the acquire_lock() and release_lock() aliases for "
"the acquire() and release() methods on lock objects. (Probably also just "
"remove the thread module as a public API, in favor of always using "
"threading.py.)"
msgstr ""

#: ../../peps/pep-3100.rst:245
msgid "UserXyz classes, in favour of XyzMixins."
msgstr ""

#: ../../peps/pep-3100.rst:247
msgid "Remove the unreliable empty() and full() methods from Queue.py? [25]_"
msgstr ""

#: ../../peps/pep-3100.rst:248
msgid "Remove jumpahead() from the random API? [25]_"
msgstr ""

#: ../../peps/pep-3100.rst:249
msgid ""
"Make the primitive for random be something generating random bytes rather"
" than random floats? [25]_"
msgstr ""

#: ../../peps/pep-3100.rst:251
msgid "Get rid of Cookie.SerialCookie and Cookie.SmartCookie? [25]_"
msgstr ""

#: ../../peps/pep-3100.rst:252
msgid ""
"Modify the heapq.heapreplace() API to compare the new value to the top of"
" the heap? [25]_"
msgstr ""

#: ../../peps/pep-3100.rst:256
msgid "Outstanding Issues"
msgstr ""

#: ../../peps/pep-3100.rst:258
msgid ""
"Require C99, so we can use // comments, named initializers, declare "
"variables without introducing a new scope, among other benefits.  (Also "
"better support for IEEE floating point issues like NaN and infinities?)"
msgstr ""

#: ../../peps/pep-3100.rst:262
msgid "Remove support for old systems, including: BeOS, RISCOS, (SGI) Irix, Tru64"
msgstr ""

#: ../../peps/pep-3100.rst:266
msgid "References"
msgstr "Referências"

#: ../../peps/pep-3100.rst:268
msgid ""
"PyCon 2003 State of the Union: "
"https://legacy.python.org/doc/essays/ppt/pycon2003/pycon2003.ppt"
msgstr ""

#: ../../peps/pep-3100.rst:271
msgid ""
"Python Regrets: "
"https://legacy.python.org/doc/essays/ppt/regrets/PythonRegrets.pdf"
msgstr ""

#: ../../peps/pep-3100.rst:274
msgid "Python Wiki: https://wiki.python.org/moin/Python3.0"
msgstr ""

#: ../../peps/pep-3100.rst:277
msgid ""
"python-dev email (\"Constancy of None\") "
"https://mail.python.org/pipermail/python-dev/2004-July/046294.html"
msgstr ""

#: ../../peps/pep-3100.rst:280
msgid ""
"python-dev email (' \"as\" to be a keyword?') "
"https://mail.python.org/pipermail/python-dev/2004-July/046316.html"
msgstr ""

#: ../../peps/pep-3100.rst:283
msgid ""
"python-dev email (\"Comparing heterogeneous types\") "
"https://mail.python.org/pipermail/python-dev/2004-June/045111.html"
msgstr ""

#: ../../peps/pep-3100.rst:286
msgid ""
"python-dev email (\"Let's get rid of unbound methods\") "
"https://mail.python.org/pipermail/python-dev/2005-January/050625.html"
msgstr ""

#: ../../peps/pep-3100.rst:289
msgid ""
"python-dev email (\"Fixing _PyEval_SliceIndex so that integer-like "
"objects can be used\") https://mail.python.org/pipermail/python-"
"dev/2005-February/051674.html"
msgstr ""

#: ../../peps/pep-3100.rst:293
msgid ""
"Guido's blog (\"The fate of reduce() in Python 3000\") "
"https://www.artima.com/weblogs/viewpost.jsp?thread=98196"
msgstr ""

#: ../../peps/pep-3100.rst:296
msgid ""
"Guido's blog (\"Python Optional Typechecking Redux\") "
"https://www.artima.com/weblogs/viewpost.jsp?thread=89161"
msgstr ""

#: ../../peps/pep-3100.rst:299
msgid ""
"python-dev email (\"anonymous blocks\") https://mail.python.org/pipermail"
"/python-dev/2005-April/053060.html"
msgstr ""

#: ../../peps/pep-3100.rst:302
msgid ""
"python-dev email (\"PEP 8: exception style\") "
"https://mail.python.org/pipermail/python-dev/2005-August/055190.html"
msgstr ""

#: ../../peps/pep-3100.rst:305
msgid ""
"python-dev email (Remove str.find in 3.0?) "
"https://mail.python.org/pipermail/python-dev/2005-August/055705.html"
msgstr ""

#: ../../peps/pep-3100.rst:308
msgid ""
"python-dev email (Replacement for print in Python 3.0) "
"https://mail.python.org/pipermail/python-dev/2005-September/056154.html"
msgstr ""

#: ../../peps/pep-3100.rst:311
msgid ""
"python-dev email (\"defaultdict\") https://mail.python.org/pipermail"
"/python-dev/2006-February/061261.html"
msgstr ""

#: ../../peps/pep-3100.rst:314
msgid ""
"python-3000 email "
"https://mail.python.org/pipermail/python-3000/2006-April/000996.html"
msgstr ""

#: ../../peps/pep-3100.rst:317
msgid ""
"python-3000 email (\"Pronouncement on parameter lists\") "
"https://mail.python.org/pipermail/python-3000/2006-April/001175.html"
msgstr ""

#: ../../peps/pep-3100.rst:320
msgid ""
"python-3000 email (\"More wishful thinking\") "
"https://mail.python.org/pipermail/python-3000/2006-April/000810.html"
msgstr ""

#: ../../peps/pep-3100.rst:323
msgid ""
"python-3000 email (\"sets in P3K?\") "
"https://mail.python.org/pipermail/python-3000/2006-April/001286.html"
msgstr ""

#: ../../peps/pep-3100.rst:326
msgid ""
"python-3000 email (\"sets in P3K?\") "
"https://mail.python.org/pipermail/python-3000/2006-May/001666.html"
msgstr ""

#: ../../peps/pep-3100.rst:329
msgid ""
"python-3000 email (\"bug in modulus?\") "
"https://mail.python.org/pipermail/python-3000/2006-May/001735.html"
msgstr ""

#: ../../peps/pep-3100.rst:332
msgid ""
"SF patch \"sys.id() and sys.intern()\" "
"https://bugs.python.org/issue1601678"
msgstr ""

#: ../../peps/pep-3100.rst:335
msgid ""
"python-3000 email (\"__nonzero__ vs. __bool__\") "
"https://mail.python.org/pipermail/python-3000/2006-November/004524.html"
msgstr ""

#: ../../peps/pep-3100.rst:338
msgid ""
"python-3000 email (\"Pre-peps on raise and except changes\") "
"https://mail.python.org/pipermail/python-3000/2007-February/005672.html"
msgstr ""

#: ../../peps/pep-3100.rst:341
msgid ""
"python-3000 email (\"Py3.0 Library Ideas\") "
"https://mail.python.org/pipermail/python-3000/2007-February/005726.html"
msgstr ""

#: ../../peps/pep-3100.rst:344
msgid ""
"python-dev email (\"Should we do away with unbound methods in Py3k?\") "
"https://mail.python.org/pipermail/python-dev/2007-November/075279.html"
msgstr ""

#: ../../peps/pep-3100.rst:347
msgid ""
"python-dev email (\"Mutable sequence .sort() signature\") "
"https://mail.python.org/pipermail/python-dev/2008-February/076818.html"
msgstr ""

#: ../../peps/pep-3100.rst:350
msgid ""
"Python docs (sys -- System-specific parameters and functions) "
"https://docs.python.org/release/2.6/library/sys.html"
msgstr ""

#: ../../peps/pep-3100.rst:353
msgid ""
"Python docs (operator -- Standard operators as functions) "
"https://docs.python.org/release/2.6/library/operator.html"
msgstr ""

#: ../../peps/pep-3100.rst:356
msgid ""
"Python docs (array -- Efficient arrays of numeric values) "
"https://docs.python.org/release/2.6/library/array.html"
msgstr ""

#: ../../peps/pep-3100.rst:359
msgid ""
"Python docs (File objects) "
"https://docs.python.org/release/2.6/library/stdtypes.html"
msgstr ""

#: ../../peps/pep-3100.rst:362
msgid ""
"Python docs (Additional methods for emulation of sequence types) "
"https://docs.python.org/release/2.6/reference/datamodel.html#additional-"
"methods-for-emulation-of-sequence-types"
msgstr ""

#: ../../peps/pep-3100.rst:365
msgid ""
"Approach to resolving __builtin__ vs __builtins__ "
"https://mail.python.org/pipermail/python-3000/2007-March/006161.html"
msgstr ""

#: ../../peps/pep-3100.rst:368
msgid ""
"New name for __builtins__ https://mail.python.org/pipermail/python-"
"dev/2007-November/075388.html"
msgstr ""

#: ../../peps/pep-3100.rst:371
msgid ""
"Patch to remove sys.exitfunc "
"https://github.com/python/cpython/issues/44715"
msgstr ""

#: ../../peps/pep-3100.rst:374
msgid ""
"Remove deprecated functions from operator "
"https://github.com/python/cpython/issues/43602"
msgstr ""

#: ../../peps/pep-3100.rst:378
msgid "Copyright"
msgstr "Copyright"

#: ../../peps/pep-3100.rst:380
msgid "This document has been placed in the public domain."
msgstr "Este documento foi colocado em domínio público."

#~ msgid "Drop unbound methods [7]_ [25]_ [done]"
#~ msgstr ""

#~ msgid "Remove the unreliable empty() and full() methods from Queue.py?"
#~ msgstr ""

#~ msgid "Remove jumpahead() from the random API?"
#~ msgstr ""

#~ msgid ""
#~ "Make the primitive for random be "
#~ "something generating random bytes rather "
#~ "than random floats?"
#~ msgstr ""

#~ msgid "Get rid of Cookie.SerialCookie and Cookie.SmartCookie?"
#~ msgstr ""

#~ msgid ""
#~ "Modify the heapq.heapreplace() API to "
#~ "compare the new value to the top"
#~ " of the heap?"
#~ msgstr ""

#~ msgid ""
#~ "PyCon 2003 State of the Union: "
#~ "http://www.python.org/doc/essays/ppt/pycon2003/pycon2003.ppt"
#~ msgstr ""

#~ msgid ""
#~ "Python Regrets: "
#~ "http://www.python.org/doc/essays/ppt/regrets/PythonRegrets.pdf"
#~ msgstr ""

#~ msgid "Python Wiki: http://www.python.org/moin/Python3.0"
#~ msgstr ""

#~ msgid ""
#~ "Guido's blog (\"The fate of reduce() "
#~ "in Python 3000\") "
#~ "http://www.artima.com/weblogs/viewpost.jsp?thread=98196"
#~ msgstr ""

#~ msgid ""
#~ "Guido's blog (\"Python Optional Typechecking"
#~ " Redux\") "
#~ "http://www.artima.com/weblogs/viewpost.jsp?thread=89161"
#~ msgstr ""

#~ msgid ""
#~ "Python docs (sys -- System-specific "
#~ "parameters and functions) "
#~ "http://docs.python.org/library/sys.html"
#~ msgstr ""

#~ msgid ""
#~ "Python docs (operator -- Standard "
#~ "operators as functions) "
#~ "http://docs.python.org/library/operator.html"
#~ msgstr ""

#~ msgid ""
#~ "Python docs (array -- Efficient arrays"
#~ " of numeric values) "
#~ "http://docs.python.org/library/array.html"
#~ msgstr ""

#~ msgid "Python docs (File objects) http://docs.python.org/library/stdtypes.html"
#~ msgstr ""

#~ msgid ""
#~ "Python docs (Additional methods for "
#~ "emulation of sequence types) "
#~ "http://docs.python.org/reference/datamodel.html#additional-"
#~ "methods-for-emulation-of-sequence-types"
#~ msgstr ""

#~ msgid "Patch to remove sys.exitfunc https://bugs.python.org/issue1680961"
#~ msgstr ""

#~ msgid ""
#~ "Remove deprecated functions from operator "
#~ "https://bugs.python.org/issue1516309"
#~ msgstr ""

